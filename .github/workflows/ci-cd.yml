name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/web

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: therobotoverlord-web/package-lock.json
          
      - name: Install dependencies
        working-directory: therobotoverlord-web
        run: npm ci --legacy-peer-deps
        
      - name: Type checking
        working-directory: therobotoverlord-web
        run: npm run type-check
        
      - name: Linting
        working-directory: therobotoverlord-web
        run: npm run lint
        
      - name: Unit tests
        working-directory: therobotoverlord-web
        run: npm run test -- --coverage --watchAll=false
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: therobotoverlord-web/coverage
          
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: therobotoverlord-web/package-lock.json
          
      - name: Install dependencies
        working-directory: therobotoverlord-web
        run: npm ci --legacy-peer-deps
        
      - name: Install Playwright browsers
        working-directory: therobotoverlord-web
        run: npx playwright install --with-deps
        
      - name: Build application
        working-directory: therobotoverlord-web
        run: npm run build:staging
        
      - name: Start application
        working-directory: therobotoverlord-web
        run: npm start &
        
      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run E2E tests
        working-directory: therobotoverlord-web
        run: npm run test:e2e
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: therobotoverlord-web/playwright-report/
          retention-days: 30

  build:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: therobotoverlord-web/package-lock.json
          
      - name: Install dependencies
        working-directory: therobotoverlord-web
        run: npm ci --legacy-peer-deps
        
      - name: Security audit
        working-directory: therobotoverlord-web
        run: npm audit --audit-level=high
        
      - name: Build application
        working-directory: therobotoverlord-web
        run: npm run build:production
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            therobotoverlord-web/.next/
            therobotoverlord-web/public/
          retention-days: 7

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: therobotoverlord-web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          # Add actual deployment commands here
          # This could be:
          # - Updating Kubernetes deployments
          # - Triggering cloud provider deployments
          # - Running deployment scripts on servers
          
      - name: Health check
        run: |
          echo "üè• Running health checks"
          # Add health check commands
          
      - name: Notify deployment
        if: always()
        run: |
          echo "üì¢ Sending deployment notifications"
          # Add notification logic (Slack, Discord, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment"
          # Add actual deployment commands here
          
      - name: Health check
        run: |
          echo "üè• Running health checks"
          # Add health check commands
          
      - name: Notify deployment
        if: always()
        run: |
          echo "üì¢ Sending deployment notifications"
          # Add notification logic
