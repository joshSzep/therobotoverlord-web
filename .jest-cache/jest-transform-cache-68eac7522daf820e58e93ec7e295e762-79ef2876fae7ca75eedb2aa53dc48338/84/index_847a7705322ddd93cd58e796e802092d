1db3de944ba4f16786610863b84fe002
/**
 * Centralized type exports for The Robot Overlord
 * Re-exports all type definitions for easy importing
 */ // Core API types
"use strict";

/* istanbul ignore next */
function cov_276p2tb69p() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/index.ts";
  var hash = "5a718eee8405a966042f7d69a61147f4ad6c2796";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 40
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 43
        }
      },
      "4": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 47
        }
      },
      "5": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "6": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 53
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 25,
          column: 7
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 23,
          column: 15
        }
      },
      "10": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 35
        }
      },
      "11": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export_star",
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 21
          }
        },
        loc: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 30
          },
          end: {
            line: 16,
            column: 31
          }
        },
        loc: {
          start: {
            line: 16,
            column: 42
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 21
          },
          end: {
            line: 20,
            column: 22
          }
        },
        loc: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 22,
            column: 17
          }
        },
        line: 20
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 17,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 17,
            column: 27
          }
        }, {
          start: {
            line: 17,
            column: 31
          },
          end: {
            line: 17,
            column: 75
          }
        }],
        line: 17
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/index.ts"],
      sourcesContent: ["/**\n * Centralized type exports for The Robot Overlord\n * Re-exports all type definitions for easy importing\n */\n\n// Core API types\nexport * from './api';\n\n// User types (base exports)\nexport type { User, UserRole, UserStatus, UserStats, AuthTokens, CurrentUser, UserPreferences, UserActivity, UserSearchFilters, UserSearchResponse } from './user';\n\n// Domain-specific types\nexport * from './posts';\nexport * from './topics';\n\n// Leaderboard types (avoiding conflicts)\nexport type { \n  LeaderboardEntry as LeaderboardRanking,\n  LeaderboardFilters,\n  Competition,\n  Achievement,\n  UserAchievement,\n  Streak,\n  LeaderboardStatistics,\n  RankingHistory,\n  CompetitionLeaderboard\n} from './leaderboard';\n\n// Badge types (avoiding conflicts)\nexport type {\n  Badge as BadgeDefinition,\n  UserBadge as AwardedBadge,\n  BadgeProgress,\n  BadgeFilters,\n  CreateBadgeRequest,\n  UpdateBadgeRequest,\n  BadgeAward,\n  BadgeStatistics,\n  BadgeLeaderboard,\n  BadgeAuditLog,\n  BadgeAnalytics\n} from './badges';\n\nexport * from './moderation';\n\n// Component and form types\nexport * from './components';\n\n// Validation schemas and form data types\nexport * from '../lib/validations';\n"],
      names: [],
      mappings: "AAAA;;;CAGC,GAED,iBAAiB;;;;;qBACH;qBAMA;qBACA;qBA8BA;qBAGA;qBAGA"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5a718eee8405a966042f7d69a61147f4ad6c2796"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_276p2tb69p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_276p2tb69p();
cov_276p2tb69p().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_276p2tb69p().s[1]++;
_export_star(require("./api"), exports);
/* istanbul ignore next */
cov_276p2tb69p().s[2]++;
_export_star(require("./posts"), exports);
/* istanbul ignore next */
cov_276p2tb69p().s[3]++;
_export_star(require("./topics"), exports);
/* istanbul ignore next */
cov_276p2tb69p().s[4]++;
_export_star(require("./moderation"), exports);
/* istanbul ignore next */
cov_276p2tb69p().s[5]++;
_export_star(require("./components"), exports);
/* istanbul ignore next */
cov_276p2tb69p().s[6]++;
_export_star(require("../lib/validations"), exports);
function _export_star(from, to) {
  /* istanbul ignore next */
  cov_276p2tb69p().f[0]++;
  cov_276p2tb69p().s[7]++;
  Object.keys(from).forEach(function (k) {
    /* istanbul ignore next */
    cov_276p2tb69p().f[1]++;
    cov_276p2tb69p().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_276p2tb69p().b[1][0]++, k !== "default") &&
    /* istanbul ignore next */
    (cov_276p2tb69p().b[1][1]++, !Object.prototype.hasOwnProperty.call(to, k))) {
      /* istanbul ignore next */
      cov_276p2tb69p().b[0][0]++;
      cov_276p2tb69p().s[9]++;
      Object.defineProperty(to, k, {
        enumerable: true,
        get: function () {
          /* istanbul ignore next */
          cov_276p2tb69p().f[2]++;
          cov_276p2tb69p().s[10]++;
          return from[k];
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_276p2tb69p().b[0][1]++;
    }
  });
  /* istanbul ignore next */
  cov_276p2tb69p().s[11]++;
  return from;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiY292XzI3NnAydGI2OXAiLCJzIl0sInNvdXJjZXMiOlsiL1VzZXJzL2pvc2hzemVwL2NvZGUvdGhlcm9ib3RvdmVybG9yZC1tb25vL3RoZXJvYm90b3ZlcmxvcmQtd2ViL3NyYy90eXBlcy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENlbnRyYWxpemVkIHR5cGUgZXhwb3J0cyBmb3IgVGhlIFJvYm90IE92ZXJsb3JkXG4gKiBSZS1leHBvcnRzIGFsbCB0eXBlIGRlZmluaXRpb25zIGZvciBlYXN5IGltcG9ydGluZ1xuICovXG5cbi8vIENvcmUgQVBJIHR5cGVzXG5leHBvcnQgKiBmcm9tICcuL2FwaSc7XG5cbi8vIFVzZXIgdHlwZXMgKGJhc2UgZXhwb3J0cylcbmV4cG9ydCB0eXBlIHsgVXNlciwgVXNlclJvbGUsIFVzZXJTdGF0dXMsIFVzZXJTdGF0cywgQXV0aFRva2VucywgQ3VycmVudFVzZXIsIFVzZXJQcmVmZXJlbmNlcywgVXNlckFjdGl2aXR5LCBVc2VyU2VhcmNoRmlsdGVycywgVXNlclNlYXJjaFJlc3BvbnNlIH0gZnJvbSAnLi91c2VyJztcblxuLy8gRG9tYWluLXNwZWNpZmljIHR5cGVzXG5leHBvcnQgKiBmcm9tICcuL3Bvc3RzJztcbmV4cG9ydCAqIGZyb20gJy4vdG9waWNzJztcblxuLy8gTGVhZGVyYm9hcmQgdHlwZXMgKGF2b2lkaW5nIGNvbmZsaWN0cylcbmV4cG9ydCB0eXBlIHsgXG4gIExlYWRlcmJvYXJkRW50cnkgYXMgTGVhZGVyYm9hcmRSYW5raW5nLFxuICBMZWFkZXJib2FyZEZpbHRlcnMsXG4gIENvbXBldGl0aW9uLFxuICBBY2hpZXZlbWVudCxcbiAgVXNlckFjaGlldmVtZW50LFxuICBTdHJlYWssXG4gIExlYWRlcmJvYXJkU3RhdGlzdGljcyxcbiAgUmFua2luZ0hpc3RvcnksXG4gIENvbXBldGl0aW9uTGVhZGVyYm9hcmRcbn0gZnJvbSAnLi9sZWFkZXJib2FyZCc7XG5cbi8vIEJhZGdlIHR5cGVzIChhdm9pZGluZyBjb25mbGljdHMpXG5leHBvcnQgdHlwZSB7XG4gIEJhZGdlIGFzIEJhZGdlRGVmaW5pdGlvbixcbiAgVXNlckJhZGdlIGFzIEF3YXJkZWRCYWRnZSxcbiAgQmFkZ2VQcm9ncmVzcyxcbiAgQmFkZ2VGaWx0ZXJzLFxuICBDcmVhdGVCYWRnZVJlcXVlc3QsXG4gIFVwZGF0ZUJhZGdlUmVxdWVzdCxcbiAgQmFkZ2VBd2FyZCxcbiAgQmFkZ2VTdGF0aXN0aWNzLFxuICBCYWRnZUxlYWRlcmJvYXJkLFxuICBCYWRnZUF1ZGl0TG9nLFxuICBCYWRnZUFuYWx5dGljc1xufSBmcm9tICcuL2JhZGdlcyc7XG5cbmV4cG9ydCAqIGZyb20gJy4vbW9kZXJhdGlvbic7XG5cbi8vIENvbXBvbmVudCBhbmQgZm9ybSB0eXBlc1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRzJztcblxuLy8gVmFsaWRhdGlvbiBzY2hlbWFzIGFuZCBmb3JtIGRhdGEgdHlwZXNcbmV4cG9ydCAqIGZyb20gJy4uL2xpYi92YWxpZGF0aW9ucyc7XG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FBQSxDQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQUNjLFVBQUFBLE9BQUE7QUFBQTtBQUFBQyxjQUFBLEdBQUFDLENBQUE7cUJBTUEsWUFBQUYsT0FBQTtBQUFBO0FBQUFDLGNBQUEsR0FBQUMsQ0FBQTtxQkFDQSxhQUFBRixPQUFBO0FBQUE7QUFBQUMsY0FBQSxHQUFBQyxDQUFBO3FCQThCQSxpQkFBQUYsT0FBQTtBQUFBO0FBQUFDLGNBQUEsR0FBQUMsQ0FBQTtxQkFHQSxpQkFBQUYsT0FBQTtBQUFBO0FBQUFDLGNBQUEsR0FBQUMsQ0FBQTtxQkFHQSx1QkFBQUYsT0FBQSIsImlnbm9yZUxpc3QiOltdfQ==