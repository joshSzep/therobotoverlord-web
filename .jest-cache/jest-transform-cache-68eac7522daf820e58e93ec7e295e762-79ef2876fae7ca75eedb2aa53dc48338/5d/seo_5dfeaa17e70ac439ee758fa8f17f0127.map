{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/utils/seo.ts"],"sourcesContent":["'use client';\n\n// SEO utility functions\nexport const generateSlug = (title: string): string => {\n  return title\n    .toLowerCase()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single\n    .trim();\n};\n\nexport const truncateDescription = (text: string, maxLength: number = 160): string => {\n  // Remove HTML tags\n  const cleanText = text.replace(/<[^>]*>/g, '');\n  \n  if (cleanText.length <= maxLength) {\n    return cleanText;\n  }\n  \n  // Find the last space before maxLength to avoid cutting words\n  const truncated = cleanText.substring(0, maxLength);\n  const lastSpace = truncated.lastIndexOf(' ');\n  \n  return lastSpace > 0 \n    ? truncated.substring(0, lastSpace) + '...'\n    : truncated + '...';\n};\n\nexport const extractKeywords = (content: string, maxKeywords: number = 10): string[] => {\n  // Remove HTML tags and convert to lowercase\n  const cleanContent = content.replace(/<[^>]*>/g, '').toLowerCase();\n  \n  // Common stop words to filter out\n  const stopWords = new Set([\n    'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with',\n    'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had',\n    'do', 'does', 'did', 'will', 'would', 'should', 'could', 'can', 'may', 'might',\n    'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they'\n  ]);\n  \n  // Extract words and count frequency\n  const words = cleanContent\n    .split(/\\W+/)\n    .filter(word => word.length > 3 && !stopWords.has(word));\n  \n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  // Sort by frequency and return top keywords\n  return Object.entries(wordCount)\n    .sort(([, a], [, b]) => b - a)\n    .slice(0, maxKeywords)\n    .map(([word]) => word);\n};\n\nexport const generateCanonicalUrl = (path: string, baseUrl?: string): string => {\n  const base = baseUrl || process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return `${base}${cleanPath}`;\n};\n\nexport const generateOpenGraphImage = (\n  title: string,\n  description?: string,\n  type: 'article' | 'topic' | 'profile' | 'default' = 'default'\n): string => {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  \n  // In a real implementation, you might generate dynamic OG images\n  // For now, return appropriate static images based on type\n  const images = {\n    article: '/images/og-article.png',\n    topic: '/images/og-topic.png',\n    profile: '/images/og-profile.png',\n    default: '/images/og-default.png'\n  };\n  \n  return `${baseUrl}${images[type]}`;\n};\n\nexport const validateMetaTags = (meta: {\n  title?: string;\n  description?: string;\n  keywords?: string[];\n}): { isValid: boolean; warnings: string[] } => {\n  const warnings: string[] = [];\n  \n  // Title validation\n  if (!meta.title) {\n    warnings.push('Title is missing');\n  } else if (meta.title.length < 30) {\n    warnings.push('Title is too short (recommended: 30-60 characters)');\n  } else if (meta.title.length > 60) {\n    warnings.push('Title is too long (recommended: 30-60 characters)');\n  }\n  \n  // Description validation\n  if (!meta.description) {\n    warnings.push('Description is missing');\n  } else if (meta.description.length < 120) {\n    warnings.push('Description is too short (recommended: 120-160 characters)');\n  } else if (meta.description.length > 160) {\n    warnings.push('Description is too long (recommended: 120-160 characters)');\n  }\n  \n  // Keywords validation\n  if (!meta.keywords || meta.keywords.length === 0) {\n    warnings.push('Keywords are missing');\n  } else if (meta.keywords.length > 10) {\n    warnings.push('Too many keywords (recommended: 5-10 keywords)');\n  }\n  \n  return {\n    isValid: warnings.length === 0,\n    warnings\n  };\n};\n\nexport const generateBreadcrumbs = (pathname: string): Array<{\n  name: string;\n  url: string;\n}> => {\n  const paths = pathname.split('/').filter(Boolean);\n  const breadcrumbs = [{ name: 'Home', url: '/' }];\n  \n  let currentPath = '';\n  \n  paths.forEach((path, index) => {\n    currentPath += `/${path}`;\n    \n    // Convert path segments to readable names\n    const name = path\n      .split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n    \n    breadcrumbs.push({\n      name,\n      url: currentPath\n    });\n  });\n  \n  return breadcrumbs;\n};\n\nexport const generateRSSFeed = async (posts: Array<{\n  title: string;\n  description: string;\n  content: string;\n  author: string;\n  publishedAt: string;\n  slug: string;\n}>): Promise<string> => {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  const now = new Date().toUTCString();\n  \n  const rssItems = posts.map(post => `\n    <item>\n      <title><![CDATA[${post.title}]]></title>\n      <description><![CDATA[${post.description}]]></description>\n      <content:encoded><![CDATA[${post.content}]]></content:encoded>\n      <author>${post.author}</author>\n      <pubDate>${new Date(post.publishedAt).toUTCString()}</pubDate>\n      <link>${baseUrl}/posts/${post.slug}</link>\n      <guid isPermaLink=\"true\">${baseUrl}/posts/${post.slug}</guid>\n    </item>\n  `).join('');\n  \n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n  <channel>\n    <title>The Robot Overlord</title>\n    <description>AI-powered community platform for technology discussions and insights</description>\n    <link>${baseUrl}</link>\n    <language>en-US</language>\n    <lastBuildDate>${now}</lastBuildDate>\n    <atom:link href=\"${baseUrl}/feed.xml\" rel=\"self\" type=\"application/rss+xml\"/>\n    ${rssItems}\n  </channel>\n</rss>`;\n};\n\n// SEO performance tracking\nexport const trackSEOMetrics = (page: string, metrics: {\n  loadTime: number;\n  interactionTime: number;\n  cumulativeLayoutShift: number;\n  largestContentfulPaint: number;\n}) => {\n  // In production, send to analytics service\n  if (process.env.NODE_ENV === 'production') {\n    console.log('SEO Metrics for', page, metrics);\n    // Example: Send to Google Analytics, Adobe Analytics, etc.\n  }\n};\n\nexport default {\n  generateSlug,\n  truncateDescription,\n  extractKeywords,\n  generateCanonicalUrl,\n  generateOpenGraphImage,\n  validateMetaTags,\n  generateBreadcrumbs,\n  generateRSSFeed,\n  trackSEOMetrics\n};\n"],"names":["extractKeywords","generateBreadcrumbs","generateCanonicalUrl","generateOpenGraphImage","generateRSSFeed","generateSlug","trackSEOMetrics","truncateDescription","validateMetaTags","title","toLowerCase","replace","trim","text","maxLength","cleanText","length","truncated","substring","lastSpace","lastIndexOf","content","maxKeywords","cleanContent","stopWords","Set","words","split","filter","word","has","wordCount","reduce","acc","Object","entries","sort","a","b","slice","map","path","baseUrl","base","process","env","NEXT_PUBLIC_SITE_URL","cleanPath","startsWith","description","type","images","article","topic","profile","default","meta","warnings","push","keywords","isValid","pathname","paths","Boolean","breadcrumbs","name","url","currentPath","forEach","index","charAt","toUpperCase","join","posts","now","Date","toUTCString","rssItems","post","author","publishedAt","slug","page","metrics","NODE_ENV","console","log"],"mappings":"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"}