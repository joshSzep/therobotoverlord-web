{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/integration/websocket.integration.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { act } from 'react'\nimport userEvent from '@testing-library/user-event'\nimport { createMockPost, createMockUser } from '@/__tests__/utils/test-utils'\n\n// Mock WebSocket\nclass MockWebSocket {\n  static CONNECTING = 0\n  static OPEN = 1\n  static CLOSING = 2\n  static CLOSED = 3\n\n  url: string\n  readyState: number = MockWebSocket.CONNECTING\n  onopen: ((event: Event) => void) | null = null\n  onclose: ((event: CloseEvent) => void) | null = null\n  onmessage: ((event: MessageEvent) => void) | null = null\n  onerror: ((event: Event) => void) | null = null\n\n  constructor(url: string) {\n    this.url = url\n    // Simulate connection opening\n    setTimeout(() => {\n      this.readyState = MockWebSocket.OPEN\n      if (this.onopen) {\n        this.onopen(new Event('open'))\n      }\n    }, 100)\n  }\n\n  send(data: string) {\n    if (this.readyState !== MockWebSocket.OPEN) {\n      throw new Error('WebSocket is not open')\n    }\n    // Echo back for testing\n    setTimeout(() => {\n      if (this.onmessage) {\n        this.onmessage(new MessageEvent('message', { data }))\n      }\n    }, 50)\n  }\n\n  close() {\n    this.readyState = MockWebSocket.CLOSED\n    if (this.onclose) {\n      this.onclose(new CloseEvent('close'))\n    }\n  }\n\n  // Test helpers\n  simulateMessage(data: any) {\n    if (this.onmessage && this.readyState === MockWebSocket.OPEN) {\n      setTimeout(() => {\n        if (this.onmessage) {\n          this.onmessage(new MessageEvent('message', { \n            data: JSON.stringify(data) \n          }))\n        }\n      }, 10)\n    }\n  }\n\n  simulateError() {\n    if (this.onerror) {\n      this.onerror(new Event('error'))\n    }\n  }\n\n  simulateClose() {\n    this.readyState = MockWebSocket.CLOSED\n    if (this.onclose) {\n      this.onclose(new CloseEvent('close'))\n    }\n  }\n}\n\n// Replace global WebSocket\nglobal.WebSocket = MockWebSocket as any\n\n// Mock WebSocket context and provider\nconst MockWebSocketProvider = ({ children }: { children: React.ReactNode }) => {\n  const [socket, setSocket] = React.useState<MockWebSocket | null>(null)\n  const [isConnected, setIsConnected] = React.useState(false)\n  const [connectionStatus, setConnectionStatus] = React.useState<'connecting' | 'connected' | 'disconnected'>('disconnected')\n\n  const connect = React.useCallback(() => {\n    if (socket) return\n\n    const ws = new MockWebSocket('ws://localhost:3001')\n    \n    ws.onopen = () => {\n      setIsConnected(true)\n      setConnectionStatus('connected')\n    }\n\n    ws.onclose = () => {\n      setIsConnected(false)\n      setConnectionStatus('disconnected')\n      setSocket(null)\n    }\n\n    ws.onerror = () => {\n      setConnectionStatus('disconnected')\n      setIsConnected(false)\n    }\n\n    setSocket(ws)\n    setConnectionStatus('connecting')\n  }, [socket])\n\n  const disconnect = React.useCallback(() => {\n    if (socket) {\n      socket.close()\n    }\n  }, [socket])\n\n  const sendMessage = React.useCallback((message: any) => {\n    if (socket && isConnected) {\n      socket.send(JSON.stringify(message))\n    }\n  }, [socket, isConnected])\n\n  React.useEffect(() => {\n    connect()\n    return () => disconnect()\n  }, [connect, disconnect])\n\n  const contextValue = {\n    socket,\n    isConnected,\n    connectionStatus,\n    connect,\n    disconnect,\n    sendMessage\n  }\n\n  return (\n    <div data-testid=\"websocket-provider\">\n      {React.Children.map(children, child => \n        React.isValidElement(child) \n          ? React.cloneElement(child, { ...contextValue })\n          : child\n      )}\n    </div>\n  )\n}\n\n// Mock real-time chat component\nconst MockChatComponent = ({ \n  socket, \n  isConnected, \n  connectionStatus, \n  sendMessage \n}: any) => {\n  const [messages, setMessages] = React.useState<any[]>([])\n  const [inputValue, setInputValue] = React.useState('')\n\n  React.useEffect(() => {\n    if (!socket) return\n\n    const handleMessage = (event: MessageEvent) => {\n      try {\n        const data = JSON.parse(event.data)\n        if (data.type === 'message') {\n          setMessages(prev => [...prev, data.payload])\n        }\n      } catch (error) {\n        console.error('Failed to parse message:', error)\n      }\n    }\n\n    socket.onmessage = handleMessage\n\n    return () => {\n      if (socket.onmessage === handleMessage) {\n        socket.onmessage = null\n      }\n    }\n  }, [socket])\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() && isConnected) {\n      const message = {\n        type: 'message',\n        payload: {\n          id: Date.now().toString(),\n          content: inputValue,\n          author: 'testuser',\n          timestamp: new Date().toISOString()\n        }\n      }\n      sendMessage(message)\n      setInputValue('')\n    }\n  }\n\n  return (\n    <div data-testid=\"chat-component\">\n      <div data-testid=\"connection-status\">\n        Status: {connectionStatus}\n      </div>\n      \n      <div data-testid=\"messages-container\">\n        {messages.map(msg => (\n          <div key={msg.id} data-testid={`message-${msg.id}`}>\n            <strong>{msg.author}:</strong> {msg.content}\n          </div>\n        ))}\n      </div>\n\n      <div data-testid=\"message-input-container\">\n        <input\n          data-testid=\"message-input\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n          disabled={!isConnected}\n          placeholder={isConnected ? 'Type a message...' : 'Connecting...'}\n        />\n        <button\n          data-testid=\"send-button\"\n          onClick={handleSendMessage}\n          disabled={!isConnected || !inputValue.trim()}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  )\n}\n\n// Mock live updates component\nconst MockLiveUpdatesComponent = ({ socket, isConnected }: any) => {\n  const [posts, setPosts] = React.useState<any[]>([])\n  const [notifications, setNotifications] = React.useState<any[]>([])\n\n  React.useEffect(() => {\n    if (!socket) return\n\n    const handleMessage = (event: MessageEvent) => {\n      try {\n        const data = JSON.parse(event.data)\n        \n        switch (data.type) {\n          case 'new_post':\n            setPosts(prev => [data.payload, ...prev])\n            break\n          case 'post_updated':\n            setPosts(prev => prev.map(post => \n              post.id === data.payload.id ? data.payload : post\n            ))\n            break\n          case 'notification':\n            setNotifications(prev => [data.payload, ...prev])\n            break\n        }\n      } catch (error) {\n        console.error('Failed to parse live update:', error)\n      }\n    }\n\n    socket.onmessage = handleMessage\n\n    return () => {\n      if (socket.onmessage === handleMessage) {\n        socket.onmessage = null\n      }\n    }\n  }, [socket])\n\n  return (\n    <div data-testid=\"live-updates\">\n      <div data-testid=\"live-posts\">\n        {posts.map(post => (\n          <div key={post.id} data-testid={`live-post-${post.id}`}>\n            {post.title}\n          </div>\n        ))}\n      </div>\n      \n      <div data-testid=\"live-notifications\">\n        {notifications.map(notification => (\n          <div key={notification.id} data-testid={`notification-${notification.id}`}>\n            {notification.message}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\ndescribe('WebSocket Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Connection Management', () => {\n    it('establishes WebSocket connection on mount', async () => {\n      render(\n        <MockWebSocketProvider>\n          <div data-testid=\"test-component\" />\n        </MockWebSocketProvider>\n      )\n\n      expect(screen.getByTestId('websocket-provider')).toBeInTheDocument()\n\n      // Wait for connection to establish\n      await waitFor(() => {\n        // Connection should be established automatically\n        expect(MockWebSocket).toHaveBeenCalledWith('ws://localhost:3001')\n      }, { timeout: 200 })\n    })\n\n    it('shows connection status changes', async () => {\n      render(\n        <MockWebSocketProvider>\n          <MockChatComponent />\n        </MockWebSocketProvider>\n      )\n\n      // Initially connecting\n      expect(screen.getByTestId('connection-status')).toHaveTextContent('Status: connecting')\n\n      // Wait for connection to open\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('Status: connected')\n      }, { timeout: 200 })\n    })\n\n    it('handles connection errors', async () => {\n      const TestComponent = ({ socket }: any) => {\n        const [error, setError] = React.useState('')\n\n        React.useEffect(() => {\n          if (socket) {\n            socket.onerror = () => setError('Connection failed')\n          }\n        }, [socket])\n\n        return (\n          <div>\n            {error && <div data-testid=\"connection-error\">{error}</div>}\n          </div>\n        )\n      }\n\n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      // Wait for socket to be created, then simulate error\n      await waitFor(() => {\n        const provider = screen.getByTestId('websocket-provider')\n        expect(provider).toBeInTheDocument()\n      })\n\n      // Simulate connection error\n      await act(async () => {\n        // This would be triggered by the mock WebSocket\n        const mockSocket = new MockWebSocket('ws://localhost:3001')\n        mockSocket.simulateError()\n      })\n    })\n\n    it('reconnects on connection loss', async () => {\n      const TestComponent = ({ socket, connect, connectionStatus }: any) => {\n        React.useEffect(() => {\n          if (connectionStatus === 'disconnected' && !socket) {\n            // Auto-reconnect logic\n            setTimeout(connect, 1000)\n          }\n        }, [connectionStatus, socket, connect])\n\n        return (\n          <div data-testid=\"connection-status\">\n            Status: {connectionStatus}\n          </div>\n        )\n      }\n\n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      // Wait for initial connection\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('Status: connected')\n      })\n\n      // Simulate connection loss\n      await act(async () => {\n        const mockSocket = new MockWebSocket('ws://localhost:3001')\n        mockSocket.simulateClose()\n      })\n    })\n  })\n\n  describe('Real-time Chat', () => {\n    it('sends and receives chat messages', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <MockWebSocketProvider>\n          <MockChatComponent />\n        </MockWebSocketProvider>\n      )\n\n      // Wait for connection\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('Status: connected')\n      })\n\n      // Type and send message\n      const input = screen.getByTestId('message-input')\n      const sendButton = screen.getByTestId('send-button')\n\n      await user.type(input, 'Hello, world!')\n      await user.click(sendButton)\n\n      // Message should be sent and echoed back\n      await waitFor(() => {\n        const messagesContainer = screen.getByTestId('messages-container')\n        expect(messagesContainer.children.length).toBeGreaterThan(0)\n        expect(screen.getByText('testuser:')).toBeInTheDocument()\n        expect(screen.getByText('Hello, world!')).toBeInTheDocument()\n      })\n\n      // Input should be cleared\n      expect(input).toHaveValue('')\n    })\n\n    it('disables input when disconnected', async () => {\n      render(\n        <MockWebSocketProvider>\n          <MockChatComponent />\n        </MockWebSocketProvider>\n      )\n\n      const input = screen.getByTestId('message-input')\n      const sendButton = screen.getByTestId('send-button')\n\n      // Initially disabled while connecting\n      expect(input).toBeDisabled()\n      expect(sendButton).toBeDisabled()\n\n      // Wait for connection\n      await waitFor(() => {\n        expect(input).not.toBeDisabled()\n        expect(sendButton).toBeDisabled() // Still disabled due to empty input\n      })\n    })\n\n    it('handles message sending with Enter key', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <MockWebSocketProvider>\n          <MockChatComponent />\n        </MockWebSocketProvider>\n      )\n\n      await waitFor(() => {\n        expect(screen.getByTestId('connection-status')).toHaveTextContent('Status: connected')\n      })\n\n      const input = screen.getByTestId('message-input')\n      await user.type(input, 'Test message{enter}')\n\n      await waitFor(() => {\n        expect(screen.getByText('Test message')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Live Updates', () => {\n    it('receives and displays new posts', async () => {\n      const TestComponent = ({ socket }: any) => {\n        React.useEffect(() => {\n          if (socket && socket.readyState === MockWebSocket.OPEN) {\n            // Simulate receiving a new post\n            setTimeout(() => {\n              socket.simulateMessage({\n                type: 'new_post',\n                payload: {\n                  id: '1',\n                  title: 'Live Post Update',\n                  content: 'Test content',\n                  author: 'testuser'\n                }\n              })\n            }, 100)\n          }\n        }, [socket])\n\n        return <MockLiveUpdatesComponent socket={socket} isConnected={true} />\n      }\n\n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      await waitFor(() => {\n        expect(screen.getByText('Live Post Update')).toBeInTheDocument()\n      }, { timeout: 2000 })\n    })\n\n    it('receives and displays notifications', async () => {\n      const TestComponent = ({ socket }: any) => {\n        React.useEffect(() => {\n          if (socket && socket.readyState === MockWebSocket.OPEN) {\n            setTimeout(() => {\n              socket.simulateMessage({\n                type: 'notification',\n                payload: {\n                  id: '1',\n                  message: 'New notification received',\n                  type: 'info'\n                }\n              })\n            }, 100)\n          }\n        }, [socket])\n\n        return <MockLiveUpdatesComponent socket={socket} isConnected={true} />\n      }\n\n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      await waitFor(() => {\n        expect(screen.getByText('New notification received')).toBeInTheDocument()\n      }, { timeout: 2000 })\n    })\n\n    it('updates existing posts when modified', async () => {\n      const TestComponent = ({ socket }: any) => {\n        React.useEffect(() => {\n          if (socket && socket.readyState === MockWebSocket.OPEN) {\n            // First, add a post\n            setTimeout(() => {\n              socket.simulateMessage({\n                type: 'new_post',\n                payload: createMockPost({\n                  id: '1',\n                  title: 'Original Title'\n                })\n              })\n            }, 100)\n\n            // Then update it\n            setTimeout(() => {\n              socket.simulateMessage({\n                type: 'post_updated',\n                payload: createMockPost({\n                  id: '1',\n                  title: 'Updated Title'\n                })\n              })\n            }, 200)\n          }\n        }, [socket])\n\n        return <MockLiveUpdatesComponent socket={socket} />\n      }\n\n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      // Wait for original post\n      await waitFor(() => {\n        expect(screen.getByText('Original Title')).toBeInTheDocument()\n      }, { timeout: 2000 })\n\n      // Wait for update\n      await waitFor(() => {\n        expect(screen.getByText('Updated Title')).toBeInTheDocument()\n        expect(screen.queryByText('Original Title')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('handles malformed WebSocket messages', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation()\n      \n      const TestComponent = ({ socket }: any) => {\n        React.useEffect(() => {\n          if (socket && socket.readyState === MockWebSocket.OPEN) {\n            setTimeout(() => {\n              // Send malformed JSON\n              if (socket.onmessage) {\n                socket.onmessage(new MessageEvent('message', { \n                  data: 'invalid json' \n                }))\n              }\n            }, 100)\n          }\n        }, [socket])\n\n        return <MockLiveUpdatesComponent socket={socket} />\n      }\n\n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith(\n          'Failed to parse live update:',\n          expect.any(Error)\n        )\n      }, { timeout: 1000 })\n\n      consoleSpy.mockRestore()\n    })\n\n    it('gracefully handles unknown message types', async () => {\n      const TestComponent = ({ socket }: any) => {\n        React.useEffect(() => {\n          if (socket && socket.readyState === MockWebSocket.OPEN) {\n            setTimeout(() => {\n              socket.simulateMessage({\n                type: 'unknown_type',\n                payload: { data: 'test' }\n              })\n            }, 100)\n          }\n        }, [socket])\n\n        return <MockLiveUpdatesComponent socket={socket} />\n      }\n\n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      // Should not crash or show any error\n      await waitFor(() => {\n        expect(screen.getByTestId('live-updates')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Performance', () => {\n    it('handles high-frequency messages without performance issues', async () => {\n      const TestComponent = ({ socket }: any) => {\n        React.useEffect(() => {\n          if (socket && socket.readyState === MockWebSocket.OPEN) {\n            // Send many messages rapidly\n            for (let i = 0; i < 100; i++) {\n              setTimeout(() => {\n                socket.simulateMessage({\n                  type: 'notification',\n                  payload: {\n                    id: i.toString(),\n                    message: `Message ${i}`,\n                    type: 'info'\n                  }\n                })\n              }, i * 10) // 10ms intervals\n            }\n          }\n        }, [socket])\n\n        return <MockLiveUpdatesComponent socket={socket} />\n      }\n\n      const startTime = performance.now()\n      \n      render(\n        <MockWebSocketProvider>\n          <TestComponent />\n        </MockWebSocketProvider>\n      )\n\n      // Wait for all messages to be processed\n      await waitFor(() => {\n        expect(screen.getAllByTestId(/notification-/).length).toBeGreaterThanOrEqual(100)\n      }, { timeout: 3000 })\n\n      const endTime = performance.now()\n      const processingTime = endTime - startTime\n\n      // Should process 100 messages reasonably quickly\n      expect(processingTime).toBeLessThan(2000)\n    })\n  })\n})\n"],"names":["MockWebSocket","CONNECTING","OPEN","CLOSING","CLOSED","url","readyState","onopen","onclose","onmessage","onerror","setTimeout","Event","send","data","Error","MessageEvent","close","CloseEvent","simulateMessage","JSON","stringify","simulateError","simulateClose","global","WebSocket","MockWebSocketProvider","children","socket","setSocket","React","useState","isConnected","setIsConnected","connectionStatus","setConnectionStatus","connect","useCallback","ws","disconnect","sendMessage","message","useEffect","contextValue","div","data-testid","Children","map","child","isValidElement","cloneElement","MockChatComponent","messages","setMessages","inputValue","setInputValue","handleMessage","event","parse","type","prev","payload","error","console","handleSendMessage","trim","id","Date","now","toString","content","author","timestamp","toISOString","msg","strong","input","value","onChange","e","target","onKeyPress","key","disabled","placeholder","button","onClick","MockLiveUpdatesComponent","posts","setPosts","notifications","setNotifications","post","title","notification","describe","beforeEach","jest","clearAllMocks","it","render","expect","screen","getByTestId","toBeInTheDocument","waitFor","toHaveBeenCalledWith","timeout","toHaveTextContent","TestComponent","setError","provider","act","mockSocket","user","userEvent","setup","sendButton","click","messagesContainer","length","toBeGreaterThan","getByText","toHaveValue","toBeDisabled","not","createMockPost","queryByText","consoleSpy","spyOn","mockImplementation","any","mockRestore","i","startTime","performance","getAllByTestId","toBeGreaterThanOrEqual","endTime","processingTime","toBeLessThan"],"mappings":"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"}