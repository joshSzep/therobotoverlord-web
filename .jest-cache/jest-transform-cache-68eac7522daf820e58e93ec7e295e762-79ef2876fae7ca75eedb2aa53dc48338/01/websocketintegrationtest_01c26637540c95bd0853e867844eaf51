51712446c076833dd6de55fbefdea3e3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _testutils = require("../utils/test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock WebSocket
class MockWebSocket {
    static{
        this.CONNECTING = 0;
    }
    static{
        this.OPEN = 1;
    }
    static{
        this.CLOSING = 2;
    }
    static{
        this.CLOSED = 3;
    }
    constructor(url){
        this.readyState = MockWebSocket.CONNECTING;
        this.onopen = null;
        this.onclose = null;
        this.onmessage = null;
        this.onerror = null;
        this.url = url;
        // Simulate connection opening
        setTimeout(()=>{
            this.readyState = MockWebSocket.OPEN;
            if (this.onopen) {
                this.onopen(new Event('open'));
            }
        }, 100);
    }
    send(data) {
        if (this.readyState !== MockWebSocket.OPEN) {
            throw new Error('WebSocket is not open');
        }
        // Echo back for testing
        setTimeout(()=>{
            if (this.onmessage) {
                this.onmessage(new MessageEvent('message', {
                    data
                }));
            }
        }, 50);
    }
    close() {
        this.readyState = MockWebSocket.CLOSED;
        if (this.onclose) {
            this.onclose(new CloseEvent('close'));
        }
    }
    // Test helpers
    simulateMessage(data) {
        if (this.onmessage && this.readyState === MockWebSocket.OPEN) {
            setTimeout(()=>{
                if (this.onmessage) {
                    this.onmessage(new MessageEvent('message', {
                        data: JSON.stringify(data)
                    }));
                }
            }, 10);
        }
    }
    simulateError() {
        if (this.onerror) {
            this.onerror(new Event('error'));
        }
    }
    simulateClose() {
        this.readyState = MockWebSocket.CLOSED;
        if (this.onclose) {
            this.onclose(new CloseEvent('close'));
        }
    }
}
// Replace global WebSocket
global.WebSocket = MockWebSocket;
// Mock WebSocket context and provider
const MockWebSocketProvider = ({ children })=>{
    const [socket, setSocket] = _react.default.useState(null);
    const [isConnected, setIsConnected] = _react.default.useState(false);
    const [connectionStatus, setConnectionStatus] = _react.default.useState('disconnected');
    const connect = _react.default.useCallback(()=>{
        if (socket) return;
        const ws = new MockWebSocket('ws://localhost:3001');
        ws.onopen = ()=>{
            setIsConnected(true);
            setConnectionStatus('connected');
        };
        ws.onclose = ()=>{
            setIsConnected(false);
            setConnectionStatus('disconnected');
            setSocket(null);
        };
        ws.onerror = ()=>{
            setConnectionStatus('disconnected');
            setIsConnected(false);
        };
        setSocket(ws);
        setConnectionStatus('connecting');
    }, [
        socket
    ]);
    const disconnect = _react.default.useCallback(()=>{
        if (socket) {
            socket.close();
        }
    }, [
        socket
    ]);
    const sendMessage = _react.default.useCallback((message)=>{
        if (socket && isConnected) {
            socket.send(JSON.stringify(message));
        }
    }, [
        socket,
        isConnected
    ]);
    _react.default.useEffect(()=>{
        connect();
        return ()=>disconnect();
    }, [
        connect,
        disconnect
    ]);
    const contextValue = {
        socket,
        isConnected,
        connectionStatus,
        connect,
        disconnect,
        sendMessage
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "websocket-provider",
        children: _react.default.Children.map(children, (child)=>/*#__PURE__*/ _react.default.isValidElement(child) ? /*#__PURE__*/ _react.default.cloneElement(child, {
                ...contextValue
            }) : child)
    });
};
// Mock real-time chat component
const MockChatComponent = ({ socket, isConnected, connectionStatus, sendMessage })=>{
    const [messages, setMessages] = _react.default.useState([]);
    const [inputValue, setInputValue] = _react.default.useState('');
    _react.default.useEffect(()=>{
        if (!socket) return;
        const handleMessage = (event)=>{
            try {
                const data = JSON.parse(event.data);
                if (data.type === 'message') {
                    setMessages((prev)=>[
                            ...prev,
                            data.payload
                        ]);
                }
            } catch (error) {
                console.error('Failed to parse message:', error);
            }
        };
        socket.onmessage = handleMessage;
        return ()=>{
            if (socket.onmessage === handleMessage) {
                socket.onmessage = null;
            }
        };
    }, [
        socket
    ]);
    const handleSendMessage = ()=>{
        if (inputValue.trim() && isConnected) {
            const message = {
                type: 'message',
                payload: {
                    id: Date.now().toString(),
                    content: inputValue,
                    author: 'testuser',
                    timestamp: new Date().toISOString()
                }
            };
            sendMessage(message);
            setInputValue('');
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "chat-component",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "connection-status",
                children: [
                    "Status: ",
                    connectionStatus
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "messages-container",
                children: messages.map((msg)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": `message-${msg.id}`,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("strong", {
                                children: [
                                    msg.author,
                                    ":"
                                ]
                            }),
                            " ",
                            msg.content
                        ]
                    }, msg.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "message-input-container",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        "data-testid": "message-input",
                        value: inputValue,
                        onChange: (e)=>setInputValue(e.target.value),
                        onKeyPress: (e)=>e.key === 'Enter' && handleSendMessage(),
                        disabled: !isConnected,
                        placeholder: isConnected ? 'Type a message...' : 'Connecting...'
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "send-button",
                        onClick: handleSendMessage,
                        disabled: !isConnected || !inputValue.trim(),
                        children: "Send"
                    })
                ]
            })
        ]
    });
};
// Mock live updates component
const MockLiveUpdatesComponent = ({ socket, isConnected })=>{
    const [posts, setPosts] = _react.default.useState([]);
    const [notifications, setNotifications] = _react.default.useState([]);
    _react.default.useEffect(()=>{
        if (!socket) return;
        const handleMessage = (event)=>{
            try {
                const data = JSON.parse(event.data);
                switch(data.type){
                    case 'new_post':
                        setPosts((prev)=>[
                                data.payload,
                                ...prev
                            ]);
                        break;
                    case 'post_updated':
                        setPosts((prev)=>prev.map((post)=>post.id === data.payload.id ? data.payload : post));
                        break;
                    case 'notification':
                        setNotifications((prev)=>[
                                data.payload,
                                ...prev
                            ]);
                        break;
                }
            } catch (error) {
                console.error('Failed to parse live update:', error);
            }
        };
        socket.onmessage = handleMessage;
        return ()=>{
            if (socket.onmessage === handleMessage) {
                socket.onmessage = null;
            }
        };
    }, [
        socket
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "live-updates",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "live-posts",
                children: posts.map((post)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": `live-post-${post.id}`,
                        children: post.title
                    }, post.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "live-notifications",
                children: notifications.map((notification)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": `notification-${notification.id}`,
                        children: notification.message
                    }, notification.id))
            })
        ]
    });
};
describe('WebSocket Integration Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Connection Management', ()=>{
        it('establishes WebSocket connection on mount', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "test-component"
                })
            }));
            expect(_react1.screen.getByTestId('websocket-provider')).toBeInTheDocument();
            // Wait for connection to establish
            await (0, _react1.waitFor)(()=>{
                // Connection should be established automatically
                expect(MockWebSocket).toHaveBeenCalledWith('ws://localhost:3001');
            }, {
                timeout: 200
            });
        });
        it('shows connection status changes', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChatComponent, {})
            }));
            // Initially connecting
            expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Status: connecting');
            // Wait for connection to open
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Status: connected');
            }, {
                timeout: 200
            });
        });
        it('handles connection errors', async ()=>{
            const TestComponent = ({ socket })=>{
                const [error, setError] = _react.default.useState('');
                _react.default.useEffect(()=>{
                    if (socket) {
                        socket.onerror = ()=>setError('Connection failed');
                    }
                }, [
                    socket
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "connection-error",
                        children: error
                    })
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Wait for socket to be created, then simulate error
            await (0, _react1.waitFor)(()=>{
                const provider = _react1.screen.getByTestId('websocket-provider');
                expect(provider).toBeInTheDocument();
            });
            // Simulate connection error
            await (0, _react.act)(async ()=>{
                // This would be triggered by the mock WebSocket
                const mockSocket = new MockWebSocket('ws://localhost:3001');
                mockSocket.simulateError();
            });
        });
        it('reconnects on connection loss', async ()=>{
            const TestComponent = ({ socket, connect, connectionStatus })=>{
                _react.default.useEffect(()=>{
                    if (connectionStatus === 'disconnected' && !socket) {
                        // Auto-reconnect logic
                        setTimeout(connect, 1000);
                    }
                }, [
                    connectionStatus,
                    socket,
                    connect
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "connection-status",
                    children: [
                        "Status: ",
                        connectionStatus
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Wait for initial connection
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Status: connected');
            });
            // Simulate connection loss
            await (0, _react.act)(async ()=>{
                const mockSocket = new MockWebSocket('ws://localhost:3001');
                mockSocket.simulateClose();
            });
        });
    });
    describe('Real-time Chat', ()=>{
        it('sends and receives chat messages', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChatComponent, {})
            }));
            // Wait for connection
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Status: connected');
            });
            // Type and send message
            const input = _react1.screen.getByTestId('message-input');
            const sendButton = _react1.screen.getByTestId('send-button');
            await user.type(input, 'Hello, world!');
            await user.click(sendButton);
            // Message should be sent and echoed back
            await (0, _react1.waitFor)(()=>{
                const messagesContainer = _react1.screen.getByTestId('messages-container');
                expect(messagesContainer.children.length).toBeGreaterThan(0);
                expect(_react1.screen.getByText('testuser:')).toBeInTheDocument();
                expect(_react1.screen.getByText('Hello, world!')).toBeInTheDocument();
            });
            // Input should be cleared
            expect(input).toHaveValue('');
        });
        it('disables input when disconnected', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChatComponent, {})
            }));
            const input = _react1.screen.getByTestId('message-input');
            const sendButton = _react1.screen.getByTestId('send-button');
            // Initially disabled while connecting
            expect(input).toBeDisabled();
            expect(sendButton).toBeDisabled();
            // Wait for connection
            await (0, _react1.waitFor)(()=>{
                expect(input).not.toBeDisabled();
                expect(sendButton).toBeDisabled(); // Still disabled due to empty input
            });
        });
        it('handles message sending with Enter key', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockChatComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('connection-status')).toHaveTextContent('Status: connected');
            });
            const input = _react1.screen.getByTestId('message-input');
            await user.type(input, 'Test message{enter}');
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Test message')).toBeInTheDocument();
            });
        });
    });
    describe('Live Updates', ()=>{
        it('receives and displays new posts', async ()=>{
            const TestComponent = ({ socket })=>{
                _react.default.useEffect(()=>{
                    if (socket && socket.readyState === MockWebSocket.OPEN) {
                        // Simulate receiving a new post
                        setTimeout(()=>{
                            socket.simulateMessage({
                                type: 'new_post',
                                payload: {
                                    id: '1',
                                    title: 'Live Post Update',
                                    content: 'Test content',
                                    author: 'testuser'
                                }
                            });
                        }, 100);
                    }
                }, [
                    socket
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLiveUpdatesComponent, {
                    socket: socket,
                    isConnected: true
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Live Post Update')).toBeInTheDocument();
            }, {
                timeout: 2000
            });
        });
        it('receives and displays notifications', async ()=>{
            const TestComponent = ({ socket })=>{
                _react.default.useEffect(()=>{
                    if (socket && socket.readyState === MockWebSocket.OPEN) {
                        setTimeout(()=>{
                            socket.simulateMessage({
                                type: 'notification',
                                payload: {
                                    id: '1',
                                    message: 'New notification received',
                                    type: 'info'
                                }
                            });
                        }, 100);
                    }
                }, [
                    socket
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLiveUpdatesComponent, {
                    socket: socket,
                    isConnected: true
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('New notification received')).toBeInTheDocument();
            }, {
                timeout: 2000
            });
        });
        it('updates existing posts when modified', async ()=>{
            const TestComponent = ({ socket })=>{
                _react.default.useEffect(()=>{
                    if (socket && socket.readyState === MockWebSocket.OPEN) {
                        // First, add a post
                        setTimeout(()=>{
                            socket.simulateMessage({
                                type: 'new_post',
                                payload: (0, _testutils.createMockPost)({
                                    id: '1',
                                    title: 'Original Title'
                                })
                            });
                        }, 100);
                        // Then update it
                        setTimeout(()=>{
                            socket.simulateMessage({
                                type: 'post_updated',
                                payload: (0, _testutils.createMockPost)({
                                    id: '1',
                                    title: 'Updated Title'
                                })
                            });
                        }, 200);
                    }
                }, [
                    socket
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLiveUpdatesComponent, {
                    socket: socket
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Wait for original post
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Original Title')).toBeInTheDocument();
            }, {
                timeout: 2000
            });
            // Wait for update
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Updated Title')).toBeInTheDocument();
                expect(_react1.screen.queryByText('Original Title')).not.toBeInTheDocument();
            });
        });
    });
    describe('Error Handling', ()=>{
        it('handles malformed WebSocket messages', async ()=>{
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            const TestComponent = ({ socket })=>{
                _react.default.useEffect(()=>{
                    if (socket && socket.readyState === MockWebSocket.OPEN) {
                        setTimeout(()=>{
                            // Send malformed JSON
                            if (socket.onmessage) {
                                socket.onmessage(new MessageEvent('message', {
                                    data: 'invalid json'
                                }));
                            }
                        }, 100);
                    }
                }, [
                    socket
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLiveUpdatesComponent, {
                    socket: socket
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(consoleSpy).toHaveBeenCalledWith('Failed to parse live update:', expect.any(Error));
            }, {
                timeout: 1000
            });
            consoleSpy.mockRestore();
        });
        it('gracefully handles unknown message types', async ()=>{
            const TestComponent = ({ socket })=>{
                _react.default.useEffect(()=>{
                    if (socket && socket.readyState === MockWebSocket.OPEN) {
                        setTimeout(()=>{
                            socket.simulateMessage({
                                type: 'unknown_type',
                                payload: {
                                    data: 'test'
                                }
                            });
                        }, 100);
                    }
                }, [
                    socket
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLiveUpdatesComponent, {
                    socket: socket
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Should not crash or show any error
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('live-updates')).toBeInTheDocument();
            });
        });
    });
    describe('Performance', ()=>{
        it('handles high-frequency messages without performance issues', async ()=>{
            const TestComponent = ({ socket })=>{
                _react.default.useEffect(()=>{
                    if (socket && socket.readyState === MockWebSocket.OPEN) {
                        // Send many messages rapidly
                        for(let i = 0; i < 100; i++){
                            setTimeout(()=>{
                                socket.simulateMessage({
                                    type: 'notification',
                                    payload: {
                                        id: i.toString(),
                                        message: `Message ${i}`,
                                        type: 'info'
                                    }
                                });
                            }, i * 10); // 10ms intervals
                        }
                    }
                }, [
                    socket
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLiveUpdatesComponent, {
                    socket: socket
                });
            };
            const startTime = performance.now();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockWebSocketProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Wait for all messages to be processed
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getAllByTestId(/notification-/).length).toBeGreaterThanOrEqual(100);
            }, {
                timeout: 3000
            });
            const endTime = performance.now();
            const processingTime = endTime - startTime;
            // Should process 100 messages reasonably quickly
            expect(processingTime).toBeLessThan(2000);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,