{"version":3,"names":["cov_qihvpsf8s","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/badges.ts"],"sourcesContent":["/**\n * Badge type definitions for The Robot Overlord\n * Based on backend API schema\n */\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'achievement' | 'participation' | 'moderation' | 'loyalty' | 'special' | 'seasonal' | 'milestone';\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n  requirements: Array<{\n    type: 'posts_created' | 'upvotes_received' | 'topics_created' | 'days_active' | 'loyalty_score' | 'moderation_actions' | 'special_event' | 'streak_days';\n    target: number;\n    timeframe?: 'day' | 'week' | 'month' | 'year' | 'all';\n    description: string;\n    metadata?: Record<string, any>;\n  }>;\n  rewards: {\n    loyaltyPoints: number;\n    reputationPoints?: number;\n    title?: string;\n    privileges?: string[];\n    unlocks?: string[];\n  };\n  isActive: boolean;\n  isSecret: boolean;\n  sortOrder: number;\n  totalAwarded: number;\n  conditions?: {\n    excludeRoles?: string[];\n    requireRoles?: string[];\n    minAccountAge?: number;\n    maxPerUser?: number;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface UserBadge {\n  id: string;\n  userId: string;\n  badgeId: string;\n  badge: Badge;\n  awardedAt: string;\n  awardedBy?: string;\n  awardedByUser?: {\n    id: string;\n    username: string;\n    role: string;\n  };\n  reason?: string;\n  isVisible: boolean;\n  metadata?: Record<string, any>;\n}\n\nexport interface BadgeProgress {\n  badgeId: string;\n  badge: Badge;\n  progress: Array<{\n    requirement: Badge['requirements'][0];\n    current: number;\n    target: number;\n    percentage: number;\n    completed: boolean;\n    estimatedCompletion?: string;\n  }>;\n  overallProgress: number;\n  isEligible: boolean;\n  isAwarded: boolean;\n  awardedAt?: string;\n  nextMilestone?: {\n    requirement: string;\n    needed: number;\n    estimatedTime?: string;\n  };\n}\n\nexport interface BadgeFilters {\n  category?: Badge['category'];\n  rarity?: Badge['rarity'];\n  isActive?: boolean;\n  isSecret?: boolean;\n  search?: string;\n  sortBy?: 'name' | 'rarity' | 'awarded' | 'created' | 'category' | 'difficulty';\n  awardedToUser?: string;\n  notAwardedToUser?: string;\n  minAwarded?: number;\n  maxAwarded?: number;\n  page?: number;\n  limit?: number;\n}\n\nexport interface CreateBadgeRequest {\n  name: string;\n  description: string;\n  icon: string;\n  category: Badge['category'];\n  rarity: Badge['rarity'];\n  requirements: Badge['requirements'];\n  rewards: Badge['rewards'];\n  isSecret?: boolean;\n  sortOrder?: number;\n  conditions?: Badge['conditions'];\n}\n\nexport interface UpdateBadgeRequest {\n  name?: string;\n  description?: string;\n  icon?: string;\n  category?: Badge['category'];\n  rarity?: Badge['rarity'];\n  requirements?: Badge['requirements'];\n  rewards?: Badge['rewards'];\n  isActive?: boolean;\n  isSecret?: boolean;\n  sortOrder?: number;\n  conditions?: Badge['conditions'];\n}\n\nexport interface BadgeAward {\n  id: string;\n  badgeId: string;\n  badge: Badge;\n  userId: string;\n  user: {\n    id: string;\n    username: string;\n    avatar?: string;\n    role: string;\n  };\n  awardedBy: string;\n  awardedByUser: {\n    id: string;\n    username: string;\n    role: string;\n  };\n  reason?: string;\n  isManual: boolean;\n  metadata?: Record<string, any>;\n  createdAt: string;\n}\n\nexport interface BadgeStatistics {\n  totalBadges: number;\n  totalAwarded: number;\n  totalUsers: number;\n  averageAwardsPerBadge: number;\n  averageBadgesPerUser: number;\n  categoryBreakdown: Record<string, {\n    count: number;\n    awarded: number;\n    percentage: number;\n  }>;\n  rarityBreakdown: Record<string, {\n    count: number;\n    awarded: number;\n    percentage: number;\n  }>;\n  mostAwardedBadge: {\n    badge: Badge;\n    count: number;\n  };\n  rarest: {\n    badge: Badge;\n    count: number;\n  };\n  recentActivity: Array<{\n    date: string;\n    awarded: number;\n    newBadges: number;\n  }>;\n  topCollectors: Array<{\n    user: {\n      id: string;\n      username: string;\n      avatar?: string;\n    };\n    badgeCount: number;\n    rarityScore: number;\n    latestBadge?: {\n      badge: Badge;\n      awardedAt: string;\n    };\n  }>;\n}\n\nexport interface BadgeLeaderboard {\n  entries: Array<{\n    rank: number;\n    user: {\n      id: string;\n      username: string;\n      avatar?: string;\n      loyaltyScore: number;\n      role: string;\n    };\n    badgeCount: number;\n    rarityScore: number;\n    categories: Record<string, number>;\n    latestBadge?: {\n      badge: Badge;\n      awardedAt: string;\n    };\n    streak?: {\n      current: number;\n      longest: number;\n    };\n  }>;\n  category?: string;\n  lastUpdated: string;\n}\n\nexport interface BadgeAuditLog {\n  id: string;\n  action: 'awarded' | 'revoked' | 'created' | 'updated' | 'deleted' | 'activated' | 'deactivated';\n  badgeId: string;\n  badge: Badge;\n  userId?: string;\n  user?: {\n    id: string;\n    username: string;\n  };\n  performedBy: string;\n  performer: {\n    id: string;\n    username: string;\n    role: string;\n  };\n  reason?: string;\n  previousData?: Record<string, any>;\n  newData?: Record<string, any>;\n  metadata?: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n  createdAt: string;\n}\n\nexport interface BadgeAnalytics {\n  badgeId?: string;\n  badge?: Badge;\n  totalBadges: number;\n  totalAwarded: number;\n  awardingTrends: Array<{\n    date: string;\n    awarded: number;\n    revoked?: number;\n  }>;\n  categoryDistribution: Record<string, number>;\n  rarityDistribution: Record<string, number>;\n  topPerformers: Array<{\n    user: {\n      id: string;\n      username: string;\n      avatar?: string;\n    };\n    badgeCount: number;\n    categories: Record<string, number>;\n  }>;\n  engagementMetrics: {\n    averageTimeToEarn: number;\n    completionRates: Record<string, number>;\n    abandonmentRate: number;\n  };\n  badgeSpecific?: {\n    awardedCount: number;\n    averageTimeToEarn: number;\n    completionRate: number;\n    requirementProgress: Array<{\n      requirement: string;\n      averageProgress: number;\n      completionRate: number;\n    }>;\n    userFeedback?: Array<{\n      rating: number;\n      comment?: string;\n      userId: string;\n    }>;\n  };\n}\n"],"mappings":"AAAA;;;GAGC;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,OAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,KAAA;MAAAC,QAAA;IAAA;IAAAC,eAAA;IAAArB,IAAA;EAAA;EAAA,IAAAsB,QAAA,GAAArB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAmB,QAAA,CAAAvB,IAAA,KAAAuB,QAAA,CAAAvB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAsB,QAAA,CAAAvB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAmB,cAAA,GAAAD,QAAA,CAAAvB,IAAA;EAAA","ignoreList":[]}