{"version":3,"names":["ProfileBadges","user","cov_2k39uod53r","f","badges","setBadges","s","_react","useState","isLoading","setIsLoading","error","setError","useEffect","fetchBadges","userBadges","_apiclient","apiClient","get","id","b","console","getRarityColor","rarity","getRarityIcon","_jsxruntime","jsxs","_Card","Card","jsx","CardHeader","CardTitle","CardContent","className","length","map","count","filter","badge","icon_url","src","alt","name","_Badge","Badge","description","Date","earned_at","toLocaleDateString"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/profile/ProfileBadges.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { User, Badge as BadgeType } from '@/types/user';\nimport { apiClient } from '@/lib/api-client';\n\ninterface ProfileBadgesProps {\n  user: User;\n}\n\nexport function ProfileBadges({ user }: ProfileBadgesProps) {\n  const [badges, setBadges] = useState<BadgeType[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchBadges = async () => {\n      try {\n        setIsLoading(true);\n        const userBadges = await apiClient.get<BadgeType[]>(`/users/${user.id}/badges`);\n        setBadges(userBadges || []);\n      } catch (error: any) {\n        console.error('Failed to fetch badges:', error);\n        setError('Failed to load badges');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchBadges();\n  }, [user.id]);\n\n  const getRarityColor = (rarity: BadgeType['rarity']) => {\n    switch (rarity) {\n      case 'legendary': return 'bg-gradient-to-r from-yellow-400 to-orange-500 text-white';\n      case 'epic': return 'bg-gradient-to-r from-purple-500 to-pink-500 text-white';\n      case 'rare': return 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white';\n      case 'common': return 'bg-muted text-light-text';\n      default: return 'bg-muted text-light-text';\n    }\n  };\n\n  const getRarityIcon = (rarity: BadgeType['rarity']) => {\n    switch (rarity) {\n      case 'legendary': return 'üëë';\n      case 'epic': return 'üíé';\n      case 'rare': return '‚≠ê';\n      case 'common': return 'üèÖ';\n      default: return 'üèÖ';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Badges & Achievements</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"w-6 h-6 border-2 border-overlord-red border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Badges & Achievements</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <p className=\"text-rejected-red text-sm\">{error}</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Badges & Achievements</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {badges.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"text-4xl mb-4\">üéñÔ∏è</div>\n            <p className=\"text-muted-light text-sm mb-2\">No badges earned yet</p>\n            <p className=\"text-xs text-muted-light\">\n              Complete tasks and contribute to earn recognition from the Robot Overlord.\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Badge Stats */}\n            <div className=\"grid grid-cols-4 gap-2 text-center\">\n              {['legendary', 'epic', 'rare', 'common'].map((rarity) => {\n                const count = badges.filter(b => b.rarity === rarity).length;\n                return (\n                  <div key={rarity} className=\"p-2 bg-muted/20 rounded\">\n                    <div className=\"text-lg\">{getRarityIcon(rarity as BadgeType['rarity'])}</div>\n                    <div className=\"text-sm font-medium text-light-text\">{count}</div>\n                    <div className=\"text-xs text-muted-light capitalize\">{rarity}</div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Badge Grid */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              {badges.map((badge) => (\n                <div\n                  key={badge.id}\n                  className=\"p-3 bg-muted/20 rounded-lg border hover:bg-muted/30 transition-colors\"\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"text-2xl flex-shrink-0\">\n                      {badge.icon_url ? (\n                        <img \n                          src={badge.icon_url} \n                          alt={badge.name}\n                          className=\"w-8 h-8\"\n                        />\n                      ) : (\n                        getRarityIcon(badge.rarity)\n                      )}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h4 className=\"font-medium text-light-text text-sm truncate\">\n                          {badge.name}\n                        </h4>\n                        <Badge className={`text-xs ${getRarityColor(badge.rarity)}`}>\n                          {badge.rarity}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-muted-light mb-2 line-clamp-2\">\n                        {badge.description}\n                      </p>\n                      <p className=\"text-xs text-muted-light\">\n                        Earned: {new Date(badge.earned_at).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Progress Hint */}\n            <div className=\"text-center pt-4 border-t border-muted/30\">\n              <p className=\"text-xs text-muted-light\">\n                Keep contributing to unlock more badges and climb the loyalty ranks!\n              </p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"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","ignoreList":[]}