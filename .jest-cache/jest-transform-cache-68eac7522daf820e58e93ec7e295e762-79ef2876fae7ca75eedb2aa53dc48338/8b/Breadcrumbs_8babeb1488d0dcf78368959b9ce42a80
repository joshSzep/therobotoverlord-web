df738a61df6e3c917d39e73b687cafea
/**
 * Breadcrumb navigation component for The Robot Overlord
 * Shows current page hierarchy and navigation path
 */'use client';
"use strict";

/* istanbul ignore next */
function cov_fhys8u7b9() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/navigation/Breadcrumbs.tsx";
  var hash = "1af85ebb28f43b9da2646c7251e4e1c2dfc94044";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/navigation/Breadcrumbs.tsx",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "1": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "2": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 13,
          column: 7
        }
      },
      "3": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "5": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 30
        }
      },
      "6": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 48
        }
      },
      "7": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 71
        }
      },
      "8": {
        start: {
          line: 25,
          column: 28
        },
        end: {
          line: 25,
          column: 74
        }
      },
      "9": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 46
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "11": {
        start: {
          line: 33,
          column: 21
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "12": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 74
        }
      },
      "13": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 20
        }
      },
      "15": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 81,
          column: 7
        }
      },
      "16": {
        start: {
          line: 44,
          column: 71
        },
        end: {
          line: 79,
          column: 25
        }
      },
      "17": {
        start: {
          line: 86,
          column: 25
        },
        end: {
          line: 86,
          column: 60
        }
      },
      "18": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "19": {
        start: {
          line: 94,
          column: 22
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "20": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 106,
          column: 7
        }
      },
      "21": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 37
        }
      },
      "22": {
        start: {
          line: 98,
          column: 22
        },
        end: {
          line: 98,
          column: 49
        }
      },
      "23": {
        start: {
          line: 100,
          column: 23
        },
        end: {
          line: 100,
          column: 56
        }
      },
      "24": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "25": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 23
        }
      },
      "26": {
        start: {
          line: 113,
          column: 26
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "27": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "28": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 38
        }
      },
      "29": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 138,
          column: 98
        }
      },
      "30": {
        start: {
          line: 138,
          column: 42
        },
        end: {
          line: 138,
          column: 86
        }
      },
      "31": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "32": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 162,
          column: 33
        }
      },
      "33": {
        start: {
          line: 165,
          column: 21
        },
        end: {
          line: 165,
          column: 51
        }
      },
      "34": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 166,
          column: 49
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 16
          }
        },
        loc: {
          start: {
            line: 9,
            column: 30
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 33
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 27
      },
      "4": {
        name: "Breadcrumbs",
        decl: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 32,
            column: 20
          }
        },
        loc: {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 44,
            column: 42
          },
          end: {
            line: 44,
            column: 43
          }
        },
        loc: {
          start: {
            line: 44,
            column: 71
          },
          end: {
            line: 79,
            column: 25
          }
        },
        line: 44
      },
      "6": {
        name: "generateBreadcrumbsFromPath",
        decl: {
          start: {
            line: 85,
            column: 13
          },
          end: {
            line: 85,
            column: 40
          }
        },
        loc: {
          start: {
            line: 85,
            column: 51
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 85
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 95,
            column: 25
          },
          end: {
            line: 95,
            column: 26
          }
        },
        loc: {
          start: {
            line: 95,
            column: 43
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 95
      },
      "8": {
        name: "formatSegmentLabel",
        decl: {
          start: {
            line: 111,
            column: 13
          },
          end: {
            line: 111,
            column: 31
          }
        },
        loc: {
          start: {
            line: 111,
            column: 41
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 111
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 138,
            column: 34
          },
          end: {
            line: 138,
            column: 35
          }
        },
        loc: {
          start: {
            line: 138,
            column: 42
          },
          end: {
            line: 138,
            column: 86
          }
        },
        line: 138
      },
      "10": {
        name: "getSegmentIcon",
        decl: {
          start: {
            line: 142,
            column: 13
          },
          end: {
            line: 142,
            column: 27
          }
        },
        loc: {
          start: {
            line: 142,
            column: 37
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 142
      },
      "11": {
        name: "useBreadcrumbs",
        decl: {
          start: {
            line: 164,
            column: 9
          },
          end: {
            line: 164,
            column: 23
          }
        },
        loc: {
          start: {
            line: 164,
            column: 26
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 164
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 28,
            column: 38
          }
        }, {
          start: {
            line: 28,
            column: 41
          },
          end: {
            line: 30,
            column: 5
          }
        }],
        line: 28
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 11
          },
          end: {
            line: 28,
            column: 14
          }
        }, {
          start: {
            line: 28,
            column: 18
          },
          end: {
            line: 28,
            column: 32
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 30
          },
          end: {
            line: 32,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 32,
            column: 42
          },
          end: {
            line: 32,
            column: 44
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 35,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 35,
            column: 33
          }
        }, {
          start: {
            line: 35,
            column: 37
          },
          end: {
            line: 35,
            column: 74
          }
        }],
        line: 35
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "5": {
        loc: {
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 57,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 33
          }
        }, {
          start: {
            line: 46,
            column: 51
          },
          end: {
            line: 57,
            column: 26
          }
        }],
        line: 46
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 24
          },
          end: {
            line: 77,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 88
          },
          end: {
            line: 68,
            column: 26
          }
        }, {
          start: {
            line: 68,
            column: 43
          },
          end: {
            line: 77,
            column: 26
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 58,
            column: 24
          },
          end: {
            line: 58,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 24
          },
          end: {
            line: 58,
            column: 33
          }
        }, {
          start: {
            line: 58,
            column: 37
          },
          end: {
            line: 58,
            column: 71
          }
        }],
        line: 58
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 65,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 62,
            column: 41
          }
        }, {
          start: {
            line: 62,
            column: 59
          },
          end: {
            line: 65,
            column: 34
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 71,
            column: 32
          },
          end: {
            line: 74,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 32
          },
          end: {
            line: 71,
            column: 41
          }
        }, {
          start: {
            line: 71,
            column: 59
          },
          end: {
            line: 74,
            column: 34
          }
        }],
        line: 71
      },
      "10": {
        loc: {
          start: {
            line: 103,
            column: 18
          },
          end: {
            line: 103,
            column: 50
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 27
          },
          end: {
            line: 103,
            column: 36
          }
        }, {
          start: {
            line: 103,
            column: 39
          },
          end: {
            line: 103,
            column: 50
          }
        }],
        line: 103
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/navigation/Breadcrumbs.tsx"],
      sourcesContent: ["/**\n * Breadcrumb navigation component for The Robot Overlord\n * Shows current page hierarchy and navigation path\n */\n\n'use client';\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n  icon?: string;\n}\n\ninterface BreadcrumbsProps {\n  items?: BreadcrumbItem[];\n  className?: string;\n}\n\nexport function Breadcrumbs({ items, className = '' }: BreadcrumbsProps) {\n  const pathname = usePathname();\n\n  // Auto-generate breadcrumbs from pathname if items not provided\n  const breadcrumbItems = items || generateBreadcrumbsFromPath(pathname);\n\n  if (breadcrumbItems.length <= 1) {\n    return null; // Don't show breadcrumbs for single-level pages\n  }\n\n  return (\n    <nav className={`flex items-center space-x-2 text-sm ${className}`} aria-label=\"Breadcrumb\">\n      <div className=\"flex items-center space-x-2\">\n        {breadcrumbItems.map((item, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && (\n              <svg\n                className=\"w-4 h-4 text-muted-light\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 5l7 7-7 7\"\n                />\n              </svg>\n            )}\n            \n            {item.href && index < breadcrumbItems.length - 1 ? (\n              <Link\n                href={item.href}\n                className=\"flex items-center text-muted-light hover:text-light-text transition-colors\"\n              >\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </Link>\n            ) : (\n              <span className=\"flex items-center text-light-text font-medium\">\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </nav>\n  );\n}\n\n/**\n * Generate breadcrumbs from pathname\n */\nfunction generateBreadcrumbsFromPath(pathname: string): BreadcrumbItem[] {\n  const pathSegments = pathname.split('/').filter(Boolean);\n  \n  const breadcrumbs: BreadcrumbItem[] = [\n    { label: 'Home', href: '/', icon: '\uD83C\uDFE0' }\n  ];\n\n  let currentPath = '';\n  \n  pathSegments.forEach((segment, index) => {\n    currentPath += `/${segment}`;\n    \n    // Convert segment to readable label\n    const label = formatSegmentLabel(segment);\n    \n    // Determine if this should be a link (not the last item)\n    const isLast = index === pathSegments.length - 1;\n    \n    breadcrumbs.push({\n      label,\n      href: isLast ? undefined : currentPath,\n      icon: getSegmentIcon(segment)\n    });\n  });\n\n  return breadcrumbs;\n}\n\n/**\n * Format path segment into readable label\n */\nfunction formatSegmentLabel(segment: string): string {\n  // Handle special cases\n  const specialLabels: Record<string, string> = {\n    'dashboard': 'Dashboard',\n    'topics': 'Topics',\n    'leaderboard': 'Leaderboard',\n    'posts': 'Posts',\n    'create': 'Create',\n    'edit': 'Edit',\n    'my-posts': 'My Posts',\n    'graveyard': 'Graveyard',\n    'badges': 'Badges',\n    'users': 'Citizens',\n    'moderation': 'Moderation',\n    'queue': 'Queue',\n    'appeals': 'Appeals',\n    'reports': 'Reports',\n    'admin': 'Administration',\n    'system': 'System',\n    'help': 'Help',\n    'profile': 'Profile',\n    'settings': 'Settings'\n  };\n\n  if (specialLabels[segment]) {\n    return specialLabels[segment];\n  }\n\n  // Convert kebab-case to Title Case\n  return segment\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n/**\n * Get icon for path segment\n */\nfunction getSegmentIcon(segment: string): string | undefined {\n  const segmentIcons: Record<string, string> = {\n    'dashboard': '\uD83D\uDCCA',\n    'topics': '\uD83D\uDCAC',\n    'leaderboard': '\uD83C\uDFC6',\n    'posts': '\uD83D\uDCDD',\n    'create': '\u270D\uFE0F',\n    'graveyard': '\uD83D\uDC80',\n    'badges': '\uD83C\uDFC5',\n    'users': '\uD83D\uDC65',\n    'moderation': '\u2696\uFE0F',\n    'queue': '\uD83D\uDCCB',\n    'appeals': '\uD83D\uDCCB',\n    'reports': '\uD83D\uDEA8',\n    'admin': '\uD83D\uDD27',\n    'system': '\uD83D\uDCC8',\n    'help': '\u2753',\n    'profile': '\uD83D\uDC64',\n    'settings': '\u2699\uFE0F'\n  };\n\n  return segmentIcons[segment];\n}\n\n/**\n * Hook to get current breadcrumbs\n */\nexport function useBreadcrumbs(): BreadcrumbItem[] {\n  const pathname = usePathname();\n  return generateBreadcrumbsFromPath(pathname);\n}\n"],
      names: ["Breadcrumbs", "useBreadcrumbs", "items", "className", "pathname", "usePathname", "breadcrumbItems", "generateBreadcrumbsFromPath", "length", "nav", "aria-label", "div", "map", "item", "index", "React", "Fragment", "svg", "fill", "stroke", "viewBox", "path", "strokeLinecap", "strokeLinejoin", "strokeWidth", "d", "href", "Link", "icon", "span", "label", "pathSegments", "split", "filter", "Boolean", "breadcrumbs", "currentPath", "forEach", "segment", "formatSegmentLabel", "isLast", "push", "undefined", "getSegmentIcon", "specialLabels", "word", "charAt", "toUpperCase", "slice", "join", "segmentIcons"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1af85ebb28f43b9da2646c7251e4e1c2dfc94044"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fhys8u7b9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fhys8u7b9();
cov_fhys8u7b9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_fhys8u7b9().f[0]++;
  cov_fhys8u7b9().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_fhys8u7b9().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_fhys8u7b9().s[3]++;
_export(exports, {
  get Breadcrumbs() {
    /* istanbul ignore next */
    cov_fhys8u7b9().f[1]++;
    cov_fhys8u7b9().s[4]++;
    return Breadcrumbs;
  },
  get useBreadcrumbs() {
    /* istanbul ignore next */
    cov_fhys8u7b9().f[2]++;
    cov_fhys8u7b9().s[5]++;
    return useBreadcrumbs;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_fhys8u7b9().s[6]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(/*#__PURE__*/cov_fhys8u7b9().s[7]++, _interop_require_default(require("react")));
const _link =
/* istanbul ignore next */
(/*#__PURE__*/cov_fhys8u7b9().s[8]++, _interop_require_default(require("next/link")));
const _navigation =
/* istanbul ignore next */
(cov_fhys8u7b9().s[9]++, require("next/navigation"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_fhys8u7b9().f[3]++;
  cov_fhys8u7b9().s[10]++;
  return /* istanbul ignore next */(cov_fhys8u7b9().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_fhys8u7b9().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_fhys8u7b9().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_fhys8u7b9().b[0][1]++, {
    default: obj
  });
}
function Breadcrumbs({
  items,
  className =
  /* istanbul ignore next */
  (cov_fhys8u7b9().b[2][0]++, '')
}) {
  /* istanbul ignore next */
  cov_fhys8u7b9().f[4]++;
  const pathname =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[11]++, (0, _navigation.usePathname)());
  // Auto-generate breadcrumbs from pathname if items not provided
  const breadcrumbItems =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[12]++,
  /* istanbul ignore next */
  (cov_fhys8u7b9().b[3][0]++, items) ||
  /* istanbul ignore next */
  (cov_fhys8u7b9().b[3][1]++, generateBreadcrumbsFromPath(pathname)));
  /* istanbul ignore next */
  cov_fhys8u7b9().s[13]++;
  if (breadcrumbItems.length <= 1) {
    /* istanbul ignore next */
    cov_fhys8u7b9().b[4][0]++;
    cov_fhys8u7b9().s[14]++;
    return null; // Don't show breadcrumbs for single-level pages
  } else
  /* istanbul ignore next */
  {
    cov_fhys8u7b9().b[4][1]++;
  }
  cov_fhys8u7b9().s[15]++;
  return /*#__PURE__*/(0, _jsxruntime.jsx)("nav", {
    className: `flex items-center space-x-2 text-sm ${className}`,
    "aria-label": "Breadcrumb",
    children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "flex items-center space-x-2",
      children: breadcrumbItems.map((item, index) => {
        /* istanbul ignore next */
        cov_fhys8u7b9().f[5]++;
        cov_fhys8u7b9().s[16]++;
        return /*#__PURE__*/(0, _jsxruntime.jsxs)(_react.default.Fragment, {
          children: [
          /* istanbul ignore next */
          (cov_fhys8u7b9().b[5][0]++, index > 0) &&
          /* istanbul ignore next */
          (cov_fhys8u7b9().b[5][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("svg", {
            className: "w-4 h-4 text-muted-light",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: /*#__PURE__*/(0, _jsxruntime.jsx)("path", {
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 2,
              d: "M9 5l7 7-7 7"
            })
          })),
          /* istanbul ignore next */
          (cov_fhys8u7b9().b[7][0]++, item.href) &&
          /* istanbul ignore next */
          (cov_fhys8u7b9().b[7][1]++, index < breadcrumbItems.length - 1) ?
          /* istanbul ignore next */
          (/*#__PURE__*/cov_fhys8u7b9().b[6][0]++, (0, _jsxruntime.jsxs)(_link.default, {
            href: item.href,
            className: "flex items-center text-muted-light hover:text-light-text transition-colors",
            children: [
            /* istanbul ignore next */
            (cov_fhys8u7b9().b[8][0]++, item.icon) &&
            /* istanbul ignore next */
            (cov_fhys8u7b9().b[8][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
              className: "mr-1",
              children: item.icon
            })), item.label]
          })) :
          /* istanbul ignore next */
          (/*#__PURE__*/cov_fhys8u7b9().b[6][1]++, (0, _jsxruntime.jsxs)("span", {
            className: "flex items-center text-light-text font-medium",
            children: [
            /* istanbul ignore next */
            (cov_fhys8u7b9().b[9][0]++, item.icon) &&
            /* istanbul ignore next */
            (cov_fhys8u7b9().b[9][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
              className: "mr-1",
              children: item.icon
            })), item.label]
          }))]
        }, index);
      })
    })
  });
}
/**
 * Generate breadcrumbs from pathname
 */
function generateBreadcrumbsFromPath(pathname) {
  /* istanbul ignore next */
  cov_fhys8u7b9().f[6]++;
  const pathSegments =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[17]++, pathname.split('/').filter(Boolean));
  const breadcrumbs =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[18]++, [{
    label: 'Home',
    href: '/',
    icon: '🏠'
  }]);
  let currentPath =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[19]++, '');
  /* istanbul ignore next */
  cov_fhys8u7b9().s[20]++;
  pathSegments.forEach((segment, index) => {
    /* istanbul ignore next */
    cov_fhys8u7b9().f[7]++;
    cov_fhys8u7b9().s[21]++;
    currentPath += `/${segment}`;
    // Convert segment to readable label
    const label =
    /* istanbul ignore next */
    (cov_fhys8u7b9().s[22]++, formatSegmentLabel(segment));
    // Determine if this should be a link (not the last item)
    const isLast =
    /* istanbul ignore next */
    (cov_fhys8u7b9().s[23]++, index === pathSegments.length - 1);
    /* istanbul ignore next */
    cov_fhys8u7b9().s[24]++;
    breadcrumbs.push({
      label,
      href: isLast ?
      /* istanbul ignore next */
      (cov_fhys8u7b9().b[10][0]++, undefined) :
      /* istanbul ignore next */
      (cov_fhys8u7b9().b[10][1]++, currentPath),
      icon: getSegmentIcon(segment)
    });
  });
  /* istanbul ignore next */
  cov_fhys8u7b9().s[25]++;
  return breadcrumbs;
}
/**
 * Format path segment into readable label
 */
function formatSegmentLabel(segment) {
  /* istanbul ignore next */
  cov_fhys8u7b9().f[8]++;
  // Handle special cases
  const specialLabels =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[26]++, {
    'dashboard': 'Dashboard',
    'topics': 'Topics',
    'leaderboard': 'Leaderboard',
    'posts': 'Posts',
    'create': 'Create',
    'edit': 'Edit',
    'my-posts': 'My Posts',
    'graveyard': 'Graveyard',
    'badges': 'Badges',
    'users': 'Citizens',
    'moderation': 'Moderation',
    'queue': 'Queue',
    'appeals': 'Appeals',
    'reports': 'Reports',
    'admin': 'Administration',
    'system': 'System',
    'help': 'Help',
    'profile': 'Profile',
    'settings': 'Settings'
  });
  /* istanbul ignore next */
  cov_fhys8u7b9().s[27]++;
  if (specialLabels[segment]) {
    /* istanbul ignore next */
    cov_fhys8u7b9().b[11][0]++;
    cov_fhys8u7b9().s[28]++;
    return specialLabels[segment];
  } else
  /* istanbul ignore next */
  {
    cov_fhys8u7b9().b[11][1]++;
  }
  // Convert kebab-case to Title Case
  cov_fhys8u7b9().s[29]++;
  return segment.split('-').map(word => {
    /* istanbul ignore next */
    cov_fhys8u7b9().f[9]++;
    cov_fhys8u7b9().s[30]++;
    return word.charAt(0).toUpperCase() + word.slice(1);
  }).join(' ');
}
/**
 * Get icon for path segment
 */
function getSegmentIcon(segment) {
  /* istanbul ignore next */
  cov_fhys8u7b9().f[10]++;
  const segmentIcons =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[31]++, {
    'dashboard': '📊',
    'topics': '💬',
    'leaderboard': '🏆',
    'posts': '📝',
    'create': '✍️',
    'graveyard': '💀',
    'badges': '🏅',
    'users': '👥',
    'moderation': '⚖️',
    'queue': '📋',
    'appeals': '📋',
    'reports': '🚨',
    'admin': '🔧',
    'system': '📈',
    'help': '❓',
    'profile': '👤',
    'settings': '⚙️'
  });
  /* istanbul ignore next */
  cov_fhys8u7b9().s[32]++;
  return segmentIcons[segment];
}
function useBreadcrumbs() {
  /* istanbul ignore next */
  cov_fhys8u7b9().f[11]++;
  const pathname =
  /* istanbul ignore next */
  (cov_fhys8u7b9().s[33]++, (0, _navigation.usePathname)());
  /* istanbul ignore next */
  cov_fhys8u7b9().s[34]++;
  return generateBreadcrumbsFromPath(pathname);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,