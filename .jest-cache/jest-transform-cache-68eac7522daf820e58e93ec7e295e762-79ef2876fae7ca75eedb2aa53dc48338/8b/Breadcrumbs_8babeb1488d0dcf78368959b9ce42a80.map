{"version":3,"names":["cov_fhys8u7b9","actualCoverage","s","Breadcrumbs","f","useBreadcrumbs","items","className","b","pathname","_navigation","usePathname","breadcrumbItems","generateBreadcrumbsFromPath","length","_jsxruntime","jsx","map","item","index","jsxs","_react","default","Fragment","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","href","_link","icon","label","pathSegments","split","filter","Boolean","breadcrumbs","currentPath","forEach","segment","formatSegmentLabel","isLast","push","undefined","getSegmentIcon","specialLabels","word","charAt","toUpperCase","slice","join","segmentIcons"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/navigation/Breadcrumbs.tsx"],"sourcesContent":["/**\n * Breadcrumb navigation component for The Robot Overlord\n * Shows current page hierarchy and navigation path\n */\n\n'use client';\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n  icon?: string;\n}\n\ninterface BreadcrumbsProps {\n  items?: BreadcrumbItem[];\n  className?: string;\n}\n\nexport function Breadcrumbs({ items, className = '' }: BreadcrumbsProps) {\n  const pathname = usePathname();\n\n  // Auto-generate breadcrumbs from pathname if items not provided\n  const breadcrumbItems = items || generateBreadcrumbsFromPath(pathname);\n\n  if (breadcrumbItems.length <= 1) {\n    return null; // Don't show breadcrumbs for single-level pages\n  }\n\n  return (\n    <nav className={`flex items-center space-x-2 text-sm ${className}`} aria-label=\"Breadcrumb\">\n      <div className=\"flex items-center space-x-2\">\n        {breadcrumbItems.map((item, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && (\n              <svg\n                className=\"w-4 h-4 text-muted-light\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 5l7 7-7 7\"\n                />\n              </svg>\n            )}\n            \n            {item.href && index < breadcrumbItems.length - 1 ? (\n              <Link\n                href={item.href}\n                className=\"flex items-center text-muted-light hover:text-light-text transition-colors\"\n              >\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </Link>\n            ) : (\n              <span className=\"flex items-center text-light-text font-medium\">\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </nav>\n  );\n}\n\n/**\n * Generate breadcrumbs from pathname\n */\nfunction generateBreadcrumbsFromPath(pathname: string): BreadcrumbItem[] {\n  const pathSegments = pathname.split('/').filter(Boolean);\n  \n  const breadcrumbs: BreadcrumbItem[] = [\n    { label: 'Home', href: '/', icon: 'üè†' }\n  ];\n\n  let currentPath = '';\n  \n  pathSegments.forEach((segment, index) => {\n    currentPath += `/${segment}`;\n    \n    // Convert segment to readable label\n    const label = formatSegmentLabel(segment);\n    \n    // Determine if this should be a link (not the last item)\n    const isLast = index === pathSegments.length - 1;\n    \n    breadcrumbs.push({\n      label,\n      href: isLast ? undefined : currentPath,\n      icon: getSegmentIcon(segment)\n    });\n  });\n\n  return breadcrumbs;\n}\n\n/**\n * Format path segment into readable label\n */\nfunction formatSegmentLabel(segment: string): string {\n  // Handle special cases\n  const specialLabels: Record<string, string> = {\n    'dashboard': 'Dashboard',\n    'topics': 'Topics',\n    'leaderboard': 'Leaderboard',\n    'posts': 'Posts',\n    'create': 'Create',\n    'edit': 'Edit',\n    'my-posts': 'My Posts',\n    'graveyard': 'Graveyard',\n    'badges': 'Badges',\n    'users': 'Citizens',\n    'moderation': 'Moderation',\n    'queue': 'Queue',\n    'appeals': 'Appeals',\n    'reports': 'Reports',\n    'admin': 'Administration',\n    'system': 'System',\n    'help': 'Help',\n    'profile': 'Profile',\n    'settings': 'Settings'\n  };\n\n  if (specialLabels[segment]) {\n    return specialLabels[segment];\n  }\n\n  // Convert kebab-case to Title Case\n  return segment\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n/**\n * Get icon for path segment\n */\nfunction getSegmentIcon(segment: string): string | undefined {\n  const segmentIcons: Record<string, string> = {\n    'dashboard': 'üìä',\n    'topics': 'üí¨',\n    'leaderboard': 'üèÜ',\n    'posts': 'üìù',\n    'create': '‚úçÔ∏è',\n    'graveyard': 'üíÄ',\n    'badges': 'üèÖ',\n    'users': 'üë•',\n    'moderation': '‚öñÔ∏è',\n    'queue': 'üìã',\n    'appeals': 'üìã',\n    'reports': 'üö®',\n    'admin': 'üîß',\n    'system': 'üìà',\n    'help': '‚ùì',\n    'profile': 'üë§',\n    'settings': '‚öôÔ∏è'\n  };\n\n  return segmentIcons[segment];\n}\n\n/**\n * Hook to get current breadcrumbs\n */\nexport function useBreadcrumbs(): BreadcrumbItem[] {\n  const pathname = usePathname();\n  return generateBreadcrumbsFromPath(pathname);\n}\n"],"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","ignoreList":[]}