{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/utils/test-utils.tsx"],"sourcesContent":["import React from 'react'\nimport { render as rtlRender, RenderOptions, screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport '@testing-library/jest-dom'\n\n// Types\ninterface Post {\n  id: string\n  title: string\n  content: string\n  author: string\n  createdAt: string\n  updatedAt: string\n  tags: string[]\n  category: string\n}\n\ninterface User {\n  id: string\n  username: string\n  email: string\n  displayName: string\n  avatar?: string\n  bio?: string\n  createdAt?: string\n}\n\n// Create stable mock functions to prevent re-renders\nconst mockLogin = jest.fn()\nconst mockLoginWithGoogle = jest.fn()\nconst mockLogout = jest.fn()\nconst mockRegister = jest.fn()\nconst mockUpdateProfile = jest.fn()\nconst mockRefreshToken = jest.fn()\nconst mockClearError = jest.fn()\nconst mockUpdateUser = jest.fn()\n\n// Mock AuthContext for testing\nconst mockAuthContext = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  login: mockLogin,\n  loginWithGoogle: mockLoginWithGoogle,\n  logout: mockLogout,\n  refreshToken: mockRefreshToken,\n  clearError: mockClearError,\n  updateUser: mockUpdateUser,\n}\n\n// Mock the AuthContext\njest.mock('@/contexts/AuthContext', () => ({\n  AuthProvider: ({ children }: { children: React.ReactNode }) => <>{children}</>,\n  useAuth: () => mockAuthContext,\n  useRequireAuth: () => mockAuthContext,\n}))\n\n// Mock Zustand store\nconst mockAddNotification = jest.fn()\nconst mockSetSidebarOpen = jest.fn()\nconst mockToggleSidebar = jest.fn()\n\njest.mock('@/stores/appStore', () => ({\n  useAppStore: () => ({\n    addNotification: mockAddNotification,\n    notifications: [],\n    removeNotification: jest.fn(),\n  }),\n  useUI: () => ({\n    ui: {\n      sidebarOpen: false,\n      theme: 'dark',\n      isLoading: false,\n    },\n    setSidebarOpen: mockSetSidebarOpen,\n    toggleSidebar: mockToggleSidebar,\n    setTheme: jest.fn(),\n    setLoading: jest.fn(),\n  })\n}))\n\n// Mock API services with sample data\nconst mockPosts = [\n  {\n    id: '1',\n    title: 'Test Post',\n    content: 'Test content',\n    author: 'testuser',\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n    tags: ['test'],\n    category: 'general',\n    score: 10\n  }\n]\n\njest.mock('@/services', () => ({\n  postsService: {\n    getFeed: jest.fn().mockResolvedValue({\n      data: mockPosts,\n      hasMore: true,\n      total: 1\n    })\n  },\n  topicsService: {\n    getFeed: jest.fn().mockResolvedValue({\n      data: [],\n      hasMore: false,\n      total: 0\n    })\n  }\n}))\n\n// Mock real-time updates hook\njest.mock('@/hooks/useRealTimeUpdates', () => ({\n  useRealTimeUpdates: () => ({\n    connected: true,\n    isRealTimeEnabled: true,\n    lastUpdate: null\n  })\n}))\n\n// Basic mock provider for simple component tests\nconst MockProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return <>{children}</>\n}\n\n// Specialized mock provider for integration tests with stable state\nexport const IntegrationMockProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const mockAuthValue = {\n    user: { id: '1', username: 'testuser', email: 'test@example.com', displayName: 'Test User' },\n    isAuthenticated: true,\n    isLoading: false,\n    login: mockLogin,\n    loginWithGoogle: mockLoginWithGoogle,\n    logout: mockLogout,\n    register: mockRegister,\n    updateProfile: mockUpdateProfile,\n    refreshToken: mockRefreshToken,\n  }\n  \n  return (\n    <div data-testid=\"mock-provider-wrapper\">\n      {children}\n    </div>\n  )\n}\n\n// Custom render function that includes providers\nconst customRender = (\n  ui: React.ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>\n) => rtlRender(ui, { wrapper: MockProviders, ...options })\n\n// Integration test render function with stable providers\nconst integrationRender = (\n  ui: React.ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>\n) => rtlRender(ui, { wrapper: IntegrationMockProviders, ...options })\n\n// Mock data creators\nexport const createMockPost = (overrides: Partial<Post> = {}): Post => ({\n  id: '1',\n  title: 'Test Post',\n  content: 'Test content',\n  author: 'testuser',\n  createdAt: '2023-01-01T00:00:00Z',\n  updatedAt: '2023-01-01T00:00:00Z',\n  tags: ['test'],\n  category: 'general',\n  ...overrides\n})\n\nexport const createMockUser = (overrides: Partial<User> = {}): User => ({\n  id: '1',\n  username: 'testuser',\n  email: 'test@example.com',\n  displayName: 'Test User',\n  avatar: '/avatars/default.png',\n  bio: 'Test user bio',\n  createdAt: '2023-01-01T00:00:00Z',\n  ...overrides\n})\n\nexport const createMockTopic = (overrides = {}) => ({\n  id: '1',\n  title: 'Test Topic',\n  slug: 'test-topic',\n  description: 'Test topic description',\n  postCount: 10,\n  ...overrides\n})\n\n// API response mocks\nexport const mockApiResponse = <T,>(data: T, delay = 0): Promise<T> => {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(data), delay)\n  })\n}\n\nexport const mockApiError = (message = 'API Error', delay = 0): Promise<never> => {\n  return new Promise((_, reject) => {\n    setTimeout(() => reject(new Error(message)), delay)\n  })\n}\n\n// Form helpers\nexport const fillForm = async (fields: Record<string, string>): Promise<void> => {\n  const user = userEvent.setup()\n  \n  for (const [label, value] of Object.entries(fields)) {\n    const input = screen.getByLabelText(new RegExp(label, 'i'))\n    await user.clear(input)\n    await user.type(input, value)\n  }\n}\n\nexport const submitForm = async (submitButton?: HTMLElement) => {\n  const user = userEvent.setup()\n  const button = submitButton || screen.getByRole('button', { name: /submit/i })\n  await user.click(button)\n}\n\n// Accessibility helpers\nexport const expectAccessibleButton = (button: HTMLElement) => {\n  expect(button).toHaveAttribute('type')\n  expect(button).toHaveAttribute('aria-label')\n  expect(button).not.toHaveAttribute('aria-disabled', 'true')\n}\n\nexport const expectAccessibleLink = (link: HTMLElement) => {\n  expect(link).toHaveAttribute('href')\n  expect(link).toHaveAttribute('aria-label')\n  expect(link).not.toHaveAttribute('aria-disabled', 'true')\n}\n\nexport const expectAccessibleImage = (img: HTMLElement) => {\n  expect(img).toHaveAttribute('alt')\n}\n\n// Performance helpers\nexport const measureRenderTime = async (renderFn: () => void): Promise<number> => {\n  const start = performance.now()\n  renderFn()\n  await waitFor(() => {})\n  return performance.now() - start\n}\n\nexport const expectPerformance = (duration: number, maxDuration: number) => {\n  expect(duration).toBeLessThan(maxDuration)\n}\n\n// Mock IntersectionObserver\nexport const mockIntersectionObserver = (isIntersecting = true) => {\n  const mockObserver = {\n    observe: jest.fn(),\n    disconnect: jest.fn(),\n    unobserve: jest.fn(),\n  }\n\n  Object.defineProperty(window, 'IntersectionObserver', {\n    writable: true,\n    configurable: true,\n    value: jest.fn().mockImplementation((callback) => {\n      callback([{ isIntersecting }])\n      return mockObserver\n    }),\n  })\n\n  return mockObserver\n}\n\n// Wait for async operations\nexport const waitForAsync = (ms = 0) => {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n// Custom matchers\nexport const customMatchers = {\n  toHaveAccessibleName: (element: HTMLElement, name: string) => {\n    const accessibleName = \n      element.textContent ||\n      element.getAttribute('aria-label') ||\n      element.getAttribute('aria-labelledby')\n    \n    return {\n      pass: accessibleName === name,\n      message: () => `Expected element to have accessible name \"${name}\", but got \"${accessibleName}\"`\n    }\n  },\n  \n  toBeVisibleToScreenReader: (element: HTMLElement) => {\n    const isHidden = \n      element.getAttribute('aria-hidden') === 'true' ||\n      element.style.display === 'none' ||\n      element.style.visibility === 'hidden'\n    \n    return {\n      pass: !isHidden,\n      message: () => `Expected element to be visible to screen readers`\n    }\n  }\n}\n\n// Re-export testing library functions\nexport { screen, waitFor, userEvent }\nexport { customRender as render, integrationRender }\n"],"names":["jest","mock","AuthProvider","children","useAuth","mockAuthContext","useRequireAuth","useAppStore","addNotification","mockAddNotification","notifications","removeNotification","fn","useUI","ui","sidebarOpen","theme","isLoading","setSidebarOpen","mockSetSidebarOpen","toggleSidebar","mockToggleSidebar","setTheme","setLoading","postsService","getFeed","mockResolvedValue","data","mockPosts","hasMore","total","topicsService","useRealTimeUpdates","connected","isRealTimeEnabled","lastUpdate","IntegrationMockProviders","createMockPost","createMockTopic","createMockUser","customMatchers","expectAccessibleButton","expectAccessibleImage","expectAccessibleLink","expectPerformance","fillForm","integrationRender","measureRenderTime","mockApiError","mockApiResponse","mockIntersectionObserver","render","customRender","screen","submitForm","userEvent","waitFor","waitForAsync","mockLogin","mockLoginWithGoogle","mockLogout","mockRegister","mockUpdateProfile","mockRefreshToken","mockClearError","mockUpdateUser","user","isAuthenticated","error","login","loginWithGoogle","logout","refreshToken","clearError","updateUser","id","title","content","author","createdAt","updatedAt","tags","category","score","MockProviders","mockAuthValue","username","email","displayName","register","updateProfile","div","data-testid","options","rtlRender","wrapper","overrides","avatar","bio","slug","description","postCount","delay","Promise","resolve","setTimeout","message","_","reject","Error","fields","setup","label","value","Object","entries","input","getByLabelText","RegExp","clear","type","submitButton","button","getByRole","name","click","expect","toHaveAttribute","not","link","img","renderFn","start","performance","now","duration","maxDuration","toBeLessThan","isIntersecting","mockObserver","observe","disconnect","unobserve","defineProperty","window","writable","configurable","mockImplementation","callback","ms","toHaveAccessibleName","element","accessibleName","textContent","getAttribute","pass","toBeVisibleToScreenReader","isHidden","style","display","visibility"],"mappings":"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"}