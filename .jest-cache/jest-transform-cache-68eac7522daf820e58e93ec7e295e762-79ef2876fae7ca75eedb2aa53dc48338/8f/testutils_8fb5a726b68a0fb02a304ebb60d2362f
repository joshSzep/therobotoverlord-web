1f5d98def495e25c4facd4618745f6f4
"use strict";
// Mock the AuthContext
jest.mock('@/contexts/AuthContext', ()=>({
        AuthProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            }),
        useAuth: ()=>mockAuthContext,
        useRequireAuth: ()=>mockAuthContext
    }));
jest.mock('@/stores/appStore', ()=>({
        useAppStore: ()=>({
                addNotification: mockAddNotification,
                notifications: [],
                removeNotification: jest.fn()
            }),
        useUI: ()=>({
                ui: {
                    sidebarOpen: false,
                    theme: 'dark',
                    isLoading: false
                },
                setSidebarOpen: mockSetSidebarOpen,
                toggleSidebar: mockToggleSidebar,
                setTheme: jest.fn(),
                setLoading: jest.fn()
            })
    }));
jest.mock('@/services', ()=>({
        postsService: {
            getFeed: jest.fn().mockResolvedValue({
                data: mockPosts,
                hasMore: true,
                total: 1
            })
        },
        topicsService: {
            getFeed: jest.fn().mockResolvedValue({
                data: [],
                hasMore: false,
                total: 0
            })
        }
    }));
// Mock real-time updates hook
jest.mock('@/hooks/useRealTimeUpdates', ()=>({
        useRealTimeUpdates: ()=>({
                connected: true,
                isRealTimeEnabled: true,
                lastUpdate: null
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get IntegrationMockProviders () {
        return IntegrationMockProviders;
    },
    get createMockPost () {
        return createMockPost;
    },
    get createMockTopic () {
        return createMockTopic;
    },
    get createMockUser () {
        return createMockUser;
    },
    get customMatchers () {
        return customMatchers;
    },
    get expectAccessibleButton () {
        return expectAccessibleButton;
    },
    get expectAccessibleImage () {
        return expectAccessibleImage;
    },
    get expectAccessibleLink () {
        return expectAccessibleLink;
    },
    get expectPerformance () {
        return expectPerformance;
    },
    get fillForm () {
        return fillForm;
    },
    get integrationRender () {
        return integrationRender;
    },
    get measureRenderTime () {
        return measureRenderTime;
    },
    get mockApiError () {
        return mockApiError;
    },
    get mockApiResponse () {
        return mockApiResponse;
    },
    get mockIntersectionObserver () {
        return mockIntersectionObserver;
    },
    get render () {
        return customRender;
    },
    get screen () {
        return _react1.screen;
    },
    get submitForm () {
        return submitForm;
    },
    get userEvent () {
        return _userevent.default;
    },
    get waitFor () {
        return _react1.waitFor;
    },
    get waitForAsync () {
        return waitForAsync;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Create stable mock functions to prevent re-renders
const mockLogin = jest.fn();
const mockLoginWithGoogle = jest.fn();
const mockLogout = jest.fn();
const mockRegister = jest.fn();
const mockUpdateProfile = jest.fn();
const mockRefreshToken = jest.fn();
const mockClearError = jest.fn();
const mockUpdateUser = jest.fn();
// Mock AuthContext for testing
const mockAuthContext = {
    user: null,
    isAuthenticated: false,
    isLoading: false,
    error: null,
    login: mockLogin,
    loginWithGoogle: mockLoginWithGoogle,
    logout: mockLogout,
    refreshToken: mockRefreshToken,
    clearError: mockClearError,
    updateUser: mockUpdateUser
};
// Mock Zustand store
const mockAddNotification = jest.fn();
const mockSetSidebarOpen = jest.fn();
const mockToggleSidebar = jest.fn();
// Mock API services with sample data
const mockPosts = [
    {
        id: '1',
        title: 'Test Post',
        content: 'Test content',
        author: 'testuser',
        createdAt: '2023-01-01T00:00:00Z',
        updatedAt: '2023-01-01T00:00:00Z',
        tags: [
            'test'
        ],
        category: 'general',
        score: 10
    }
];
// Basic mock provider for simple component tests
const MockProviders = ({ children })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: children
    });
};
const IntegrationMockProviders = ({ children })=>{
    const mockAuthValue = {
        user: {
            id: '1',
            username: 'testuser',
            email: 'test@example.com',
            displayName: 'Test User'
        },
        isAuthenticated: true,
        isLoading: false,
        login: mockLogin,
        loginWithGoogle: mockLoginWithGoogle,
        logout: mockLogout,
        register: mockRegister,
        updateProfile: mockUpdateProfile,
        refreshToken: mockRefreshToken
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "mock-provider-wrapper",
        children: children
    });
};
// Custom render function that includes providers
const customRender = (ui, options)=>(0, _react1.render)(ui, {
        wrapper: MockProviders,
        ...options
    });
// Integration test render function with stable providers
const integrationRender = (ui, options)=>(0, _react1.render)(ui, {
        wrapper: IntegrationMockProviders,
        ...options
    });
const createMockPost = (overrides = {})=>({
        id: '1',
        title: 'Test Post',
        content: 'Test content',
        author: 'testuser',
        createdAt: '2023-01-01T00:00:00Z',
        updatedAt: '2023-01-01T00:00:00Z',
        tags: [
            'test'
        ],
        category: 'general',
        ...overrides
    });
const createMockUser = (overrides = {})=>({
        id: '1',
        username: 'testuser',
        email: 'test@example.com',
        displayName: 'Test User',
        avatar: '/avatars/default.png',
        bio: 'Test user bio',
        createdAt: '2023-01-01T00:00:00Z',
        ...overrides
    });
const createMockTopic = (overrides = {})=>({
        id: '1',
        title: 'Test Topic',
        slug: 'test-topic',
        description: 'Test topic description',
        postCount: 10,
        ...overrides
    });
const mockApiResponse = (data, delay = 0)=>{
    return new Promise((resolve)=>{
        setTimeout(()=>resolve(data), delay);
    });
};
const mockApiError = (message = 'API Error', delay = 0)=>{
    return new Promise((_, reject)=>{
        setTimeout(()=>reject(new Error(message)), delay);
    });
};
const fillForm = async (fields)=>{
    const user = _userevent.default.setup();
    for (const [label, value] of Object.entries(fields)){
        const input = _react1.screen.getByLabelText(new RegExp(label, 'i'));
        await user.clear(input);
        await user.type(input, value);
    }
};
const submitForm = async (submitButton)=>{
    const user = _userevent.default.setup();
    const button = submitButton || _react1.screen.getByRole('button', {
        name: /submit/i
    });
    await user.click(button);
};
const expectAccessibleButton = (button)=>{
    expect(button).toHaveAttribute('type');
    expect(button).toHaveAttribute('aria-label');
    expect(button).not.toHaveAttribute('aria-disabled', 'true');
};
const expectAccessibleLink = (link)=>{
    expect(link).toHaveAttribute('href');
    expect(link).toHaveAttribute('aria-label');
    expect(link).not.toHaveAttribute('aria-disabled', 'true');
};
const expectAccessibleImage = (img)=>{
    expect(img).toHaveAttribute('alt');
};
const measureRenderTime = async (renderFn)=>{
    const start = performance.now();
    renderFn();
    await (0, _react1.waitFor)(()=>{});
    return performance.now() - start;
};
const expectPerformance = (duration, maxDuration)=>{
    expect(duration).toBeLessThan(maxDuration);
};
const mockIntersectionObserver = (isIntersecting = true)=>{
    const mockObserver = {
        observe: jest.fn(),
        disconnect: jest.fn(),
        unobserve: jest.fn()
    };
    Object.defineProperty(window, 'IntersectionObserver', {
        writable: true,
        configurable: true,
        value: jest.fn().mockImplementation((callback)=>{
            callback([
                {
                    isIntersecting
                }
            ]);
            return mockObserver;
        })
    });
    return mockObserver;
};
const waitForAsync = (ms = 0)=>{
    return new Promise((resolve)=>setTimeout(resolve, ms));
};
const customMatchers = {
    toHaveAccessibleName: (element, name)=>{
        const accessibleName = element.textContent || element.getAttribute('aria-label') || element.getAttribute('aria-labelledby');
        return {
            pass: accessibleName === name,
            message: ()=>`Expected element to have accessible name "${name}", but got "${accessibleName}"`
        };
    },
    toBeVisibleToScreenReader: (element)=>{
        const isHidden = element.getAttribute('aria-hidden') === 'true' || element.style.display === 'none' || element.style.visibility === 'hidden';
        return {
            pass: !isHidden,
            message: ()=>`Expected element to be visible to screen readers`
        };
    }
};

//# sourceMappingURL=data:application/json;base64,