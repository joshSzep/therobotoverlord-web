{"version":3,"names":["cov_1q1ka53fpg","actualCoverage","s","MetaTags","f","default","_default","useMetaTags","DEFAULT_META","title","description","keywords","image","type","author","b","url","publishedTime","modifiedTime","section","tags","noIndex","canonical","pathname","_navigation","usePathname","metaTitle","metaDescription","metaKeywords","join","metaImage","metaUrl","process","env","NEXT_PUBLIC_SITE_URL","metaAuthor","canonicalUrl","_jsxruntime","jsxs","_head","jsx","name","content","rel","href","property","Fragment","map","tag","index","sizes","crossOrigin","generatePostMeta","post","slice","replace","Date","createdAt","toISOString","updatedAt","undefined","generateTopicMeta","topic","postCount","generateUserMeta","user","username","bio","avatar"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/seo/MetaTags.tsx"],"sourcesContent":["'use client';\n\nimport Head from 'next/head';\nimport { usePathname } from 'next/navigation';\n\ninterface MetaTagsProps {\n  title?: string;\n  description?: string;\n  keywords?: string[];\n  image?: string;\n  url?: string;\n  type?: 'website' | 'article' | 'profile';\n  author?: string;\n  publishedTime?: string;\n  modifiedTime?: string;\n  section?: string;\n  tags?: string[];\n  noIndex?: boolean;\n  canonical?: string;\n}\n\nconst DEFAULT_META = {\n  title: 'The Robot Overlord - AI-Powered Community Platform',\n  description: 'Join The Robot Overlord community for AI discussions, insights, and cutting-edge technology conversations. Connect with AI enthusiasts and experts.',\n  keywords: ['AI', 'artificial intelligence', 'machine learning', 'technology', 'community', 'discussion', 'forum'],\n  image: '/images/og-default.png',\n  type: 'website' as const,\n  author: 'The Robot Overlord Team'\n};\n\nexport const MetaTags: React.FC<MetaTagsProps> = ({\n  title,\n  description,\n  keywords = [],\n  image,\n  url,\n  type = 'website',\n  author,\n  publishedTime,\n  modifiedTime,\n  section,\n  tags = [],\n  noIndex = false,\n  canonical\n}) => {\n  const pathname = usePathname();\n  \n  const metaTitle = title ? `${title} | The Robot Overlord` : DEFAULT_META.title;\n  const metaDescription = description || DEFAULT_META.description;\n  const metaKeywords = [...DEFAULT_META.keywords, ...keywords].join(', ');\n  const metaImage = image || DEFAULT_META.image;\n  const metaUrl = url || `${process.env.NEXT_PUBLIC_SITE_URL}${pathname}`;\n  const metaAuthor = author || DEFAULT_META.author;\n  const canonicalUrl = canonical || metaUrl;\n\n  return (\n    <Head>\n      {/* Basic Meta Tags */}\n      <title>{metaTitle}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta name=\"keywords\" content={metaKeywords} />\n      <meta name=\"author\" content={metaAuthor} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta name=\"robots\" content={noIndex ? 'noindex,nofollow' : 'index,follow'} />\n      <link rel=\"canonical\" href={canonicalUrl} />\n\n      {/* Open Graph Meta Tags */}\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:image\" content={metaImage} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:type\" content={type} />\n      <meta property=\"og:site_name\" content=\"The Robot Overlord\" />\n      <meta property=\"og:locale\" content=\"en_US\" />\n\n      {/* Article-specific Open Graph */}\n      {type === 'article' && (\n        <>\n          {publishedTime && <meta property=\"article:published_time\" content={publishedTime} />}\n          {modifiedTime && <meta property=\"article:modified_time\" content={modifiedTime} />}\n          {author && <meta property=\"article:author\" content={author} />}\n          {section && <meta property=\"article:section\" content={section} />}\n          {tags.map((tag, index) => (\n            <meta key={index} property=\"article:tag\" content={tag} />\n          ))}\n        </>\n      )}\n\n      {/* Twitter Card Meta Tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@robotoverlord\" />\n      <meta name=\"twitter:creator\" content=\"@robotoverlord\" />\n      <meta name=\"twitter:title\" content={metaTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      <meta name=\"twitter:image\" content={metaImage} />\n\n      {/* Additional Meta Tags */}\n      <meta name=\"theme-color\" content=\"#1f2937\" />\n      <meta name=\"msapplication-TileColor\" content=\"#1f2937\" />\n      <meta name=\"application-name\" content=\"The Robot Overlord\" />\n      <meta name=\"apple-mobile-web-app-title\" content=\"Robot Overlord\" />\n      <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n      <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\" />\n\n      {/* Favicon and Icons */}\n      <link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\" />\n      <link rel=\"manifest\" href=\"/manifest.json\" />\n\n      {/* Preconnect to external domains */}\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n    </Head>\n  );\n};\n\n// Hook for generating meta tags based on page content\nexport const useMetaTags = () => {\n  const generatePostMeta = (post: {\n    title: string;\n    content: string;\n    author: string;\n    createdAt: string;\n    updatedAt?: string;\n    tags?: string[];\n    image?: string;\n  }) => ({\n    title: post.title,\n    description: post.content.slice(0, 160).replace(/<[^>]*>/g, ''),\n    author: post.author,\n    publishedTime: new Date(post.createdAt).toISOString(),\n    modifiedTime: post.updatedAt ? new Date(post.updatedAt).toISOString() : undefined,\n    tags: post.tags || [],\n    image: post.image,\n    type: 'article' as const\n  });\n\n  const generateTopicMeta = (topic: {\n    title: string;\n    description: string;\n    postCount: number;\n    image?: string;\n  }) => ({\n    title: topic.title,\n    description: `${topic.description} - ${topic.postCount} posts in this topic.`,\n    image: topic.image,\n    type: 'website' as const\n  });\n\n  const generateUserMeta = (user: {\n    username: string;\n    bio?: string;\n    avatar?: string;\n    postCount: number;\n  }) => ({\n    title: `${user.username}'s Profile`,\n    description: user.bio || `View ${user.username}'s profile and ${user.postCount} posts on The Robot Overlord.`,\n    image: user.avatar,\n    type: 'profile' as const\n  });\n\n  return {\n    generatePostMeta,\n    generateTopicMeta,\n    generateUserMeta\n  };\n};\n\nexport default MetaTags;\n"],"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","ignoreList":[]}