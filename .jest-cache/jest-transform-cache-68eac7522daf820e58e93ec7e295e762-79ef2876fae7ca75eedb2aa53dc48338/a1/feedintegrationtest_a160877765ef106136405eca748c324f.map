{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/pages/feed.integration.test.tsx"],"sourcesContent":["import { render, screen, waitFor, fireEvent } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport FeedPage from \"@/app/feed/page\";\nimport { createMockPost, IntegrationMockProviders } from \"../utils/test-utils\";\n\n// Mock the lazy components\njest.mock(\"@/components/lazy/LazyComponents\", () => ({\n  LazyContentFeed: ({\n    items = [],\n    onLoadMore,\n    hasMore,\n    isLoadingMore,\n  }: {\n    items?: Array<{\n      id: string;\n      data?: { title?: string; content?: string; author?: string };\n      title?: string;\n      content?: string;\n      author?: string;\n    }>;\n    onLoadMore?: () => void;\n    hasMore?: boolean;\n    isLoadingMore?: boolean;\n  }) => (\n    <div data-testid=\"content-feed\">\n      <div data-testid=\"feed-items\">\n        {items.map((item) => (\n          <div key={item.id} data-testid={`feed-item-${item.id}`}>\n            <h3>{item.data?.title || item.title}</h3>\n            <p>{item.data?.content || item.content}</p>\n            <span>By {item.data?.author || item.author}</span>\n          </div>\n        ))}\n      </div>\n      {hasMore && (\n        <button\n          onClick={onLoadMore}\n          disabled={isLoadingMore}\n          data-testid=\"load-more-button\"\n        >\n          {isLoadingMore ? \"Loading...\" : \"Load More\"}\n        </button>\n      )}\n    </div>\n  ),\n  LazyPersonalizedRecommendations: ({\n    limit,\n    categories = [],\n  }: {\n    limit?: number;\n    categories?: string[];\n  }) => (\n    <div data-testid=\"recommendations\">\n      <h3>Recommendations</h3>\n      <p>Limit: {limit}</p>\n      <p>Categories: {categories.join(\", \")}</p>\n    </div>\n  ),\n}));\n\n// Mock the real-time updates hook\nconst mockUseRealTimeUpdates = jest.fn().mockReturnValue({\n  isConnected: true,\n  connectionStatus: 'connected',\n  lastUpdate: null,\n  subscribe: jest.fn(),\n  unsubscribe: jest.fn(),\n})\n\njest.mock('@/hooks/useRealTimeUpdates', () => ({\n  useRealTimeUpdates: () => ({\n    isConnected: true,\n    connectionStatus: 'connected',\n    lastUpdate: null,\n    subscribe: jest.fn(),\n    unsubscribe: jest.fn(),\n  }),\n}))\n\n// Mock performance monitoring\nconst mockUsePerformanceMonitoring = jest.fn().mockReturnValue({\n  startMeasurement: jest.fn(),\n  endMeasurement: jest.fn(),\n  getMetrics: jest.fn().mockReturnValue({}),\n})\n\njest.mock('@/hooks/usePerformanceMonitoring', () => ({\n  usePerformanceMonitoring: () => ({\n    startMeasurement: jest.fn(),\n    endMeasurement: jest.fn(),\n    getMetrics: jest.fn().mockReturnValue({}),\n  }),\n}));\n\n// Mock other UI components\njest.mock(\"@/components/ui/LoadingSpinner\", () => ({\n  LoadingState: ({\n    children,\n    isLoading,\n    error,\n    skeleton,\n  }: {\n    children: React.ReactNode;\n    isLoading?: boolean;\n    error?: string | null;\n    skeleton?: React.ReactNode;\n  }) => {\n    if (isLoading) return <div data-testid=\"loading-state\">{skeleton}</div>;\n    if (error) return <div data-testid=\"error-state\">Error loading feed</div>;\n    return children;\n  },\n}));\n\njest.mock(\"@/components/ui/EmptyState\", () => ({\n  EmptyFeedState: ({ onRefresh }: { onRefresh?: () => void }) => (\n    <div data-testid=\"empty-feed-state\">\n      <h2>No posts yet</h2>\n      <p>Be the first to create a post!</p>\n      {onRefresh && (\n        <button onClick={onRefresh} data-testid=\"refresh-button\">\n          Refresh\n        </button>\n      )}\n    </div>\n  ),\n}));\n\njest.mock(\"@/components/feed/FeedFilters\", () => ({\n  FeedFilters: () => <div data-testid=\"feed-filters\">Mock Feed Filters</div>,\n}));\n\n// Mock services with different behaviors for different tests\nconst mockPostsService = {\n  getPosts: jest.fn().mockImplementation(() => {\n    // Default to returning mock posts, but can be overridden per test\n    return Promise.resolve([\n      { id: '1', title: 'Test Post 1', content: 'Content 1', author: 'User1' },\n      { id: '2', title: 'Test Post 2', content: 'Content 2', author: 'User2' }\n    ])\n  }),\n  getPost: jest.fn(),\n  createPost: jest.fn(),\n  updatePost: jest.fn(),\n  deletePost: jest.fn(),\n};\n\nconst mockTopicsService = {\n  getTopics: jest.fn().mockResolvedValue([]),\n  getTopic: jest.fn(),\n  createTopic: jest.fn(),\n  updateTopic: jest.fn(),\n  deleteTopic: jest.fn(),\n};\n\njest.mock(\"@/services\", () => ({\n  postsService: {\n    getPosts: jest.fn().mockImplementation(() => {\n      return Promise.resolve([\n        { id: '1', title: 'Test Post 1', content: 'Content 1', author: 'User1' },\n        { id: '2', title: 'Test Post 2', content: 'Content 2', author: 'User2' }\n      ])\n    }),\n    getPost: jest.fn(),\n    createPost: jest.fn(),\n    updatePost: jest.fn(),\n    deletePost: jest.fn(),\n  },\n  topicsService: {\n    getTopics: jest.fn().mockResolvedValue([]),\n    getTopic: jest.fn(),\n    createTopic: jest.fn(),\n    updateTopic: jest.fn(),\n    deleteTopic: jest.fn(),\n  },\n}));\n\n// Mock API calls\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe(\"Feed Page Integration\", () => {\n  const mockPosts = [\n    createMockPost({\n      id: \"1\",\n      title: \"AI Revolution\",\n      content: \"The future of AI is here\",\n      author: \"ai_expert\",\n    }),\n    createMockPost({\n      id: \"2\",\n      title: \"Machine Learning Basics\",\n      content: \"Understanding ML fundamentals\",\n      author: \"ml_teacher\",\n    }),\n  ];\n\n  beforeEach(() => {\n    mockFetch.mockClear();\n    // Mock successful API responses\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({\n        posts: mockPosts,\n        hasMore: true,\n        total: 10,\n      }),\n    });\n  });\n\n  it(\"renders feed page with posts\", async () => {\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    // Wait for posts to load\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check for feed title\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n  });\n\n  it(\"displays loading state initially\", async () => {\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    // Wait for content to load\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Content should be rendered\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n  });\n\n  it(\"handles filter changes\", async () => {\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"feed-filters\")).toBeInTheDocument();\n    });\n\n    // Should render filters component\n    expect(screen.getByText(\"Mock Feed Filters\")).toBeInTheDocument();\n  });\n\n  it(\"implements infinite scrolling\", async () => {\n    const user = userEvent.setup();\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Mock additional posts for load more\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        posts: [createMockPost({ id: \"3\", title: \"New Post\" })],\n        hasMore: false,\n        total: 3,\n      }),\n    });\n\n    // Click load more button\n    const loadMoreButton = screen.getByRole('button', { name: /load more/i }) || screen.getByText(/load more/i);\n    await user.click(loadMoreButton);\n\n    // Should show loading state\n    expect(loadMoreButton).toHaveTextContent(\"Loading...\");\n\n    // Wait for new content\n    await waitFor(() => {\n      expect(screen.getByText(\"New Post\")).toBeInTheDocument();\n    });\n  });\n\n  it(\"shows recommendations sidebar\", async () => {\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check for feed content\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n  });\n\n  it(\"handles real-time updates\", async () => {\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check that real-time updates hook is called\n    await waitFor(() => {\n      expect(mockUseRealTimeUpdates).toHaveBeenCalled();\n    }, { timeout: 3000 });\n  });\n\n  it(\"handles API errors gracefully\", async () => {\n    // Mock API error\n    mockPostsService.getPosts.mockRejectedValueOnce(new Error(\"API Error\"));\n\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    // Should still render the page structure\n    await waitFor(() => {\n      expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n    });\n  });\n\n  it(\"shows empty state when no posts\", async () => {\n    // Mock empty posts for this test\n    mockPostsService.getPosts.mockResolvedValueOnce([]);\n    \n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    // Should render the page with empty state component\n    await waitFor(() => {\n      expect(screen.getByTestId(\"empty-feed-state\")).toBeInTheDocument();\n    }, { timeout: 3000 });\n  });\n\n  it(\"maintains accessibility standards\", async () => {\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    // Check for proper heading structure - look for the actual heading\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n\n    // Wait for content to load\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check keyboard navigation\n    const buttons = screen.getAllByRole(\"button\");\n    if (buttons.length > 0 && buttons[0]) {\n      buttons[0].focus();\n      // Should be able to focus elements\n      expect(document.activeElement).toBe(buttons[0]);\n    }\n  });\n\n  it(\"handles responsive layout\", () => {\n    // Mock different viewport sizes\n    Object.defineProperty(window, \"innerWidth\", {\n      writable: true,\n      configurable: true,\n      value: 768,\n    });\n\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    // Check if layout renders properly on mobile\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n\n    // Verify responsive behavior exists\n    expect(window.innerWidth).toBe(768);\n  });\n\n  it(\"preserves scroll position on navigation\", async () => {\n    // Mock window.scrollTo and scrollY\n    const mockScrollTo = jest.fn();\n    Object.defineProperty(window, \"scrollTo\", {\n      value: mockScrollTo,\n      writable: true,\n      configurable: true,\n    });\n\n    Object.defineProperty(window, \"scrollY\", {\n      value: 0,\n      writable: true,\n      configurable: true,\n    });\n\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Simulate scroll down\n    mockScrollTo(0, 500);\n    Object.defineProperty(window, \"scrollY\", { value: 500, writable: true });\n\n    expect(mockScrollTo).toHaveBeenCalledWith(0, 500);\n    expect(window.scrollY).toBe(500);\n\n    // Verify scroll restoration capability exists\n    expect(typeof window.scrollTo).toBe(\"function\");\n  });\n\n  it(\"integrates with performance monitoring\", async () => {\n    // Mock performance.now for consistent timing\n    const mockPerformanceNow = jest.spyOn(performance, \"now\");\n    mockPerformanceNow.mockReturnValueOnce(0).mockReturnValueOnce(100);\n\n    render(\n      <IntegrationMockProviders>\n        <FeedPage />\n      </IntegrationMockProviders>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Verify performance monitoring is available\n    expect(typeof performance.now).toBe(\"function\");\n    expect(mockPerformanceNow).toHaveBeenCalled();\n\n    mockPerformanceNow.mockRestore();\n  });\n});\n"],"names":["jest","mock","LazyContentFeed","items","onLoadMore","hasMore","isLoadingMore","div","data-testid","map","item","id","h3","data","title","p","content","span","author","button","onClick","disabled","LazyPersonalizedRecommendations","limit","categories","join","useRealTimeUpdates","isConnected","connectionStatus","lastUpdate","subscribe","fn","unsubscribe","usePerformanceMonitoring","startMeasurement","endMeasurement","getMetrics","mockReturnValue","LoadingState","children","isLoading","error","skeleton","EmptyFeedState","onRefresh","h2","FeedFilters","postsService","getPosts","mockImplementation","Promise","resolve","getPost","createPost","updatePost","deletePost","topicsService","getTopics","mockResolvedValue","getTopic","createTopic","updateTopic","deleteTopic","mockUseRealTimeUpdates","mockUsePerformanceMonitoring","mockPostsService","mockTopicsService","mockFetch","global","fetch","describe","mockPosts","createMockPost","beforeEach","mockClear","ok","json","posts","total","it","render","IntegrationMockProviders","FeedPage","waitFor","expect","screen","getByTestId","toBeInTheDocument","getByText","user","userEvent","setup","mockResolvedValueOnce","loadMoreButton","getByRole","name","click","toHaveTextContent","toHaveBeenCalled","timeout","mockRejectedValueOnce","Error","buttons","getAllByRole","length","focus","document","activeElement","toBe","Object","defineProperty","window","writable","configurable","value","innerWidth","mockScrollTo","toHaveBeenCalledWith","scrollY","scrollTo","mockPerformanceNow","spyOn","performance","mockReturnValueOnce","now","mockRestore"],"mappings":"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"}