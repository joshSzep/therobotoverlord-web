c5dfe2fa8b7ff23580a1329a46320054
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock validation functions
const validateEmail = (email)=>{
    const errors = [];
    if (!email) {
        errors.push('Email is required');
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        errors.push('Please enter a valid email address');
    }
    return errors;
};
const validatePassword = (password)=>{
    const errors = [];
    if (!password) {
        errors.push('Password is required');
    } else if (password.length < 8) {
        errors.push('Password must be at least 8 characters long');
    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(password)) {
        errors.push('Password must contain at least one uppercase letter, one lowercase letter, and one number');
    }
    return errors;
};
const validateContent = (content)=>{
    const errors = [];
    if (!content) {
        errors.push('Content is required');
    } else if (content.length < 10) {
        errors.push('Content must be at least 10 characters long');
    } else if (content.length > 1000) {
        errors.push('Content must be less than 1000 characters');
    }
    return errors;
};
const validateTitle = (title)=>{
    const errors = [];
    if (!title) {
        errors.push('Title is required');
    } else if (title.length < 3) {
        errors.push('Title must be at least 3 characters long');
    } else if (title.length > 100) {
        errors.push('Title must be less than 100 characters');
    }
    return errors;
};
// Mock form component for testing
const TestForm = ({ onSubmit, initialData = {} })=>{
    const [formData, setFormData] = (0, _react.useState)(initialData || {});
    const [errors, setErrors] = (0, _react.useState)({});
    const handleSubmit = (e)=>{
        e.preventDefault();
        const newErrors = {};
        // Validate all fields that have values or are required
        newErrors.email = validateEmail(formData.email || '');
        newErrors.password = validatePassword(formData.password || '');
        newErrors.content = validateContent(formData.content || '');
        newErrors.title = validateTitle(formData.title || '');
        setErrors(newErrors);
        // Check if there are any errors
        const hasErrors = Object.values(newErrors).some((fieldErrors)=>fieldErrors.length > 0);
        if (!hasErrors) {
            onSubmit(formData);
        }
    };
    const handleChange = (field)=>(e)=>{
            setFormData({
                ...formData,
                [field]: e.target.value
            });
        };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        "data-testid": "test-form",
        onSubmit: handleSubmit,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "email",
                        children: "Email"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        id: "email",
                        name: "email",
                        type: "email",
                        value: formData.email || '',
                        onChange: handleChange('email'),
                        "aria-invalid": errors.email?.length > 0,
                        "aria-describedby": errors.email?.length > 0 ? 'email-errors' : undefined
                    }),
                    errors.email?.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        id: "email-errors",
                        role: "alert",
                        children: errors.email?.map((error, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                children: error
                            }, index))
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "password",
                        children: "Password"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        id: "password",
                        name: "password",
                        type: "password",
                        value: formData.password || '',
                        onChange: handleChange('password'),
                        "aria-invalid": errors.password?.length > 0,
                        "aria-describedby": errors.password?.length > 0 ? 'password-errors' : undefined
                    }),
                    errors.password?.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        id: "password-errors",
                        role: "alert",
                        children: errors.password.map((error, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                children: error
                            }, index))
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "title",
                        children: "Post Title"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        id: "title",
                        name: "title",
                        type: "text",
                        value: formData.title || '',
                        onChange: handleChange('title'),
                        "aria-invalid": errors.title?.length > 0,
                        "aria-describedby": errors.title?.length > 0 ? 'title-errors' : undefined
                    }),
                    errors.title?.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        id: "title-errors",
                        role: "alert",
                        children: errors.title.map((error, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                children: error
                            }, index))
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                        htmlFor: "content",
                        children: "Content"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                        id: "content",
                        name: "content",
                        value: formData.content || '',
                        onChange: handleChange('content'),
                        "aria-invalid": errors.content?.length > 0,
                        "aria-describedby": errors.content?.length > 0 ? 'content-errors' : undefined
                    }),
                    errors.content?.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        id: "content-errors",
                        role: "alert",
                        children: errors.content.map((error, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                children: error
                            }, index))
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "submit",
                children: "Submit"
            })
        ]
    });
};
describe('Form Validation', ()=>{
    describe('Email Validation', ()=>{
        it('should show error for empty email', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    email: ''
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Email is required')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should show error for invalid email format', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    email: 'invalid-email',
                    password: 'Password123',
                    title: 'Valid Title',
                    content: 'This is valid content that is long enough'
                }
            }));
            const form = _react1.screen.getByTestId('test-form');
            _react1.fireEvent.submit(form);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Please enter a valid email address')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should accept valid email', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    email: 'test@example.com',
                    password: 'Password123',
                    title: 'Valid Title',
                    content: 'This is valid content that is long enough'
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockSubmit).toHaveBeenCalled();
            });
        });
    });
    describe('Password Validation', ()=>{
        it('should show error for empty password', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    password: ''
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Password is required')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should show error for short password', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    password: '123'
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Password must be at least 8 characters long')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should show error for weak password', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    password: 'password'
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/Password must contain at least one uppercase letter/)).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should accept strong password', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    email: 'test@example.com',
                    password: 'Password123',
                    title: 'Valid Title',
                    content: 'This is valid content that is long enough'
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockSubmit).toHaveBeenCalled();
            });
        });
    });
    describe('Content Validation', ()=>{
        it('should show error for empty content', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    content: ''
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Content is required')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should show error for short content', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    content: 'short'
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Content must be at least 10 characters long')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should accept valid content', async ()=>{
            const mockSubmit = jest.fn();
            const validContent = 'This is a valid content that is long enough';
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    email: 'test@example.com',
                    password: 'Password123',
                    title: 'Valid Title',
                    content: validContent
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockSubmit).toHaveBeenCalled();
            });
        });
    });
    describe('Title Validation', ()=>{
        it('should show error for empty title', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    title: ''
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Title is required')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should show error for short title', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    title: 'Hi'
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('Title must be at least 3 characters long')).toBeInTheDocument();
            });
            expect(mockSubmit).not.toHaveBeenCalled();
        });
        it('should accept valid title', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit,
                initialData: {
                    email: 'test@example.com',
                    password: 'Password123',
                    title: 'Valid Title',
                    content: 'This is valid content that is long enough'
                }
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockSubmit).toHaveBeenCalled();
            });
        });
    });
    describe('Form Interaction', ()=>{
        it('should update form data when typing', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit
            }));
            const emailInput = _react1.screen.getByLabelText(/email/i);
            await _userevent.default.type(emailInput, 'test@example.com');
            expect(emailInput).toHaveValue('test@example.com');
        });
        it('should validate on submit', async ()=>{
            const mockSubmit = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestForm, {
                onSubmit: mockSubmit
            }));
            const submitButton = _react1.screen.getByRole('button', {
                name: /submit/i
            });
            _react1.fireEvent.click(submitButton);
            // Should not call onSubmit with empty form
            expect(mockSubmit).not.toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,