5144bbb659f3a0e56e3198d9111d573f
"use strict";

/* istanbul ignore next */
function cov_fom302cu3() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-posts.xml/route.ts";
  var hash = "8e9699bf6a20654a9f92090dce03df3dd508b3fc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-posts.xml/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 83
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "6": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "7": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "8": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "9": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "10": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 64
        }
      },
      "11": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 18
          }
        },
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        loc: {
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 44,
            column: 9
          }
        },
        line: 39
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 52
          }
        }, {
          start: {
            line: 13,
            column: 56
          },
          end: {
            line: 13,
            column: 83
          }
        }],
        line: 13
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-posts.xml/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\n\n// Posts sitemap - dynamic content\nexport async function GET() {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  \n  try {\n    // In a real implementation, fetch posts from your database\n    // For now, we'll create a placeholder structure\n    const posts = [\n      {\n        id: '1',\n        slug: 'welcome-to-robot-overlord',\n        updatedAt: new Date().toISOString(),\n        priority: '0.8'\n      },\n      {\n        id: '2', \n        slug: 'ai-future-predictions',\n        updatedAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago\n        priority: '0.7'\n      },\n      {\n        id: '3',\n        slug: 'machine-learning-basics',\n        updatedAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago\n        priority: '0.6'\n      }\n    ];\n\n    const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${posts.map(post => `  <url>\n    <loc>${baseUrl}/posts/${post.slug}</loc>\n    <lastmod>${post.updatedAt}</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>${post.priority}</priority>\n  </url>`).join('\\n')}\n</urlset>`;\n\n    return new NextResponse(sitemap, {\n      headers: {\n        'Content-Type': 'application/xml',\n        'Cache-Control': 'public, max-age=1800, s-maxage=1800' // 30 minutes cache\n      }\n    });\n  } catch (error) {\n    console.error('Error generating posts sitemap:', error);\n    return new NextResponse('Error generating sitemap', { status: 500 });\n  }\n}\n"],
      names: ["GET", "baseUrl", "process", "env", "NEXT_PUBLIC_SITE_URL", "posts", "id", "slug", "updatedAt", "Date", "toISOString", "priority", "now", "sitemap", "map", "post", "join", "NextResponse", "headers", "error", "console", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;AAGtB,eAAeA;IACpB,MAAMC,UAAUC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;IAEpD,IAAI;QACF,2DAA2D;QAC3D,gDAAgD;QAChD,MAAMC,QAAQ;YACZ;gBACEC,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,OAAOC,WAAW;gBACjCC,UAAU;YACZ;YACA;gBACEL,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,KAAKA,KAAKG,GAAG,KAAK,UAAUF,WAAW;gBACtDC,UAAU;YACZ;YACA;gBACEL,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,KAAKA,KAAKG,GAAG,KAAK,WAAWF,WAAW;gBACvDC,UAAU;YACZ;SACD;QAED,MAAME,UAAU,CAAC;;AAErB,EAAER,MAAMS,GAAG,CAACC,CAAAA,OAAQ,CAAC;SACZ,EAAEd,QAAQ,OAAO,EAAEc,KAAKR,IAAI,CAAC;aACzB,EAAEQ,KAAKP,SAAS,CAAC;;cAEhB,EAAEO,KAAKJ,QAAQ,CAAC;QACtB,CAAC,EAAEK,IAAI,CAAC,MAAM;SACb,CAAC;QAEN,OAAO,IAAIC,oBAAY,CAACJ,SAAS;YAC/BK,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,sCAAsC,mBAAmB;YAC5E;QACF;IACF,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,mCAAmCA;QACjD,OAAO,IAAIF,oBAAY,CAAC,4BAA4B;YAAEI,QAAQ;QAAI;IACpE;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e9699bf6a20654a9f92090dce03df3dd508b3fc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fom302cu3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fom302cu3();
cov_fom302cu3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_fom302cu3().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_fom302cu3().f[0]++;
    cov_fom302cu3().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_fom302cu3().s[3]++, require("next/server"));
async function GET() {
  /* istanbul ignore next */
  cov_fom302cu3().f[1]++;
  const baseUrl =
  /* istanbul ignore next */
  (cov_fom302cu3().s[4]++,
  /* istanbul ignore next */
  (cov_fom302cu3().b[0][0]++, process.env.NEXT_PUBLIC_SITE_URL) ||
  /* istanbul ignore next */
  (cov_fom302cu3().b[0][1]++, 'https://robotoverlord.com'));
  /* istanbul ignore next */
  cov_fom302cu3().s[5]++;
  try {
    // In a real implementation, fetch posts from your database
    // For now, we'll create a placeholder structure
    const posts =
    /* istanbul ignore next */
    (cov_fom302cu3().s[6]++, [{
      id: '1',
      slug: 'welcome-to-robot-overlord',
      updatedAt: new Date().toISOString(),
      priority: '0.8'
    }, {
      id: '2',
      slug: 'ai-future-predictions',
      updatedAt: new Date(Date.now() - 86400000).toISOString(),
      priority: '0.7'
    }, {
      id: '3',
      slug: 'machine-learning-basics',
      updatedAt: new Date(Date.now() - 172800000).toISOString(),
      priority: '0.6'
    }]);
    const sitemap =
    /* istanbul ignore next */
    (cov_fom302cu3().s[7]++, `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${posts.map(post => {
      /* istanbul ignore next */
      cov_fom302cu3().f[2]++;
      cov_fom302cu3().s[8]++;
      return `  <url>
    <loc>${baseUrl}/posts/${post.slug}</loc>
    <lastmod>${post.updatedAt}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>${post.priority}</priority>
  </url>`;
    }).join('\n')}
</urlset>`);
    /* istanbul ignore next */
    cov_fom302cu3().s[9]++;
    return new _server.NextResponse(sitemap, {
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=1800, s-maxage=1800' // 30 minutes cache
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_fom302cu3().s[10]++;
    console.error('Error generating posts sitemap:', error);
    /* istanbul ignore next */
    cov_fom302cu3().s[11]++;
    return new _server.NextResponse('Error generating sitemap', {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZm9tMzAyY3UzIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiR0VUIiwiZiIsImJhc2VVcmwiLCJiIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NJVEVfVVJMIiwicG9zdHMiLCJpZCIsInNsdWciLCJ1cGRhdGVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJwcmlvcml0eSIsIm5vdyIsInNpdGVtYXAiLCJtYXAiLCJwb3N0Iiwiam9pbiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJoZWFkZXJzIiwiZXJyb3IiLCJjb25zb2xlIiwic3RhdHVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL2pvc2hzemVwL2NvZGUvdGhlcm9ib3RvdmVybG9yZC1tb25vL3RoZXJvYm90b3ZlcmxvcmQtd2ViL3NyYy9hcHAvc2l0ZW1hcC1wb3N0cy54bWwvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG4vLyBQb3N0cyBzaXRlbWFwIC0gZHluYW1pYyBjb250ZW50XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICBjb25zdCBiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU0lURV9VUkwgfHwgJ2h0dHBzOi8vcm9ib3RvdmVybG9yZC5jb20nO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIGZldGNoIHBvc3RzIGZyb20geW91ciBkYXRhYmFzZVxuICAgIC8vIEZvciBub3csIHdlJ2xsIGNyZWF0ZSBhIHBsYWNlaG9sZGVyIHN0cnVjdHVyZVxuICAgIGNvbnN0IHBvc3RzID0gW1xuICAgICAge1xuICAgICAgICBpZDogJzEnLFxuICAgICAgICBzbHVnOiAnd2VsY29tZS10by1yb2JvdC1vdmVybG9yZCcsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBwcmlvcml0eTogJzAuOCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnMicsIFxuICAgICAgICBzbHVnOiAnYWktZnV0dXJlLXByZWRpY3Rpb25zJyxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gODY0MDAwMDApLnRvSVNPU3RyaW5nKCksIC8vIDEgZGF5IGFnb1xuICAgICAgICBwcmlvcml0eTogJzAuNydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnMycsXG4gICAgICAgIHNsdWc6ICdtYWNoaW5lLWxlYXJuaW5nLWJhc2ljcycsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDE3MjgwMDAwMCkudG9JU09TdHJpbmcoKSwgLy8gMiBkYXlzIGFnb1xuICAgICAgICBwcmlvcml0eTogJzAuNidcbiAgICAgIH1cbiAgICBdO1xuXG4gICAgY29uc3Qgc2l0ZW1hcCA9IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cbjx1cmxzZXQgeG1sbnM9XCJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45XCI+XG4ke3Bvc3RzLm1hcChwb3N0ID0+IGAgIDx1cmw+XG4gICAgPGxvYz4ke2Jhc2VVcmx9L3Bvc3RzLyR7cG9zdC5zbHVnfTwvbG9jPlxuICAgIDxsYXN0bW9kPiR7cG9zdC51cGRhdGVkQXR9PC9sYXN0bW9kPlxuICAgIDxjaGFuZ2VmcmVxPndlZWtseTwvY2hhbmdlZnJlcT5cbiAgICA8cHJpb3JpdHk+JHtwb3N0LnByaW9yaXR5fTwvcHJpb3JpdHk+XG4gIDwvdXJsPmApLmpvaW4oJ1xcbicpfVxuPC91cmxzZXQ+YDtcblxuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKHNpdGVtYXAsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94bWwnLFxuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICdwdWJsaWMsIG1heC1hZ2U9MTgwMCwgcy1tYXhhZ2U9MTgwMCcgLy8gMzAgbWludXRlcyBjYWNoZVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgcG9zdHMgc2l0ZW1hcDonLCBlcnJvcik7XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoJ0Vycm9yIGdlbmVyYXRpbmcgc2l0ZW1hcCcsIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBUUk7SUFBQUEsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsYUFBQTtBQUFBQSxhQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFMa0I7Ozs7OztXQUFBQyxHQUFBOzs7OztpQ0FITztBQUd0QixlQUFlQSxJQUFBO0VBQUE7RUFBQUgsYUFBQSxHQUFBSSxDQUFBO0VBQ3BCLE1BQU1DLE9BQUE7RUFBQTtFQUFBLENBQUFMLGFBQUEsR0FBQUUsQ0FBQTtFQUFVO0VBQUEsQ0FBQUYsYUFBQSxHQUFBTSxDQUFBLFVBQUFDLE9BQUEsQ0FBUUMsR0FBRyxDQUFDQyxvQkFBb0I7RUFBQTtFQUFBLENBQUFULGFBQUEsR0FBQU0sQ0FBQSxVQUFJO0VBQUE7RUFBQU4sYUFBQSxHQUFBRSxDQUFBO0VBRXBELElBQUk7SUFDRjtJQUNBO0lBQ0EsTUFBTVEsS0FBQTtJQUFBO0lBQUEsQ0FBQVYsYUFBQSxHQUFBRSxDQUFBLE9BQVEsQ0FDWjtNQUNFUyxFQUFBLEVBQUk7TUFDSkMsSUFBQSxFQUFNO01BQ05DLFNBQUEsRUFBVyxJQUFJQyxJQUFBLEdBQU9DLFdBQVc7TUFDakNDLFFBQUEsRUFBVTtJQUNaLEdBQ0E7TUFDRUwsRUFBQSxFQUFJO01BQ0pDLElBQUEsRUFBTTtNQUNOQyxTQUFBLEVBQVcsSUFBSUMsSUFBQSxDQUFLQSxJQUFBLENBQUtHLEdBQUcsS0FBSyxVQUFVRixXQUFXO01BQ3REQyxRQUFBLEVBQVU7SUFDWixHQUNBO01BQ0VMLEVBQUEsRUFBSTtNQUNKQyxJQUFBLEVBQU07TUFDTkMsU0FBQSxFQUFXLElBQUlDLElBQUEsQ0FBS0EsSUFBQSxDQUFLRyxHQUFHLEtBQUssV0FBV0YsV0FBVztNQUN2REMsUUFBQSxFQUFVO0lBQ1osRUFDRDtJQUVELE1BQU1FLE9BQUE7SUFBQTtJQUFBLENBQUFsQixhQUFBLEdBQUFFLENBQUEsT0FBVTs7QUFFcEIsRUFBRVEsS0FBQSxDQUFNUyxHQUFHLENBQUNDLElBQUEsSUFBUTtNQUFBO01BQUFwQixhQUFBLEdBQUFJLENBQUE7TUFBQUosYUFBQSxHQUFBRSxDQUFBO01BQUE7V0FDVEcsT0FBQSxVQUFpQmUsSUFBQSxDQUFLUixJQUFJO2VBQ3RCUSxJQUFBLENBQUtQLFNBQVM7O2dCQUViTyxJQUFBLENBQUtKLFFBQVE7U0FDcEI7SUFBRCxDQUFDLEVBQUVLLElBQUksQ0FBQztVQUNOO0lBQUE7SUFBQXJCLGFBQUEsR0FBQUUsQ0FBQTtJQUVOLE9BQU8sSUFBSW9CLE9BQUEsQ0FBQUMsWUFBWSxDQUFDTCxPQUFBLEVBQVM7TUFDL0JNLE9BQUEsRUFBUztRQUNQLGdCQUFnQjtRQUNoQixpQkFBaUIsc0NBQXNDO01BQ3pEO0lBQ0Y7RUFDRixFQUFFLE9BQU9DLEtBQUEsRUFBTztJQUFBO0lBQUF6QixhQUFBLEdBQUFFLENBQUE7SUFDZHdCLE9BQUEsQ0FBUUQsS0FBSyxDQUFDLG1DQUFtQ0EsS0FBQTtJQUFBO0lBQUF6QixhQUFBLEdBQUFFLENBQUE7SUFDakQsT0FBTyxJQUFJb0IsT0FBQSxDQUFBQyxZQUFZLENBQUMsNEJBQTRCO01BQUVJLE1BQUEsRUFBUTtJQUFJO0VBQ3BFO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=