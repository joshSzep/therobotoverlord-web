3f5290b6dd1d5913b987eb3af47e75e2
"use strict";

/* istanbul ignore next */
function cov_4zrvk7ecl() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/logs/route.ts";
  var hash = "dfd3f4ad52dfa717a47c89f56800ecd96671cdc4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/logs/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "5": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "7": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 21,
          column: 15
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 40
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 27,
          column: 11
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 61
        }
      },
      "11": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "12": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "13": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 45,
          column: 35
        }
      },
      "14": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 83
        }
      },
      "15": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "16": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "17": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "18": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "19": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 76
        }
      },
      "20": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "21": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "processLogEntry",
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 30
          }
        },
        loc: {
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 37
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 31
          }
        }, {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 52
          }
        }, {
          start: {
            line: 16,
            column: 56
          },
          end: {
            line: 16,
            column: 84
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 26
          },
          end: {
            line: 45,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 40,
            column: 26
          },
          end: {
            line: 45,
            column: 22
          }
        }, {
          start: {
            line: 45,
            column: 26
          },
          end: {
            line: 45,
            column: 35
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/logs/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\ninterface LogEntry {\n  timestamp: string\n  level: number\n  message: string\n  context?: {\n    userId?: string\n    sessionId?: string\n    requestId?: string\n    component?: string\n    action?: string\n    metadata?: Record<string, any>\n  }\n  error?: {\n    name: string\n    message: string\n    stack?: string\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const logEntry: LogEntry = await request.json()\n    \n    // Validate log entry\n    if (!logEntry.timestamp || !logEntry.message || logEntry.level === undefined) {\n      return NextResponse.json(\n        { error: 'Invalid log entry format' },\n        { status: 400 }\n      )\n    }\n    \n    // Process log entry\n    await processLogEntry(logEntry)\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Failed to process log entry:', error)\n    return NextResponse.json(\n      { error: 'Failed to process log entry' },\n      { status: 500 }\n    )\n  }\n}\n\nasync function processLogEntry(entry: LogEntry): Promise<void> {\n  // In development, just log to console\n  if (process.env.NODE_ENV === 'development') {\n    const levelName = ['ERROR', 'WARN', 'INFO', 'DEBUG'][entry.level] || 'UNKNOWN'\n    console.log(`[${levelName}] ${entry.message}`, entry.context, entry.error)\n    return\n  }\n  \n  // In production, you would:\n  // 1. Store in database for analysis\n  // 2. Send to external logging service (DataDog, Splunk, etc.)\n  // 3. Trigger alerts for critical errors\n  // 4. Aggregate metrics for monitoring\n  \n  // Example: Send to external logging service\n  if (process.env.LOGGING_SERVICE_URL) {\n    try {\n      await fetch(process.env.LOGGING_SERVICE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.LOGGING_SERVICE_TOKEN}`,\n        },\n        body: JSON.stringify({\n          ...entry,\n          service: 'therobotoverlord-web',\n          environment: process.env.NEXT_PUBLIC_APP_ENV,\n          version: process.env.NEXT_PUBLIC_APP_VERSION,\n        }),\n      })\n    } catch (error) {\n      console.error('Failed to send log to external service:', error)\n    }\n  }\n  \n  // Store critical errors for immediate attention\n  if (entry.level === 0) { // ERROR level\n    // Store in database or send immediate alert\n    console.error('CRITICAL ERROR:', entry)\n  }\n}\n"],
      names: ["POST", "request", "logEntry", "json", "timestamp", "message", "level", "undefined", "NextResponse", "error", "status", "processLogEntry", "success", "console", "entry", "process", "env", "NODE_ENV", "levelName", "log", "context", "LOGGING_SERVICE_URL", "fetch", "method", "headers", "LOGGING_SERVICE_TOKEN", "body", "JSON", "stringify", "service", "environment", "NEXT_PUBLIC_APP_ENV", "version", "NEXT_PUBLIC_APP_VERSION"],
      mappings: ";;;;+BAqBsBA;;;eAAAA;;;wBArBoB;AAqBnC,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,WAAqB,MAAMD,QAAQE,IAAI;QAE7C,qBAAqB;QACrB,IAAI,CAACD,SAASE,SAAS,IAAI,CAACF,SAASG,OAAO,IAAIH,SAASI,KAAK,KAAKC,WAAW;YAC5E,OAAOC,oBAAY,CAACL,IAAI,CACtB;gBAAEM,OAAO;YAA2B,GACpC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAMC,gBAAgBT;QAEtB,OAAOM,oBAAY,CAACL,IAAI,CAAC;YAAES,SAAS;QAAK;IAC3C,EAAE,OAAOH,OAAO;QACdI,QAAQJ,KAAK,CAAC,gCAAgCA;QAC9C,OAAOD,oBAAY,CAACL,IAAI,CACtB;YAAEM,OAAO;QAA8B,GACvC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAEA,eAAeC,gBAAgBG,KAAe;IAC5C,sCAAsC;IACtC,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,eAAe;QAC1C,MAAMC,YAAY;YAAC;YAAS;YAAQ;YAAQ;SAAQ,CAACJ,MAAMR,KAAK,CAAC,IAAI;QACrEO,QAAQM,GAAG,CAAC,CAAC,CAAC,EAAED,UAAU,EAAE,EAAEJ,MAAMT,OAAO,EAAE,EAAES,MAAMM,OAAO,EAAEN,MAAML,KAAK;QACzE;IACF;IAEA,4BAA4B;IAC5B,oCAAoC;IACpC,8DAA8D;IAC9D,wCAAwC;IACxC,sCAAsC;IAEtC,4CAA4C;IAC5C,IAAIM,QAAQC,GAAG,CAACK,mBAAmB,EAAE;QACnC,IAAI;YACF,MAAMC,MAAMP,QAAQC,GAAG,CAACK,mBAAmB,EAAE;gBAC3CE,QAAQ;gBACRC,SAAS;oBACP,gBAAgB;oBAChB,iBAAiB,CAAC,OAAO,EAAET,QAAQC,GAAG,CAACS,qBAAqB,EAAE;gBAChE;gBACAC,MAAMC,KAAKC,SAAS,CAAC;oBACnB,GAAGd,KAAK;oBACRe,SAAS;oBACTC,aAAaf,QAAQC,GAAG,CAACe,mBAAmB;oBAC5CC,SAASjB,QAAQC,GAAG,CAACiB,uBAAuB;gBAC9C;YACF;QACF,EAAE,OAAOxB,OAAO;YACdI,QAAQJ,KAAK,CAAC,2CAA2CA;QAC3D;IACF;IAEA,gDAAgD;IAChD,IAAIK,MAAMR,KAAK,KAAK,GAAG;QACrB,4CAA4C;QAC5CO,QAAQJ,KAAK,CAAC,mBAAmBK;IACnC;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dfd3f4ad52dfa717a47c89f56800ecd96671cdc4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_4zrvk7ecl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_4zrvk7ecl();
cov_4zrvk7ecl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_4zrvk7ecl().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_4zrvk7ecl().f[0]++;
    cov_4zrvk7ecl().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_4zrvk7ecl().s[3]++, require("next/server"));
async function POST(request) {
  /* istanbul ignore next */
  cov_4zrvk7ecl().f[1]++;
  cov_4zrvk7ecl().s[4]++;
  try {
    const logEntry =
    /* istanbul ignore next */
    (cov_4zrvk7ecl().s[5]++, await request.json());
    // Validate log entry
    /* istanbul ignore next */
    cov_4zrvk7ecl().s[6]++;
    if (
    /* istanbul ignore next */
    (cov_4zrvk7ecl().b[1][0]++, !logEntry.timestamp) ||
    /* istanbul ignore next */
    (cov_4zrvk7ecl().b[1][1]++, !logEntry.message) ||
    /* istanbul ignore next */
    (cov_4zrvk7ecl().b[1][2]++, logEntry.level === undefined)) {
      /* istanbul ignore next */
      cov_4zrvk7ecl().b[0][0]++;
      cov_4zrvk7ecl().s[7]++;
      return _server.NextResponse.json({
        error: 'Invalid log entry format'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_4zrvk7ecl().b[0][1]++;
    }
    // Process log entry
    cov_4zrvk7ecl().s[8]++;
    await processLogEntry(logEntry);
    /* istanbul ignore next */
    cov_4zrvk7ecl().s[9]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_4zrvk7ecl().s[10]++;
    console.error('Failed to process log entry:', error);
    /* istanbul ignore next */
    cov_4zrvk7ecl().s[11]++;
    return _server.NextResponse.json({
      error: 'Failed to process log entry'
    }, {
      status: 500
    });
  }
}
async function processLogEntry(entry) {
  /* istanbul ignore next */
  cov_4zrvk7ecl().f[2]++;
  cov_4zrvk7ecl().s[12]++;
  // In development, just log to console
  if (process.env.NODE_ENV === 'development') {
    /* istanbul ignore next */
    cov_4zrvk7ecl().b[2][0]++;
    const levelName =
    /* istanbul ignore next */
    (cov_4zrvk7ecl().s[13]++,
    /* istanbul ignore next */
    (cov_4zrvk7ecl().b[3][0]++, ['ERROR', 'WARN', 'INFO', 'DEBUG'][entry.level]) ||
    /* istanbul ignore next */
    (cov_4zrvk7ecl().b[3][1]++, 'UNKNOWN'));
    /* istanbul ignore next */
    cov_4zrvk7ecl().s[14]++;
    console.log(`[${levelName}] ${entry.message}`, entry.context, entry.error);
    /* istanbul ignore next */
    cov_4zrvk7ecl().s[15]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_4zrvk7ecl().b[2][1]++;
  }
  // In production, you would:
  // 1. Store in database for analysis
  // 2. Send to external logging service (DataDog, Splunk, etc.)
  // 3. Trigger alerts for critical errors
  // 4. Aggregate metrics for monitoring
  // Example: Send to external logging service
  cov_4zrvk7ecl().s[16]++;
  if (process.env.LOGGING_SERVICE_URL) {
    /* istanbul ignore next */
    cov_4zrvk7ecl().b[4][0]++;
    cov_4zrvk7ecl().s[17]++;
    try {
      /* istanbul ignore next */
      cov_4zrvk7ecl().s[18]++;
      await fetch(process.env.LOGGING_SERVICE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.LOGGING_SERVICE_TOKEN}`
        },
        body: JSON.stringify({
          ...entry,
          service: 'therobotoverlord-web',
          environment: process.env.NEXT_PUBLIC_APP_ENV,
          version: process.env.NEXT_PUBLIC_APP_VERSION
        })
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_4zrvk7ecl().s[19]++;
      console.error('Failed to send log to external service:', error);
    }
  } else
  /* istanbul ignore next */
  {
    cov_4zrvk7ecl().b[4][1]++;
  }
  // Store critical errors for immediate attention
  cov_4zrvk7ecl().s[20]++;
  if (entry.level === 0) {
    /* istanbul ignore next */
    cov_4zrvk7ecl().b[5][0]++;
    cov_4zrvk7ecl().s[21]++;
    // Store in database or send immediate alert
    console.error('CRITICAL ERROR:', entry);
  } else
  /* istanbul ignore next */
  {
    cov_4zrvk7ecl().b[5][1]++;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,