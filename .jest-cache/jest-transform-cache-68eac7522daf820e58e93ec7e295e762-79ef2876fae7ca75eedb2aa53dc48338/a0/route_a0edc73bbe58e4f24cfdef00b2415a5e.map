{"version":3,"names":["cov_4zrvk7ecl","actualCoverage","s","POST","request","f","logEntry","json","b","timestamp","message","level","undefined","_server","NextResponse","error","status","processLogEntry","success","console","entry","process","env","NODE_ENV","levelName","log","context","LOGGING_SERVICE_URL","fetch","method","headers","LOGGING_SERVICE_TOKEN","body","JSON","stringify","service","environment","NEXT_PUBLIC_APP_ENV","version","NEXT_PUBLIC_APP_VERSION"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/logs/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\ninterface LogEntry {\n  timestamp: string\n  level: number\n  message: string\n  context?: {\n    userId?: string\n    sessionId?: string\n    requestId?: string\n    component?: string\n    action?: string\n    metadata?: Record<string, any>\n  }\n  error?: {\n    name: string\n    message: string\n    stack?: string\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const logEntry: LogEntry = await request.json()\n    \n    // Validate log entry\n    if (!logEntry.timestamp || !logEntry.message || logEntry.level === undefined) {\n      return NextResponse.json(\n        { error: 'Invalid log entry format' },\n        { status: 400 }\n      )\n    }\n    \n    // Process log entry\n    await processLogEntry(logEntry)\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Failed to process log entry:', error)\n    return NextResponse.json(\n      { error: 'Failed to process log entry' },\n      { status: 500 }\n    )\n  }\n}\n\nasync function processLogEntry(entry: LogEntry): Promise<void> {\n  // In development, just log to console\n  if (process.env.NODE_ENV === 'development') {\n    const levelName = ['ERROR', 'WARN', 'INFO', 'DEBUG'][entry.level] || 'UNKNOWN'\n    console.log(`[${levelName}] ${entry.message}`, entry.context, entry.error)\n    return\n  }\n  \n  // In production, you would:\n  // 1. Store in database for analysis\n  // 2. Send to external logging service (DataDog, Splunk, etc.)\n  // 3. Trigger alerts for critical errors\n  // 4. Aggregate metrics for monitoring\n  \n  // Example: Send to external logging service\n  if (process.env.LOGGING_SERVICE_URL) {\n    try {\n      await fetch(process.env.LOGGING_SERVICE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.LOGGING_SERVICE_TOKEN}`,\n        },\n        body: JSON.stringify({\n          ...entry,\n          service: 'therobotoverlord-web',\n          environment: process.env.NEXT_PUBLIC_APP_ENV,\n          version: process.env.NEXT_PUBLIC_APP_VERSION,\n        }),\n      })\n    } catch (error) {\n      console.error('Failed to send log to external service:', error)\n    }\n  }\n  \n  // Store critical errors for immediate attention\n  if (entry.level === 0) { // ERROR level\n    // Store in database or send immediate alert\n    console.error('CRITICAL ERROR:', entry)\n  }\n}\n"],"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","ignoreList":[]}