{"version":3,"names":["cov_25304njhl1","actualCoverage","s","default","f","_default","extractKeywords","generateBreadcrumbs","generateCanonicalUrl","generateOpenGraphImage","generateRSSFeed","generateSlug","trackSEOMetrics","truncateDescription","validateMetaTags","title","toLowerCase","replace","trim","text","maxLength","b","cleanText","length","truncated","substring","lastSpace","lastIndexOf","content","maxKeywords","cleanContent","stopWords","Set","words","split","filter","word","has","wordCount","reduce","acc","Object","entries","sort","a","slice","map","path","baseUrl","base","process","env","NEXT_PUBLIC_SITE_URL","cleanPath","startsWith","description","type","images","article","topic","profile","meta","warnings","push","keywords","isValid","pathname","paths","Boolean","breadcrumbs","name","url","currentPath","forEach","index","charAt","toUpperCase","join","posts","now","Date","toUTCString","rssItems","post","author","publishedAt","slug","page","metrics","NODE_ENV","console","log"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/utils/seo.ts"],"sourcesContent":["'use client';\n\n// SEO utility functions\nexport const generateSlug = (title: string): string => {\n  return title\n    .toLowerCase()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single\n    .trim();\n};\n\nexport const truncateDescription = (text: string, maxLength: number = 160): string => {\n  // Remove HTML tags\n  const cleanText = text.replace(/<[^>]*>/g, '');\n  \n  if (cleanText.length <= maxLength) {\n    return cleanText;\n  }\n  \n  // Find the last space before maxLength to avoid cutting words\n  const truncated = cleanText.substring(0, maxLength);\n  const lastSpace = truncated.lastIndexOf(' ');\n  \n  return lastSpace > 0 \n    ? truncated.substring(0, lastSpace) + '...'\n    : truncated + '...';\n};\n\nexport const extractKeywords = (content: string, maxKeywords: number = 10): string[] => {\n  // Remove HTML tags and convert to lowercase\n  const cleanContent = content.replace(/<[^>]*>/g, '').toLowerCase();\n  \n  // Common stop words to filter out\n  const stopWords = new Set([\n    'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with',\n    'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had',\n    'do', 'does', 'did', 'will', 'would', 'should', 'could', 'can', 'may', 'might',\n    'this', 'that', 'these', 'those', 'i', 'you', 'he', 'she', 'it', 'we', 'they'\n  ]);\n  \n  // Extract words and count frequency\n  const words = cleanContent\n    .split(/\\W+/)\n    .filter(word => word.length > 3 && !stopWords.has(word));\n  \n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  // Sort by frequency and return top keywords\n  return Object.entries(wordCount)\n    .sort(([, a], [, b]) => b - a)\n    .slice(0, maxKeywords)\n    .map(([word]) => word);\n};\n\nexport const generateCanonicalUrl = (path: string, baseUrl?: string): string => {\n  const base = baseUrl || process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return `${base}${cleanPath}`;\n};\n\nexport const generateOpenGraphImage = (\n  title: string,\n  description?: string,\n  type: 'article' | 'topic' | 'profile' | 'default' = 'default'\n): string => {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  \n  // In a real implementation, you might generate dynamic OG images\n  // For now, return appropriate static images based on type\n  const images = {\n    article: '/images/og-article.png',\n    topic: '/images/og-topic.png',\n    profile: '/images/og-profile.png',\n    default: '/images/og-default.png'\n  };\n  \n  return `${baseUrl}${images[type]}`;\n};\n\nexport const validateMetaTags = (meta: {\n  title?: string;\n  description?: string;\n  keywords?: string[];\n}): { isValid: boolean; warnings: string[] } => {\n  const warnings: string[] = [];\n  \n  // Title validation\n  if (!meta.title) {\n    warnings.push('Title is missing');\n  } else if (meta.title.length < 30) {\n    warnings.push('Title is too short (recommended: 30-60 characters)');\n  } else if (meta.title.length > 60) {\n    warnings.push('Title is too long (recommended: 30-60 characters)');\n  }\n  \n  // Description validation\n  if (!meta.description) {\n    warnings.push('Description is missing');\n  } else if (meta.description.length < 120) {\n    warnings.push('Description is too short (recommended: 120-160 characters)');\n  } else if (meta.description.length > 160) {\n    warnings.push('Description is too long (recommended: 120-160 characters)');\n  }\n  \n  // Keywords validation\n  if (!meta.keywords || meta.keywords.length === 0) {\n    warnings.push('Keywords are missing');\n  } else if (meta.keywords.length > 10) {\n    warnings.push('Too many keywords (recommended: 5-10 keywords)');\n  }\n  \n  return {\n    isValid: warnings.length === 0,\n    warnings\n  };\n};\n\nexport const generateBreadcrumbs = (pathname: string): Array<{\n  name: string;\n  url: string;\n}> => {\n  const paths = pathname.split('/').filter(Boolean);\n  const breadcrumbs = [{ name: 'Home', url: '/' }];\n  \n  let currentPath = '';\n  \n  paths.forEach((path, index) => {\n    currentPath += `/${path}`;\n    \n    // Convert path segments to readable names\n    const name = path\n      .split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n    \n    breadcrumbs.push({\n      name,\n      url: currentPath\n    });\n  });\n  \n  return breadcrumbs;\n};\n\nexport const generateRSSFeed = async (posts: Array<{\n  title: string;\n  description: string;\n  content: string;\n  author: string;\n  publishedAt: string;\n  slug: string;\n}>): Promise<string> => {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  const now = new Date().toUTCString();\n  \n  const rssItems = posts.map(post => `\n    <item>\n      <title><![CDATA[${post.title}]]></title>\n      <description><![CDATA[${post.description}]]></description>\n      <content:encoded><![CDATA[${post.content}]]></content:encoded>\n      <author>${post.author}</author>\n      <pubDate>${new Date(post.publishedAt).toUTCString()}</pubDate>\n      <link>${baseUrl}/posts/${post.slug}</link>\n      <guid isPermaLink=\"true\">${baseUrl}/posts/${post.slug}</guid>\n    </item>\n  `).join('');\n  \n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n  <channel>\n    <title>The Robot Overlord</title>\n    <description>AI-powered community platform for technology discussions and insights</description>\n    <link>${baseUrl}</link>\n    <language>en-US</language>\n    <lastBuildDate>${now}</lastBuildDate>\n    <atom:link href=\"${baseUrl}/feed.xml\" rel=\"self\" type=\"application/rss+xml\"/>\n    ${rssItems}\n  </channel>\n</rss>`;\n};\n\n// SEO performance tracking\nexport const trackSEOMetrics = (page: string, metrics: {\n  loadTime: number;\n  interactionTime: number;\n  cumulativeLayoutShift: number;\n  largestContentfulPaint: number;\n}) => {\n  // In production, send to analytics service\n  if (process.env.NODE_ENV === 'production') {\n    console.log('SEO Metrics for', page, metrics);\n    // Example: Send to Google Analytics, Adobe Analytics, etc.\n  }\n};\n\nexport default {\n  generateSlug,\n  truncateDescription,\n  extractKeywords,\n  generateCanonicalUrl,\n  generateOpenGraphImage,\n  validateMetaTags,\n  generateBreadcrumbs,\n  generateRSSFeed,\n  trackSEOMetrics\n};\n"],"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","ignoreList":[]}