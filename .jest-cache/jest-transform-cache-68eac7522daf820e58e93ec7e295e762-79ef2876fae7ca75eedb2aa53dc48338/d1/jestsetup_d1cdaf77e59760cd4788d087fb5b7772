7598fb3a7aa77177f68718d52931229f
"use strict";
// Mock Next.js router
jest.mock('next/navigation', ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn()
            };
        },
        useSearchParams () {
            return new URLSearchParams();
        },
        usePathname () {
            return '/';
        }
    }));
// Mock Next.js Image component
jest.mock('next/image', ()=>({
        __esModule: true,
        default: (props)=>{
            // eslint-disable-next-line @next/next/no-img-element
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                ...props
            });
        }
    }));
// Mock API client
jest.mock('@/lib/api-client', ()=>({
        apiClient: {
            get: jest.fn(),
            post: jest.fn(),
            put: jest.fn(),
            delete: jest.fn(),
            setAuthToken: jest.fn(),
            clearAuthToken: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.localStorage = localStorageMock;
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;
// Mock fetch
global.fetch = jest.fn();
// Mock console methods to reduce noise in tests
global.console = {
    ...console,
    // Uncomment to ignore specific console methods
    // log: jest.fn(),
    // debug: jest.fn(),
    // info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn()
};
// Setup custom matchers
expect.extend({
    toBeInTheDocument: require('@testing-library/jest-dom/matchers').toBeInTheDocument
});
// Clean up after each test
afterEach(()=>{
    jest.clearAllMocks();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3Noc3plcC9jb2RlL3RoZXJvYm90b3ZlcmxvcmQtbW9uby90aGVyb2JvdG92ZXJsb3JkLXdlYi9qZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSdcblxuLy8gTW9jayBOZXh0LmpzIHJvdXRlclxuamVzdC5tb2NrKCduZXh0L25hdmlnYXRpb24nLCAoKSA9PiAoe1xuICB1c2VSb3V0ZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgICAgIHJlcGxhY2U6IGplc3QuZm4oKSxcbiAgICAgIHByZWZldGNoOiBqZXN0LmZuKCksXG4gICAgICBiYWNrOiBqZXN0LmZuKCksXG4gICAgICBmb3J3YXJkOiBqZXN0LmZuKCksXG4gICAgICByZWZyZXNoOiBqZXN0LmZuKCksXG4gICAgfVxuICB9LFxuICB1c2VTZWFyY2hQYXJhbXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuICB9LFxuICB1c2VQYXRobmFtZSgpIHtcbiAgICByZXR1cm4gJy8nXG4gIH0sXG59KSlcblxuLy8gTW9jayBOZXh0LmpzIEltYWdlIGNvbXBvbmVudFxuamVzdC5tb2NrKCduZXh0L2ltYWdlJywgKCkgPT4gKHtcbiAgX19lc01vZHVsZTogdHJ1ZSxcbiAgZGVmYXVsdDogKHByb3BzKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBuZXh0L25leHQvbm8taW1nLWVsZW1lbnRcbiAgICByZXR1cm4gPGltZyB7Li4ucHJvcHN9IC8+XG4gIH0sXG59KSlcblxuLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxuZ2xvYmFsLkludGVyc2VjdGlvbk9ic2VydmVyID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICBvYnNlcnZlOiBqZXN0LmZuKCksXG4gIHVub2JzZXJ2ZTogamVzdC5mbigpLFxuICBkaXNjb25uZWN0OiBqZXN0LmZuKCksXG59KSlcblxuLy8gTW9jayBSZXNpemVPYnNlcnZlclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICBvYnNlcnZlOiBqZXN0LmZuKCksXG4gIHVub2JzZXJ2ZTogamVzdC5mbigpLFxuICBkaXNjb25uZWN0OiBqZXN0LmZuKCksXG59KSlcblxuLy8gTW9jayBtYXRjaE1lZGlhXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbWF0Y2hNZWRpYScsIHtcbiAgd3JpdGFibGU6IHRydWUsXG4gIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHF1ZXJ5ID0+ICh7XG4gICAgbWF0Y2hlczogZmFsc2UsXG4gICAgbWVkaWE6IHF1ZXJ5LFxuICAgIG9uY2hhbmdlOiBudWxsLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksIC8vIGRlcHJlY2F0ZWRcbiAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBkaXNwYXRjaEV2ZW50OiBqZXN0LmZuKCksXG4gIH0pKSxcbn0pXG5cbi8vIE1vY2sgbG9jYWxTdG9yYWdlXG5jb25zdCBsb2NhbFN0b3JhZ2VNb2NrID0ge1xuICBnZXRJdGVtOiBqZXN0LmZuKCksXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcbiAgcmVtb3ZlSXRlbTogamVzdC5mbigpLFxuICBjbGVhcjogamVzdC5mbigpLFxufVxuZ2xvYmFsLmxvY2FsU3RvcmFnZSA9IGxvY2FsU3RvcmFnZU1vY2tcblxuLy8gTW9jayBzZXNzaW9uU3RvcmFnZVxuY29uc3Qgc2Vzc2lvblN0b3JhZ2VNb2NrID0ge1xuICBnZXRJdGVtOiBqZXN0LmZuKCksXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcbiAgcmVtb3ZlSXRlbTogamVzdC5mbigpLFxuICBjbGVhcjogamVzdC5mbigpLFxufVxuZ2xvYmFsLnNlc3Npb25TdG9yYWdlID0gc2Vzc2lvblN0b3JhZ2VNb2NrXG5cbi8vIE1vY2sgZmV0Y2hcbmdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKVxuXG4vLyBNb2NrIEFQSSBjbGllbnRcbmplc3QubW9jaygnQC9saWIvYXBpLWNsaWVudCcsICgpID0+ICh7XG4gIGFwaUNsaWVudDoge1xuICAgIGdldDogamVzdC5mbigpLFxuICAgIHBvc3Q6IGplc3QuZm4oKSxcbiAgICBwdXQ6IGplc3QuZm4oKSxcbiAgICBkZWxldGU6IGplc3QuZm4oKSxcbiAgICBzZXRBdXRoVG9rZW46IGplc3QuZm4oKSxcbiAgICBjbGVhckF1dGhUb2tlbjogamVzdC5mbigpLFxuICB9LFxufSkpXG5cbi8vIE1vY2sgY29uc29sZSBtZXRob2RzIHRvIHJlZHVjZSBub2lzZSBpbiB0ZXN0c1xuZ2xvYmFsLmNvbnNvbGUgPSB7XG4gIC4uLmNvbnNvbGUsXG4gIC8vIFVuY29tbWVudCB0byBpZ25vcmUgc3BlY2lmaWMgY29uc29sZSBtZXRob2RzXG4gIC8vIGxvZzogamVzdC5mbigpLFxuICAvLyBkZWJ1ZzogamVzdC5mbigpLFxuICAvLyBpbmZvOiBqZXN0LmZuKCksXG4gIHdhcm46IGplc3QuZm4oKSxcbiAgZXJyb3I6IGplc3QuZm4oKSxcbn1cblxuLy8gU2V0dXAgY3VzdG9tIG1hdGNoZXJzXG5leHBlY3QuZXh0ZW5kKHtcbiAgdG9CZUluVGhlRG9jdW1lbnQ6IHJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vbWF0Y2hlcnMnKS50b0JlSW5UaGVEb2N1bWVudCxcbn0pXG5cbi8vIENsZWFuIHVwIGFmdGVyIGVhY2ggdGVzdFxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgamVzdC5jbGVhckFsbE1vY2tzKClcbn0pXG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VSb3V0ZXIiLCJwdXNoIiwiZm4iLCJyZXBsYWNlIiwicHJlZmV0Y2giLCJiYWNrIiwiZm9yd2FyZCIsInJlZnJlc2giLCJ1c2VTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ1c2VQYXRobmFtZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicHJvcHMiLCJpbWciLCJhcGlDbGllbnQiLCJnZXQiLCJwb3N0IiwicHV0IiwiZGVsZXRlIiwic2V0QXV0aFRva2VuIiwiY2xlYXJBdXRoVG9rZW4iLCJnbG9iYWwiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJkaXNjb25uZWN0IiwiUmVzaXplT2JzZXJ2ZXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsIndyaXRhYmxlIiwidmFsdWUiLCJxdWVyeSIsIm1hdGNoZXMiLCJtZWRpYSIsIm9uY2hhbmdlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsImxvY2FsU3RvcmFnZU1vY2siLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImxvY2FsU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlTW9jayIsInNlc3Npb25TdG9yYWdlIiwiZmV0Y2giLCJjb25zb2xlIiwid2FybiIsImVycm9yIiwiZXhwZWN0IiwiZXh0ZW5kIiwidG9CZUluVGhlRG9jdW1lbnQiLCJyZXF1aXJlIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyJdLCJtYXBwaW5ncyI6IjtBQUVBLHNCQUFzQjtBQUN0QkEsS0FBS0MsSUFBSSxDQUFDLG1CQUFtQixJQUFPLENBQUE7UUFDbENDO1lBQ0UsT0FBTztnQkFDTEMsTUFBTUgsS0FBS0ksRUFBRTtnQkFDYkMsU0FBU0wsS0FBS0ksRUFBRTtnQkFDaEJFLFVBQVVOLEtBQUtJLEVBQUU7Z0JBQ2pCRyxNQUFNUCxLQUFLSSxFQUFFO2dCQUNiSSxTQUFTUixLQUFLSSxFQUFF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