3c70089d278ea6d79bfd039671fb188b
"use strict";

/* istanbul ignore next */
function cov_20khu23oes() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-topics.xml/route.ts";
  var hash = "8cc3e51100e43da6c3ca1b1dcaf445a11d7dc223";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-topics.xml/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 83
        }
      },
      "5": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "6": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "7": {
        start: {
          line: 49,
          column: 24
        },
        end: {
          line: 57,
          column: 10
        }
      },
      "8": {
        start: {
          line: 51,
          column: 22
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "9": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "10": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 65
        }
      },
      "11": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 18
          }
        },
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 51,
            column: 13
          },
          end: {
            line: 51,
            column: 14
          }
        },
        loc: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 56,
            column: 9
          }
        },
        line: 51
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 52
          }
        }, {
          start: {
            line: 13,
            column: 56
          },
          end: {
            line: 13,
            column: 83
          }
        }],
        line: 13
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-topics.xml/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\n\n// Topics sitemap - dynamic content\nexport async function GET() {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  \n  try {\n    // In a real implementation, fetch topics from your database\n    // For now, we'll create a placeholder structure\n    const topics = [\n      {\n        id: '1',\n        slug: 'artificial-intelligence',\n        updatedAt: new Date().toISOString(),\n        priority: '0.9'\n      },\n      {\n        id: '2',\n        slug: 'machine-learning',\n        updatedAt: new Date(Date.now() - 43200000).toISOString(), // 12 hours ago\n        priority: '0.8'\n      },\n      {\n        id: '3',\n        slug: 'robotics',\n        updatedAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago\n        priority: '0.8'\n      },\n      {\n        id: '4',\n        slug: 'deep-learning',\n        updatedAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago\n        priority: '0.7'\n      },\n      {\n        id: '5',\n        slug: 'neural-networks',\n        updatedAt: new Date(Date.now() - 259200000).toISOString(), // 3 days ago\n        priority: '0.7'\n      }\n    ];\n\n    const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${topics.map(topic => `  <url>\n    <loc>${baseUrl}/topics/${topic.slug}</loc>\n    <lastmod>${topic.updatedAt}</lastmod>\n    <changefreq>daily</changefreq>\n    <priority>${topic.priority}</priority>\n  </url>`).join('\\n')}\n</urlset>`;\n\n    return new NextResponse(sitemap, {\n      headers: {\n        'Content-Type': 'application/xml',\n        'Cache-Control': 'public, max-age=1800, s-maxage=1800' // 30 minutes cache\n      }\n    });\n  } catch (error) {\n    console.error('Error generating topics sitemap:', error);\n    return new NextResponse('Error generating sitemap', { status: 500 });\n  }\n}\n"],
      names: ["GET", "baseUrl", "process", "env", "NEXT_PUBLIC_SITE_URL", "topics", "id", "slug", "updatedAt", "Date", "toISOString", "priority", "now", "sitemap", "map", "topic", "join", "NextResponse", "headers", "error", "console", "status"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;AAGtB,eAAeA;IACpB,MAAMC,UAAUC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;IAEpD,IAAI;QACF,4DAA4D;QAC5D,gDAAgD;QAChD,MAAMC,SAAS;YACb;gBACEC,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,OAAOC,WAAW;gBACjCC,UAAU;YACZ;YACA;gBACEL,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,KAAKA,KAAKG,GAAG,KAAK,UAAUF,WAAW;gBACtDC,UAAU;YACZ;YACA;gBACEL,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,KAAKA,KAAKG,GAAG,KAAK,UAAUF,WAAW;gBACtDC,UAAU;YACZ;YACA;gBACEL,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,KAAKA,KAAKG,GAAG,KAAK,WAAWF,WAAW;gBACvDC,UAAU;YACZ;YACA;gBACEL,IAAI;gBACJC,MAAM;gBACNC,WAAW,IAAIC,KAAKA,KAAKG,GAAG,KAAK,WAAWF,WAAW;gBACvDC,UAAU;YACZ;SACD;QAED,MAAME,UAAU,CAAC;;AAErB,EAAER,OAAOS,GAAG,CAACC,CAAAA,QAAS,CAAC;SACd,EAAEd,QAAQ,QAAQ,EAAEc,MAAMR,IAAI,CAAC;aAC3B,EAAEQ,MAAMP,SAAS,CAAC;;cAEjB,EAAEO,MAAMJ,QAAQ,CAAC;QACvB,CAAC,EAAEK,IAAI,CAAC,MAAM;SACb,CAAC;QAEN,OAAO,IAAIC,oBAAY,CAACJ,SAAS;YAC/BK,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,sCAAsC,mBAAmB;YAC5E;QACF;IACF,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,oCAAoCA;QAClD,OAAO,IAAIF,oBAAY,CAAC,4BAA4B;YAAEI,QAAQ;QAAI;IACpE;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8cc3e51100e43da6c3ca1b1dcaf445a11d7dc223"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20khu23oes = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20khu23oes();
cov_20khu23oes().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_20khu23oes().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_20khu23oes().f[0]++;
    cov_20khu23oes().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_20khu23oes().s[3]++, require("next/server"));
async function GET() {
  /* istanbul ignore next */
  cov_20khu23oes().f[1]++;
  const baseUrl =
  /* istanbul ignore next */
  (cov_20khu23oes().s[4]++,
  /* istanbul ignore next */
  (cov_20khu23oes().b[0][0]++, process.env.NEXT_PUBLIC_SITE_URL) ||
  /* istanbul ignore next */
  (cov_20khu23oes().b[0][1]++, 'https://robotoverlord.com'));
  /* istanbul ignore next */
  cov_20khu23oes().s[5]++;
  try {
    // In a real implementation, fetch topics from your database
    // For now, we'll create a placeholder structure
    const topics =
    /* istanbul ignore next */
    (cov_20khu23oes().s[6]++, [{
      id: '1',
      slug: 'artificial-intelligence',
      updatedAt: new Date().toISOString(),
      priority: '0.9'
    }, {
      id: '2',
      slug: 'machine-learning',
      updatedAt: new Date(Date.now() - 43200000).toISOString(),
      priority: '0.8'
    }, {
      id: '3',
      slug: 'robotics',
      updatedAt: new Date(Date.now() - 86400000).toISOString(),
      priority: '0.8'
    }, {
      id: '4',
      slug: 'deep-learning',
      updatedAt: new Date(Date.now() - 172800000).toISOString(),
      priority: '0.7'
    }, {
      id: '5',
      slug: 'neural-networks',
      updatedAt: new Date(Date.now() - 259200000).toISOString(),
      priority: '0.7'
    }]);
    const sitemap =
    /* istanbul ignore next */
    (cov_20khu23oes().s[7]++, `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${topics.map(topic => {
      /* istanbul ignore next */
      cov_20khu23oes().f[2]++;
      cov_20khu23oes().s[8]++;
      return `  <url>
    <loc>${baseUrl}/topics/${topic.slug}</loc>
    <lastmod>${topic.updatedAt}</lastmod>
    <changefreq>daily</changefreq>
    <priority>${topic.priority}</priority>
  </url>`;
    }).join('\n')}
</urlset>`);
    /* istanbul ignore next */
    cov_20khu23oes().s[9]++;
    return new _server.NextResponse(sitemap, {
      headers: {
        'Content-Type': 'application/xml',
        'Cache-Control': 'public, max-age=1800, s-maxage=1800' // 30 minutes cache
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_20khu23oes().s[10]++;
    console.error('Error generating topics sitemap:', error);
    /* istanbul ignore next */
    cov_20khu23oes().s[11]++;
    return new _server.NextResponse('Error generating sitemap', {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjBraHUyM29lcyIsImFjdHVhbENvdmVyYWdlIiwicyIsIkdFVCIsImYiLCJiYXNlVXJsIiwiYiIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TSVRFX1VSTCIsInRvcGljcyIsImlkIiwic2x1ZyIsInVwZGF0ZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInByaW9yaXR5Iiwibm93Iiwic2l0ZW1hcCIsIm1hcCIsInRvcGljIiwiam9pbiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJoZWFkZXJzIiwiZXJyb3IiLCJjb25zb2xlIiwic3RhdHVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL2pvc2hzemVwL2NvZGUvdGhlcm9ib3RvdmVybG9yZC1tb25vL3RoZXJvYm90b3ZlcmxvcmQtd2ViL3NyYy9hcHAvc2l0ZW1hcC10b3BpY3MueG1sL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcblxuLy8gVG9waWNzIHNpdGVtYXAgLSBkeW5hbWljIGNvbnRlbnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIGNvbnN0IGJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TSVRFX1VSTCB8fCAnaHR0cHM6Ly9yb2JvdG92ZXJsb3JkLmNvbSc7XG4gIFxuICB0cnkge1xuICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgZmV0Y2ggdG9waWNzIGZyb20geW91ciBkYXRhYmFzZVxuICAgIC8vIEZvciBub3csIHdlJ2xsIGNyZWF0ZSBhIHBsYWNlaG9sZGVyIHN0cnVjdHVyZVxuICAgIGNvbnN0IHRvcGljcyA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICcxJyxcbiAgICAgICAgc2x1ZzogJ2FydGlmaWNpYWwtaW50ZWxsaWdlbmNlJyxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHByaW9yaXR5OiAnMC45J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICcyJyxcbiAgICAgICAgc2x1ZzogJ21hY2hpbmUtbGVhcm5pbmcnLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKERhdGUubm93KCkgLSA0MzIwMDAwMCkudG9JU09TdHJpbmcoKSwgLy8gMTIgaG91cnMgYWdvXG4gICAgICAgIHByaW9yaXR5OiAnMC44J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICczJyxcbiAgICAgICAgc2x1ZzogJ3JvYm90aWNzJyxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gODY0MDAwMDApLnRvSVNPU3RyaW5nKCksIC8vIDEgZGF5IGFnb1xuICAgICAgICBwcmlvcml0eTogJzAuOCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnNCcsXG4gICAgICAgIHNsdWc6ICdkZWVwLWxlYXJuaW5nJyxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMTcyODAwMDAwKS50b0lTT1N0cmluZygpLCAvLyAyIGRheXMgYWdvXG4gICAgICAgIHByaW9yaXR5OiAnMC43J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICc1JyxcbiAgICAgICAgc2x1ZzogJ25ldXJhbC1uZXR3b3JrcycsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDI1OTIwMDAwMCkudG9JU09TdHJpbmcoKSwgLy8gMyBkYXlzIGFnb1xuICAgICAgICBwcmlvcml0eTogJzAuNydcbiAgICAgIH1cbiAgICBdO1xuXG4gICAgY29uc3Qgc2l0ZW1hcCA9IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cbjx1cmxzZXQgeG1sbnM9XCJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45XCI+XG4ke3RvcGljcy5tYXAodG9waWMgPT4gYCAgPHVybD5cbiAgICA8bG9jPiR7YmFzZVVybH0vdG9waWNzLyR7dG9waWMuc2x1Z308L2xvYz5cbiAgICA8bGFzdG1vZD4ke3RvcGljLnVwZGF0ZWRBdH08L2xhc3Rtb2Q+XG4gICAgPGNoYW5nZWZyZXE+ZGFpbHk8L2NoYW5nZWZyZXE+XG4gICAgPHByaW9yaXR5PiR7dG9waWMucHJpb3JpdHl9PC9wcmlvcml0eT5cbiAgPC91cmw+YCkuam9pbignXFxuJyl9XG48L3VybHNldD5gO1xuXG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2Uoc2l0ZW1hcCwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3htbCcsXG4gICAgICAgICdDYWNoZS1Db250cm9sJzogJ3B1YmxpYywgbWF4LWFnZT0xODAwLCBzLW1heGFnZT0xODAwJyAvLyAzMCBtaW51dGVzIGNhY2hlXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyB0b3BpY3Mgc2l0ZW1hcDonLCBlcnJvcik7XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoJ0Vycm9yIGdlbmVyYXRpbmcgc2l0ZW1hcCcsIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBUUk7SUFBQUEsY0FBQSxZQUFBQSxDQUFB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