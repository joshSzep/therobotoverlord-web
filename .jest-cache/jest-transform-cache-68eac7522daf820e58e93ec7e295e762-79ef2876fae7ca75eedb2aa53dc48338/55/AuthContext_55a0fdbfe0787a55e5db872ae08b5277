7b3630006258fdb0ddb9bcfe169b3258
/**
 * Authentication Context for The Robot Overlord
 * Manages user authentication state and token handling
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AuthProvider () {
        return AuthProvider;
    },
    get useAuth () {
        return useAuth;
    },
    get useRequireAuth () {
        return useRequireAuth;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _apiclient = require("../lib/api-client");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const AuthContext = /*#__PURE__*/ (0, _react.createContext)(null);
function AuthProvider({ children }) {
    const [user, setUser] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const isAuthenticated = !!user;
    /**
   * Clear error state
   */ const clearError = (0, _react.useCallback)(()=>{
        setError(null);
    }, []);
    /**
   * Update user data in state
   */ const updateUser = (0, _react.useCallback)((updates)=>{
        setUser((prev)=>prev ? {
                ...prev,
                ...updates
            } : null);
    }, []);
    /**
   * Store authentication tokens
   */ const storeTokens = (0, _react.useCallback)((accessToken, refreshToken)=>{
        if (typeof window === 'undefined') return;
        localStorage.setItem('auth_token', accessToken);
        localStorage.setItem('refresh_token', refreshToken);
        _apiclient.apiClient.setAuthToken(accessToken);
    }, []);
    /**
   * Clear authentication tokens
   */ const clearTokens = (0, _react.useCallback)(()=>{
        if (typeof window === 'undefined') return;
        localStorage.removeItem('auth_token');
        localStorage.removeItem('refresh_token');
        _apiclient.apiClient.clearAuthToken();
    }, []);
    /**
   * Fetch current user data
   */ const fetchCurrentUser = (0, _react.useCallback)(async ()=>{
        try {
            const userData = await _apiclient.apiClient.get('/auth/me');
            return userData;
        } catch (error) {
            console.error('Failed to fetch current user:', error);
            return null;
        }
    }, []);
    /**
   * Login with email/password
   */ const login = (0, _react.useCallback)(async (credentials)=>{
        try {
            setIsLoading(true);
            setError(null);
            const response = await _apiclient.apiClient.post('/auth/login', credentials);
            // Store tokens
            storeTokens(response.tokens.access_token, response.tokens.refresh_token);
            // Fetch full user data with permissions and preferences
            const currentUser = await fetchCurrentUser();
            if (currentUser) {
                setUser(currentUser);
            } else {
                throw new Error('Failed to fetch user data after login');
            }
        } catch (error) {
            setError(error.message || 'Login failed');
            clearTokens();
            throw error;
        } finally{
            setIsLoading(false);
        }
    }, [
        storeTokens,
        clearTokens,
        fetchCurrentUser
    ]);
    /**
   * Login with Google OAuth
   */ const loginWithGoogle = (0, _react.useCallback)(async (provider)=>{
        try {
            setIsLoading(true);
            setError(null);
            const response = await _apiclient.apiClient.post('/auth/oauth/google', provider);
            // Store tokens
            storeTokens(response.tokens.access_token, response.tokens.refresh_token);
            // Fetch full user data
            const currentUser = await fetchCurrentUser();
            if (currentUser) {
                setUser(currentUser);
            } else {
                throw new Error('Failed to fetch user data after OAuth login');
            }
        } catch (error) {
            setError(error.message || 'Google login failed');
            clearTokens();
            throw error;
        } finally{
            setIsLoading(false);
        }
    }, [
        storeTokens,
        clearTokens,
        fetchCurrentUser
    ]);
    /**
   * Refresh authentication token
   */ const refreshToken = (0, _react.useCallback)(async ()=>{
        try {
            const refreshToken = localStorage.getItem('refresh_token');
            if (!refreshToken) {
                throw new Error('No refresh token available');
            }
            const response = await _apiclient.apiClient.post('/auth/refresh', {
                refresh_token: refreshToken
            });
            // Store new tokens
            storeTokens(response.tokens.access_token, response.tokens.refresh_token);
            // Update user data
            const currentUser = await fetchCurrentUser();
            if (currentUser) {
                setUser(currentUser);
            }
        } catch (error) {
            console.error('Token refresh failed:', error);
            // If refresh fails, logout user
            await logout();
            throw error;
        }
    }, [
        storeTokens,
        fetchCurrentUser
    ]);
    /**
   * Logout user
   */ const logout = (0, _react.useCallback)(async ()=>{
        try {
            setIsLoading(true);
            // Call logout endpoint to invalidate tokens on server
            try {
                await _apiclient.apiClient.post('/auth/logout');
            } catch (error) {
                // Continue with logout even if server call fails
                console.error('Server logout failed:', error);
            }
            // Clear local state and tokens
            clearTokens();
            setUser(null);
            setError(null);
        } catch (error) {
            console.error('Logout error:', error);
            setError(error.message || 'Logout failed');
        } finally{
            setIsLoading(false);
        }
    }, [
        clearTokens
    ]);
    /**
   * Initialize authentication state on mount
   */ (0, _react.useEffect)(()=>{
        const initializeAuth = async ()=>{
            try {
                setIsLoading(true);
                const token = localStorage.getItem('auth_token');
                if (!token) {
                    setIsLoading(false);
                    return;
                }
                // Set token in API client
                _apiclient.apiClient.setAuthToken(token);
                // Try to fetch current user
                const currentUser = await fetchCurrentUser();
                if (currentUser) {
                    setUser(currentUser);
                } else {
                    // Token might be invalid, clear it
                    clearTokens();
                }
            } catch (error) {
                console.error('Auth initialization failed:', error);
                clearTokens();
            } finally{
                setIsLoading(false);
            }
        };
        // Only run on client side
        if (typeof window !== 'undefined') {
            initializeAuth();
        }
    }, [
        fetchCurrentUser,
        clearTokens
    ]);
    /**
   * Set up token refresh interval
   */ (0, _react.useEffect)(()=>{
        if (!isAuthenticated) return;
        // Refresh token every 50 minutes (tokens typically expire in 1 hour)
        const refreshInterval = setInterval(()=>{
            refreshToken().catch((error)=>{
                console.error('Automatic token refresh failed:', error);
            });
        }, 50 * 60 * 1000); // 50 minutes
        return ()=>clearInterval(refreshInterval);
    }, [
        isAuthenticated,
        refreshToken
    ]);
    const contextValue = {
        user,
        isAuthenticated,
        isLoading,
        error,
        login,
        loginWithGoogle,
        logout,
        refreshToken,
        clearError,
        updateUser
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(AuthContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useAuth() {
    const context = (0, _react.useContext)(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
}
function useRequireAuth() {
    const auth = useAuth();
    (0, _react.useEffect)(()=>{
        if (!auth.isLoading && !auth.isAuthenticated) {
            // Redirect to login page
            if (typeof window !== 'undefined') {
                window.location.href = '/login';
            }
        }
    }, [
        auth.isLoading,
        auth.isAuthenticated
    ]);
    return auth;
}

//# sourceMappingURL=data:application/json;base64,