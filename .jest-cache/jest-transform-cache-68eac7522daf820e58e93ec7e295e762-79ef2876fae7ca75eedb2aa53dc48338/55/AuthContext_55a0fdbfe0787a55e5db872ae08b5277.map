{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/contexts/AuthContext.tsx"],"sourcesContent":["/**\n * Authentication Context for The Robot Overlord\n * Manages user authentication state and token handling\n */\n\n'use client';\n\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { apiClient } from '@/lib/api-client';\nimport { User, AuthResponse, LoginCredentials, OAuthProvider, CurrentUser } from '@/types/user';\n\ninterface AuthContextType {\n  // State\n  user: CurrentUser | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  login: (credentials: LoginCredentials) => Promise<void>;\n  loginWithGoogle: (provider: OAuthProvider) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<void>;\n  clearError: () => void;\n  updateUser: (updates: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<CurrentUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const isAuthenticated = !!user;\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  /**\n   * Update user data in state\n   */\n  const updateUser = useCallback((updates: Partial<User>) => {\n    setUser(prev => prev ? { ...prev, ...updates } : null);\n  }, []);\n\n  /**\n   * Store authentication tokens\n   */\n  const storeTokens = useCallback((accessToken: string, refreshToken: string) => {\n    if (typeof window === 'undefined') return;\n    \n    localStorage.setItem('auth_token', accessToken);\n    localStorage.setItem('refresh_token', refreshToken);\n    apiClient.setAuthToken(accessToken);\n  }, []);\n\n  /**\n   * Clear authentication tokens\n   */\n  const clearTokens = useCallback(() => {\n    if (typeof window === 'undefined') return;\n    \n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('refresh_token');\n    apiClient.clearAuthToken();\n  }, []);\n\n  /**\n   * Fetch current user data\n   */\n  const fetchCurrentUser = useCallback(async (): Promise<CurrentUser | null> => {\n    try {\n      const userData = await apiClient.get<CurrentUser>('/auth/me');\n      return userData;\n    } catch (error) {\n      console.error('Failed to fetch current user:', error);\n      return null;\n    }\n  }, []);\n\n  /**\n   * Login with email/password\n   */\n  const login = useCallback(async (credentials: LoginCredentials) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<AuthResponse>('/auth/login', credentials);\n      \n      // Store tokens\n      storeTokens(response.tokens.access_token, response.tokens.refresh_token);\n      \n      // Fetch full user data with permissions and preferences\n      const currentUser = await fetchCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n      } else {\n        throw new Error('Failed to fetch user data after login');\n      }\n    } catch (error: any) {\n      setError(error.message || 'Login failed');\n      clearTokens();\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [storeTokens, clearTokens, fetchCurrentUser]);\n\n  /**\n   * Login with Google OAuth\n   */\n  const loginWithGoogle = useCallback(async (provider: OAuthProvider) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<AuthResponse>('/auth/oauth/google', provider);\n      \n      // Store tokens\n      storeTokens(response.tokens.access_token, response.tokens.refresh_token);\n      \n      // Fetch full user data\n      const currentUser = await fetchCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n      } else {\n        throw new Error('Failed to fetch user data after OAuth login');\n      }\n    } catch (error: any) {\n      setError(error.message || 'Google login failed');\n      clearTokens();\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [storeTokens, clearTokens, fetchCurrentUser]);\n\n  /**\n   * Refresh authentication token\n   */\n  const refreshToken = useCallback(async () => {\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await apiClient.post<AuthResponse>('/auth/refresh', {\n        refresh_token: refreshToken\n      });\n\n      // Store new tokens\n      storeTokens(response.tokens.access_token, response.tokens.refresh_token);\n      \n      // Update user data\n      const currentUser = await fetchCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n      }\n    } catch (error: any) {\n      console.error('Token refresh failed:', error);\n      // If refresh fails, logout user\n      await logout();\n      throw error;\n    }\n  }, [storeTokens, fetchCurrentUser]);\n\n  /**\n   * Logout user\n   */\n  const logout = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      \n      // Call logout endpoint to invalidate tokens on server\n      try {\n        await apiClient.post('/auth/logout');\n      } catch (error) {\n        // Continue with logout even if server call fails\n        console.error('Server logout failed:', error);\n      }\n      \n      // Clear local state and tokens\n      clearTokens();\n      setUser(null);\n      setError(null);\n    } catch (error: any) {\n      console.error('Logout error:', error);\n      setError(error.message || 'Logout failed');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [clearTokens]);\n\n  /**\n   * Initialize authentication state on mount\n   */\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        setIsLoading(true);\n        \n        const token = localStorage.getItem('auth_token');\n        if (!token) {\n          setIsLoading(false);\n          return;\n        }\n\n        // Set token in API client\n        apiClient.setAuthToken(token);\n        \n        // Try to fetch current user\n        const currentUser = await fetchCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n        } else {\n          // Token might be invalid, clear it\n          clearTokens();\n        }\n      } catch (error) {\n        console.error('Auth initialization failed:', error);\n        clearTokens();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Only run on client side\n    if (typeof window !== 'undefined') {\n      initializeAuth();\n    }\n  }, [fetchCurrentUser, clearTokens]);\n\n  /**\n   * Set up token refresh interval\n   */\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    // Refresh token every 50 minutes (tokens typically expire in 1 hour)\n    const refreshInterval = setInterval(() => {\n      refreshToken().catch(error => {\n        console.error('Automatic token refresh failed:', error);\n      });\n    }, 50 * 60 * 1000); // 50 minutes\n\n    return () => clearInterval(refreshInterval);\n  }, [isAuthenticated, refreshToken]);\n\n  const contextValue: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    loginWithGoogle,\n    logout,\n    refreshToken,\n    clearError,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n/**\n * Hook to use authentication context\n */\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\n/**\n * Hook to require authentication (redirects to login if not authenticated)\n */\nexport function useRequireAuth() {\n  const auth = useAuth();\n  \n  useEffect(() => {\n    if (!auth.isLoading && !auth.isAuthenticated) {\n      // Redirect to login page\n      if (typeof window !== 'undefined') {\n        window.location.href = '/login';\n      }\n    }\n  }, [auth.isLoading, auth.isAuthenticated]);\n\n  return auth;\n}\n"],"names":["AuthProvider","useAuth","useRequireAuth","AuthContext","createContext","children","user","setUser","useState","isLoading","setIsLoading","error","setError","isAuthenticated","clearError","useCallback","updateUser","updates","prev","storeTokens","accessToken","refreshToken","window","localStorage","setItem","apiClient","setAuthToken","clearTokens","removeItem","clearAuthToken","fetchCurrentUser","userData","get","console","login","credentials","response","post","tokens","access_token","refresh_token","currentUser","Error","message","loginWithGoogle","provider","getItem","logout","useEffect","initializeAuth","token","refreshInterval","setInterval","catch","clearInterval","contextValue","Provider","value","context","useContext","auth","location","href"],"mappings":"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"}