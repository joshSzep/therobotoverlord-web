{"version":3,"names":["GET","cov_l5mferte1","f","s","HEAD","request","startTime","Date","now","checks","apiUrl","process","env","NEXT_PUBLIC_API_URL","b","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","clearTimeout","external_api","ok","error","allChecksHealthy","Object","values","every","status","hasUnhealthyChecks","some","healthStatus","timestamp","toISOString","version","NEXT_PUBLIC_APP_VERSION","environment","NEXT_PUBLIC_APP_ENV","uptime","responseTime","_server","NextResponse","json","headers","Response"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/health/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\ninterface HealthCheck {\n  status: 'healthy' | 'unhealthy'\n  timestamp: string\n  version: string\n  environment: string\n  uptime: number\n  checks: {\n    database?: 'healthy' | 'unhealthy'\n    redis?: 'healthy' | 'unhealthy'\n    external_api?: 'healthy' | 'unhealthy'\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now()\n  \n  try {\n    // Basic health checks\n    const checks: HealthCheck['checks'] = {}\n    \n    // Check database connection (if applicable)\n    // Uncomment when database is implemented\n    // try {\n    //   await db.raw('SELECT 1')\n    //   checks.database = 'healthy'\n    // } catch (error) {\n    //   checks.database = 'unhealthy'\n    // }\n    \n    // Check external API connection\n    try {\n      const apiUrl = process.env.NEXT_PUBLIC_API_URL\n      if (apiUrl) {\n        const controller = new AbortController()\n        const timeoutId = setTimeout(() => controller.abort(), 5000)\n        \n        const response = await fetch(`${apiUrl}/health`, {\n          method: 'GET',\n          signal: controller.signal,\n        })\n        \n        clearTimeout(timeoutId)\n        checks.external_api = response.ok ? 'healthy' : 'unhealthy'\n      }\n    } catch (error) {\n      checks.external_api = 'unhealthy'\n    }\n    \n    // Determine overall status\n    const allChecksHealthy = Object.values(checks).every(status => status === 'healthy')\n    const hasUnhealthyChecks = Object.values(checks).some(status => status === 'unhealthy')\n    \n    const healthStatus: HealthCheck = {\n      status: hasUnhealthyChecks ? 'unhealthy' : 'healthy',\n      timestamp: new Date().toISOString(),\n      version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      environment: process.env.NEXT_PUBLIC_APP_ENV || 'development',\n      uptime: process.uptime(),\n      checks,\n    }\n    \n    const responseTime = Date.now() - startTime\n    \n    return NextResponse.json(\n      {\n        ...healthStatus,\n        responseTime: `${responseTime}ms`,\n      },\n      {\n        status: healthStatus.status === 'healthy' ? 200 : 503,\n        headers: {\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  } catch (error) {\n    return NextResponse.json(\n      {\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        error: 'Health check failed',\n        responseTime: `${Date.now() - startTime}ms`,\n      },\n      {\n        status: 503,\n        headers: {\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n  }\n}\n\n// Support HEAD requests for simple health checks\nexport async function HEAD() {\n  return new Response(null, { status: 200 })\n}\n"],"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","ignoreList":[]}