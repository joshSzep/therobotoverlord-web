{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/services/api.test.ts"],"sourcesContent":["import { mockApiResponse, mockApiError } from '@/__tests__/utils/test-utils'\n\n// Mock fetch globally\nglobal.fetch = jest.fn()\n\n// Mock API service functions (these would be imported from actual API service)\nconst mockApiService = {\n  async fetchPosts(params = {}) {\n    const response = await fetch('/api/posts', {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    })\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n    \n    return response.json()\n  },\n\n  async createPost(postData: any) {\n    const response = await fetch('/api/posts', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(postData)\n    })\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n    \n    return response.json()\n  },\n\n  async updatePost(id: string, postData: any) {\n    const response = await fetch(`/api/posts/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(postData)\n    })\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n    \n    return response.json()\n  },\n\n  async deletePost(id: string) {\n    const response = await fetch(`/api/posts/${id}`, {\n      method: 'DELETE'\n    })\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n    \n    return response.ok\n  },\n\n  async fetchTopics() {\n    const response = await fetch('/api/topics')\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n    \n    return response.json()\n  }\n}\n\ndescribe('API Service Layer', () => {\n  const mockFetch = fetch as jest.MockedFunction<typeof fetch>\n\n  beforeEach(() => {\n    mockFetch.mockClear()\n  })\n\n  describe('fetchPosts', () => {\n    it('fetches posts successfully', async () => {\n      const mockPosts = [\n        { id: '1', title: 'Post 1', content: 'Content 1' },\n        { id: '2', title: 'Post 2', content: 'Content 2' }\n      ]\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockPosts,\n      } as Response)\n\n      const result = await mockApiService.fetchPosts()\n      \n      expect(mockFetch).toHaveBeenCalledWith('/api/posts', {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n      expect(result).toEqual(mockPosts)\n    })\n\n    it('handles fetch error', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n      } as Response)\n\n      await expect(mockApiService.fetchPosts()).rejects.toThrow('HTTP error! status: 500')\n    })\n\n    it('handles network error', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('Network error'))\n\n      await expect(mockApiService.fetchPosts()).rejects.toThrow('Network error')\n    })\n  })\n\n  describe('createPost', () => {\n    it('creates post successfully', async () => {\n      const newPost = { title: 'New Post', content: 'New content' }\n      const createdPost = { id: '3', ...newPost, createdAt: new Date().toISOString() }\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => createdPost,\n      } as Response)\n\n      const result = await mockApiService.createPost(newPost)\n      \n      expect(mockFetch).toHaveBeenCalledWith('/api/posts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newPost)\n      })\n      expect(result).toEqual(createdPost)\n    })\n\n    it('handles validation errors', async () => {\n      const invalidPost = { title: '', content: '' }\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n      } as Response)\n\n      await expect(mockApiService.createPost(invalidPost)).rejects.toThrow('HTTP error! status: 400')\n    })\n  })\n\n  describe('updatePost', () => {\n    it('updates post successfully', async () => {\n      const postId = '1'\n      const updateData = { title: 'Updated Title' }\n      const updatedPost = { id: postId, title: 'Updated Title', content: 'Original content' }\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => updatedPost,\n      } as Response)\n\n      const result = await mockApiService.updatePost(postId, updateData)\n      \n      expect(mockFetch).toHaveBeenCalledWith(`/api/posts/${postId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updateData)\n      })\n      expect(result).toEqual(updatedPost)\n    })\n\n    it('handles not found error', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n      } as Response)\n\n      await expect(mockApiService.updatePost('999', {})).rejects.toThrow('HTTP error! status: 404')\n    })\n  })\n\n  describe('deletePost', () => {\n    it('deletes post successfully', async () => {\n      const postId = '1'\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n      } as Response)\n\n      const result = await mockApiService.deletePost(postId)\n      \n      expect(mockFetch).toHaveBeenCalledWith(`/api/posts/${postId}`, {\n        method: 'DELETE'\n      })\n      expect(result).toBe(true)\n    })\n\n    it('handles delete error', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 403,\n      } as Response)\n\n      await expect(mockApiService.deletePost('1')).rejects.toThrow('HTTP error! status: 403')\n    })\n  })\n\n  describe('fetchTopics', () => {\n    it('fetches topics successfully', async () => {\n      const mockTopics = [\n        { id: '1', title: 'AI', slug: 'ai', postCount: 10 },\n        { id: '2', title: 'Machine Learning', slug: 'ml', postCount: 5 }\n      ]\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockTopics,\n      } as Response)\n\n      const result = await mockApiService.fetchTopics()\n      \n      expect(mockFetch).toHaveBeenCalledWith('/api/topics')\n      expect(result).toEqual(mockTopics)\n    })\n  })\n\n  describe('Error handling patterns', () => {\n    it('handles timeout errors', async () => {\n      const timeoutError = new Error('Request timeout')\n      timeoutError.name = 'TimeoutError'\n      \n      mockFetch.mockRejectedValueOnce(timeoutError)\n\n      await expect(mockApiService.fetchPosts()).rejects.toThrow('Request timeout')\n    })\n\n    it('handles JSON parsing errors', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => {\n          throw new Error('Invalid JSON')\n        },\n      } as Response)\n\n      await expect(mockApiService.fetchPosts()).rejects.toThrow('Invalid JSON')\n    })\n\n    it('handles rate limiting', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 429,\n        headers: new Headers({\n          'Retry-After': '60'\n        })\n      } as Response)\n\n      await expect(mockApiService.fetchPosts()).rejects.toThrow('HTTP error! status: 429')\n    })\n  })\n\n  describe('Request interceptors', () => {\n    it('includes authentication headers when available', async () => {\n      // Mock authentication token\n      const mockToken = 'mock-jwt-token'\n      \n      // This would typically be handled by an interceptor\n      const authenticatedFetch = async (url: string, options: any = {}) => {\n        return fetch(url, {\n          ...options,\n          headers: {\n            ...options.headers,\n            'Authorization': `Bearer ${mockToken}`\n          }\n        })\n      }\n\n      const spy = jest.spyOn(global, 'fetch')\n      spy.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ([]),\n      } as Response)\n\n      await authenticatedFetch('/api/posts', {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n      expect(spy).toHaveBeenCalledWith('/api/posts', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${mockToken}`\n        }\n      })\n    })\n  })\n})\n"],"names":["global","fetch","jest","fn","mockApiService","fetchPosts","params","response","method","headers","ok","Error","status","json","createPost","postData","body","JSON","stringify","updatePost","id","deletePost","fetchTopics","describe","mockFetch","beforeEach","mockClear","it","mockPosts","title","content","mockResolvedValueOnce","result","expect","toHaveBeenCalledWith","toEqual","rejects","toThrow","mockRejectedValueOnce","newPost","createdPost","createdAt","Date","toISOString","invalidPost","postId","updateData","updatedPost","toBe","mockTopics","slug","postCount","timeoutError","name","Headers","mockToken","authenticatedFetch","url","options","spy","spyOn"],"mappings":"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"}