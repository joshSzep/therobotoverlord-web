97c1e9e1438c942335378c17c272c30a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// Mock fetch globally
global.fetch = jest.fn();
// Mock API service functions (these would be imported from actual API service)
const mockApiService = {
    async fetchPosts (params = {}) {
        const response = await fetch('/api/posts', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    },
    async createPost (postData) {
        const response = await fetch('/api/posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(postData)
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    },
    async updatePost (id, postData) {
        const response = await fetch(`/api/posts/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(postData)
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    },
    async deletePost (id) {
        const response = await fetch(`/api/posts/${id}`, {
            method: 'DELETE'
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.ok;
    },
    async fetchTopics () {
        const response = await fetch('/api/topics');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    }
};
describe('API Service Layer', ()=>{
    const mockFetch = fetch;
    beforeEach(()=>{
        mockFetch.mockClear();
    });
    describe('fetchPosts', ()=>{
        it('fetches posts successfully', async ()=>{
            const mockPosts = [
                {
                    id: '1',
                    title: 'Post 1',
                    content: 'Content 1'
                },
                {
                    id: '2',
                    title: 'Post 2',
                    content: 'Content 2'
                }
            ];
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPosts
            });
            const result = await mockApiService.fetchPosts();
            expect(mockFetch).toHaveBeenCalledWith('/api/posts', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            expect(result).toEqual(mockPosts);
        });
        it('handles fetch error', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500
            });
            await expect(mockApiService.fetchPosts()).rejects.toThrow('HTTP error! status: 500');
        });
        it('handles network error', async ()=>{
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            await expect(mockApiService.fetchPosts()).rejects.toThrow('Network error');
        });
    });
    describe('createPost', ()=>{
        it('creates post successfully', async ()=>{
            const newPost = {
                title: 'New Post',
                content: 'New content'
            };
            const createdPost = {
                id: '3',
                ...newPost,
                createdAt: new Date().toISOString()
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>createdPost
            });
            const result = await mockApiService.createPost(newPost);
            expect(mockFetch).toHaveBeenCalledWith('/api/posts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newPost)
            });
            expect(result).toEqual(createdPost);
        });
        it('handles validation errors', async ()=>{
            const invalidPost = {
                title: '',
                content: ''
            };
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 400
            });
            await expect(mockApiService.createPost(invalidPost)).rejects.toThrow('HTTP error! status: 400');
        });
    });
    describe('updatePost', ()=>{
        it('updates post successfully', async ()=>{
            const postId = '1';
            const updateData = {
                title: 'Updated Title'
            };
            const updatedPost = {
                id: postId,
                title: 'Updated Title',
                content: 'Original content'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>updatedPost
            });
            const result = await mockApiService.updatePost(postId, updateData);
            expect(mockFetch).toHaveBeenCalledWith(`/api/posts/${postId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updateData)
            });
            expect(result).toEqual(updatedPost);
        });
        it('handles not found error', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 404
            });
            await expect(mockApiService.updatePost('999', {})).rejects.toThrow('HTTP error! status: 404');
        });
    });
    describe('deletePost', ()=>{
        it('deletes post successfully', async ()=>{
            const postId = '1';
            mockFetch.mockResolvedValueOnce({
                ok: true
            });
            const result = await mockApiService.deletePost(postId);
            expect(mockFetch).toHaveBeenCalledWith(`/api/posts/${postId}`, {
                method: 'DELETE'
            });
            expect(result).toBe(true);
        });
        it('handles delete error', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 403
            });
            await expect(mockApiService.deletePost('1')).rejects.toThrow('HTTP error! status: 403');
        });
    });
    describe('fetchTopics', ()=>{
        it('fetches topics successfully', async ()=>{
            const mockTopics = [
                {
                    id: '1',
                    title: 'AI',
                    slug: 'ai',
                    postCount: 10
                },
                {
                    id: '2',
                    title: 'Machine Learning',
                    slug: 'ml',
                    postCount: 5
                }
            ];
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockTopics
            });
            const result = await mockApiService.fetchTopics();
            expect(mockFetch).toHaveBeenCalledWith('/api/topics');
            expect(result).toEqual(mockTopics);
        });
    });
    describe('Error handling patterns', ()=>{
        it('handles timeout errors', async ()=>{
            const timeoutError = new Error('Request timeout');
            timeoutError.name = 'TimeoutError';
            mockFetch.mockRejectedValueOnce(timeoutError);
            await expect(mockApiService.fetchPosts()).rejects.toThrow('Request timeout');
        });
        it('handles JSON parsing errors', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>{
                    throw new Error('Invalid JSON');
                }
            });
            await expect(mockApiService.fetchPosts()).rejects.toThrow('Invalid JSON');
        });
        it('handles rate limiting', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 429,
                headers: new Headers({
                    'Retry-After': '60'
                })
            });
            await expect(mockApiService.fetchPosts()).rejects.toThrow('HTTP error! status: 429');
        });
    });
    describe('Request interceptors', ()=>{
        it('includes authentication headers when available', async ()=>{
            // Mock authentication token
            const mockToken = 'mock-jwt-token';
            // This would typically be handled by an interceptor
            const authenticatedFetch = async (url, options = {})=>{
                return fetch(url, {
                    ...options,
                    headers: {
                        ...options.headers,
                        'Authorization': `Bearer ${mockToken}`
                    }
                });
            };
            const spy = jest.spyOn(global, 'fetch');
            spy.mockResolvedValueOnce({
                ok: true,
                json: async ()=>[]
            });
            await authenticatedFetch('/api/posts', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            expect(spy).toHaveBeenCalledWith('/api/posts', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${mockToken}`
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3Noc3plcC9jb2RlL3RoZXJvYm90b3ZlcmxvcmQtbW9uby90aGVyb2JvdG92ZXJsb3JkLXdlYi9zcmMvX190ZXN0c19fL3NlcnZpY2VzL2FwaS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1vY2tBcGlSZXNwb25zZSwgbW9ja0FwaUVycm9yIH0gZnJvbSAnQC9fX3Rlc3RzX18vdXRpbHMvdGVzdC11dGlscydcblxuLy8gTW9jayBmZXRjaCBnbG9iYWxseVxuZ2xvYmFsLmZldGNoID0gamVzdC5mbigpXG5cbi8vIE1vY2sgQVBJIHNlcnZpY2UgZnVuY3Rpb25zICh0aGVzZSB3b3VsZCBiZSBpbXBvcnRlZCBmcm9tIGFjdHVhbCBBUEkgc2VydmljZSlcbmNvbnN0IG1vY2tBcGlTZXJ2aWNlID0ge1xuICBhc3luYyBmZXRjaFBvc3RzKHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9wb3N0cycsIHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfVxuICAgIH0pXG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApXG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyBjcmVhdGVQb3N0KHBvc3REYXRhOiBhbnkpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3Bvc3RzJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBvc3REYXRhKVxuICAgIH0pXG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApXG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXNwb25zZS5qc29uKClcbiAgfSxcblxuICBhc3luYyB1cGRhdGVQb3N0KGlkOiBzdHJpbmcsIHBvc3REYXRhOiBhbnkpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL3Bvc3RzLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocG9zdERhdGEpXG4gICAgfSlcbiAgICBcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YClcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9LFxuXG4gIGFzeW5jIGRlbGV0ZVBvc3QoaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvcG9zdHMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnXG4gICAgfSlcbiAgICBcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YClcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3BvbnNlLm9rXG4gIH0sXG5cbiAgYXN5bmMgZmV0Y2hUb3BpY3MoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS90b3BpY3MnKVxuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gIH1cbn1cblxuZGVzY3JpYmUoJ0FQSSBTZXJ2aWNlIExheWVyJywgKCkgPT4ge1xuICBjb25zdCBtb2NrRmV0Y2ggPSBmZXRjaCBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBmZXRjaD5cblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrRmV0Y2gubW9ja0NsZWFyKClcbiAgfSlcblxuICBkZXNjcmliZSgnZmV0Y2hQb3N0cycsICgpID0+IHtcbiAgICBpdCgnZmV0Y2hlcyBwb3N0cyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUG9zdHMgPSBbXG4gICAgICAgIHsgaWQ6ICcxJywgdGl0bGU6ICdQb3N0IDEnLCBjb250ZW50OiAnQ29udGVudCAxJyB9LFxuICAgICAgICB7IGlkOiAnMicsIHRpdGxlOiAnUG9zdCAyJywgY29udGVudDogJ0NvbnRlbnQgMicgfVxuICAgICAgXVxuXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tQb3N0cyxcbiAgICAgIH0gYXMgUmVzcG9uc2UpXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tBcGlTZXJ2aWNlLmZldGNoUG9zdHMoKVxuICAgICAgXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2FwaS9wb3N0cycsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cbiAgICAgIH0pXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tQb3N0cylcbiAgICB9KVxuXG4gICAgaXQoJ2hhbmRsZXMgZmV0Y2ggZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIH0gYXMgUmVzcG9uc2UpXG5cbiAgICAgIGF3YWl0IGV4cGVjdChtb2NrQXBpU2VydmljZS5mZXRjaFBvc3RzKCkpLnJlamVjdHMudG9UaHJvdygnSFRUUCBlcnJvciEgc3RhdHVzOiA1MDAnKVxuICAgIH0pXG5cbiAgICBpdCgnaGFuZGxlcyBuZXR3b3JrIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSlcblxuICAgICAgYXdhaXQgZXhwZWN0KG1vY2tBcGlTZXJ2aWNlLmZldGNoUG9zdHMoKSkucmVqZWN0cy50b1Rocm93KCdOZXR3b3JrIGVycm9yJylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdjcmVhdGVQb3N0JywgKCkgPT4ge1xuICAgIGl0KCdjcmVhdGVzIHBvc3Qgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbmV3UG9zdCA9IHsgdGl0bGU6ICdOZXcgUG9zdCcsIGNvbnRlbnQ6ICdOZXcgY29udGVudCcgfVxuICAgICAgY29uc3QgY3JlYXRlZFBvc3QgPSB7IGlkOiAnMycsIC4uLm5ld1Bvc3QsIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH1cblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBjcmVhdGVkUG9zdCxcbiAgICAgIH0gYXMgUmVzcG9uc2UpXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tBcGlTZXJ2aWNlLmNyZWF0ZVBvc3QobmV3UG9zdClcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvcG9zdHMnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobmV3UG9zdClcbiAgICAgIH0pXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGNyZWF0ZWRQb3N0KVxuICAgIH0pXG5cbiAgICBpdCgnaGFuZGxlcyB2YWxpZGF0aW9uIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWRQb3N0ID0geyB0aXRsZTogJycsIGNvbnRlbnQ6ICcnIH1cblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICB9IGFzIFJlc3BvbnNlKVxuXG4gICAgICBhd2FpdCBleHBlY3QobW9ja0FwaVNlcnZpY2UuY3JlYXRlUG9zdChpbnZhbGlkUG9zdCkpLnJlamVjdHMudG9UaHJvdygnSFRUUCBlcnJvciEgc3RhdHVzOiA0MDAnKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ3VwZGF0ZVBvc3QnLCAoKSA9PiB7XG4gICAgaXQoJ3VwZGF0ZXMgcG9zdCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwb3N0SWQgPSAnMSdcbiAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7IHRpdGxlOiAnVXBkYXRlZCBUaXRsZScgfVxuICAgICAgY29uc3QgdXBkYXRlZFBvc3QgPSB7IGlkOiBwb3N0SWQsIHRpdGxlOiAnVXBkYXRlZCBUaXRsZScsIGNvbnRlbnQ6ICdPcmlnaW5hbCBjb250ZW50JyB9XG5cbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gdXBkYXRlZFBvc3QsXG4gICAgICB9IGFzIFJlc3BvbnNlKVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2NrQXBpU2VydmljZS51cGRhdGVQb3N0KHBvc3RJZCwgdXBkYXRlRGF0YSlcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoYC9hcGkvcG9zdHMvJHtwb3N0SWR9YCwge1xuICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXBkYXRlRGF0YSlcbiAgICAgIH0pXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHVwZGF0ZWRQb3N0KVxuICAgIH0pXG5cbiAgICBpdCgnaGFuZGxlcyBub3QgZm91bmQgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgIH0gYXMgUmVzcG9uc2UpXG5cbiAgICAgIGF3YWl0IGV4cGVjdChtb2NrQXBpU2VydmljZS51cGRhdGVQb3N0KCc5OTknLCB7fSkpLnJlamVjdHMudG9UaHJvdygnSFRUUCBlcnJvciEgc3RhdHVzOiA0MDQnKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2RlbGV0ZVBvc3QnLCAoKSA9PiB7XG4gICAgaXQoJ2RlbGV0ZXMgcG9zdCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwb3N0SWQgPSAnMSdcblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgfSBhcyBSZXNwb25zZSlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0FwaVNlcnZpY2UuZGVsZXRlUG9zdChwb3N0SWQpXG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGAvYXBpL3Bvc3RzLyR7cG9zdElkfWAsIHtcbiAgICAgICAgbWV0aG9kOiAnREVMRVRFJ1xuICAgICAgfSlcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSlcbiAgICB9KVxuXG4gICAgaXQoJ2hhbmRsZXMgZGVsZXRlIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICB9IGFzIFJlc3BvbnNlKVxuXG4gICAgICBhd2FpdCBleHBlY3QobW9ja0FwaVNlcnZpY2UuZGVsZXRlUG9zdCgnMScpKS5yZWplY3RzLnRvVGhyb3coJ0hUVFAgZXJyb3IhIHN0YXR1czogNDAzJylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdmZXRjaFRvcGljcycsICgpID0+IHtcbiAgICBpdCgnZmV0Y2hlcyB0b3BpY3Mgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1RvcGljcyA9IFtcbiAgICAgICAgeyBpZDogJzEnLCB0aXRsZTogJ0FJJywgc2x1ZzogJ2FpJywgcG9zdENvdW50OiAxMCB9LFxuICAgICAgICB7IGlkOiAnMicsIHRpdGxlOiAnTWFjaGluZSBMZWFybmluZycsIHNsdWc6ICdtbCcsIHBvc3RDb3VudDogNSB9XG4gICAgICBdXG5cbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gbW9ja1RvcGljcyxcbiAgICAgIH0gYXMgUmVzcG9uc2UpXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tBcGlTZXJ2aWNlLmZldGNoVG9waWNzKClcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvdG9waWNzJylcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1RvcGljcylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdFcnJvciBoYW5kbGluZyBwYXR0ZXJucycsICgpID0+IHtcbiAgICBpdCgnaGFuZGxlcyB0aW1lb3V0IGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRpbWVvdXRFcnJvciA9IG5ldyBFcnJvcignUmVxdWVzdCB0aW1lb3V0JylcbiAgICAgIHRpbWVvdXRFcnJvci5uYW1lID0gJ1RpbWVvdXRFcnJvcidcbiAgICAgIFxuICAgICAgbW9ja0ZldGNoLm1vY2tSZWplY3RlZFZhbHVlT25jZSh0aW1lb3V0RXJyb3IpXG5cbiAgICAgIGF3YWl0IGV4cGVjdChtb2NrQXBpU2VydmljZS5mZXRjaFBvc3RzKCkpLnJlamVjdHMudG9UaHJvdygnUmVxdWVzdCB0aW1lb3V0JylcbiAgICB9KVxuXG4gICAgaXQoJ2hhbmRsZXMgSlNPTiBwYXJzaW5nIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OJylcbiAgICAgICAgfSxcbiAgICAgIH0gYXMgUmVzcG9uc2UpXG5cbiAgICAgIGF3YWl0IGV4cGVjdChtb2NrQXBpU2VydmljZS5mZXRjaFBvc3RzKCkpLnJlamVjdHMudG9UaHJvdygnSW52YWxpZCBKU09OJylcbiAgICB9KVxuXG4gICAgaXQoJ2hhbmRsZXMgcmF0ZSBsaW1pdGluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7XG4gICAgICAgICAgJ1JldHJ5LUFmdGVyJzogJzYwJ1xuICAgICAgICB9KVxuICAgICAgfSBhcyBSZXNwb25zZSlcblxuICAgICAgYXdhaXQgZXhwZWN0KG1vY2tBcGlTZXJ2aWNlLmZldGNoUG9zdHMoKSkucmVqZWN0cy50b1Rocm93KCdIVFRQIGVycm9yISBzdGF0dXM6IDQyOScpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnUmVxdWVzdCBpbnRlcmNlcHRvcnMnLCAoKSA9PiB7XG4gICAgaXQoJ2luY2x1ZGVzIGF1dGhlbnRpY2F0aW9uIGhlYWRlcnMgd2hlbiBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGF1dGhlbnRpY2F0aW9uIHRva2VuXG4gICAgICBjb25zdCBtb2NrVG9rZW4gPSAnbW9jay1qd3QtdG9rZW4nXG4gICAgICBcbiAgICAgIC8vIFRoaXMgd291bGQgdHlwaWNhbGx5IGJlIGhhbmRsZWQgYnkgYW4gaW50ZXJjZXB0b3JcbiAgICAgIGNvbnN0IGF1dGhlbnRpY2F0ZWRGZXRjaCA9IGFzeW5jICh1cmw6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pID0+IHtcbiAgICAgICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgLi4ub3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7bW9ja1Rva2VufWBcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24oZ2xvYmFsLCAnZmV0Y2gnKVxuICAgICAgc3B5Lm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoW10pLFxuICAgICAgfSBhcyBSZXNwb25zZSlcblxuICAgICAgYXdhaXQgYXV0aGVudGljYXRlZEZldGNoKCcvYXBpL3Bvc3RzJywge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfVxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvcG9zdHMnLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke21vY2tUb2tlbn1gXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmV0Y2giLCJqZXN0IiwiZm4iLCJtb2NrQXBpU2VydmljZSIsImZldGNoUG9zdHMiLCJwYXJhbXMiLCJyZXNwb25zZSIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsIkVycm9yIiwic3RhdHVzIiwianNvbiIsImNyZWF0ZVBvc3QiLCJwb3N0RGF0YSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidXBkYXRlUG9zdCIsImlkIiwiZGVsZXRlUG9zdCIsImZldGNoVG9waWNzIiwiZGVzY3JpYmUiLCJtb2NrRmV0Y2giLCJiZWZvcmVFYWNoIiwibW9ja0NsZWFyIiwiaXQiLCJtb2NrUG9zdHMiLCJ0aXRsZSIsImNvbnRlbnQiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJyZXN1bHQiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRvRXF1YWwiLCJyZWplY3RzIiwidG9UaHJvdyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIm5ld1Bvc3QiLCJjcmVhdGVkUG9zdCIsImNyZWF0ZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImludmFsaWRQb3N0IiwicG9zdElkIiwidXBkYXRlRGF0YSIsInVwZGF0ZWRQb3N0IiwidG9CZSIsIm1vY2tUb3BpY3MiLCJzbHVnIiwicG9zdENvdW50IiwidGltZW91dEVycm9yIiwibmFtZSIsIkhlYWRlcnMiLCJtb2NrVG9rZW4iLCJhdXRoZW50aWNhdGVkRmV0Y2giLCJ1cmwiLCJvcHRpb25zIiwic3B5Iiwic3B5T24iXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxzQkFBc0I7QUFDdEJBLE9BQU9DLEtBQUssR0FBR0MsS0FBS0MsRUFBRTtBQUV0QiwrRUFBK0U7QUFDL0UsTUFBTUMsaUJBQWlCO0lBQ3JCLE1BQU1DLFlBQVdDLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLE1BQU1DLFdBQVcsTUFBTU4sTUFBTSxjQUFjO1lBQ3pDTyxRQUFRO1lBQ1JDLFNBQVM7Z0JBQUUsZ0JBQWdCO1lBQW1CO1FBQ2hEO1FBRUEsSUFBSSxDQUFDRixTQUFTRyxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNLENBQUMsb0JBQW9CLEVBQUVKLFNBQVNLLE1BQU0sRUFBRTtRQUMxRDtRQUVBLE9BQU9MLFNBQVNNLElBQUk7SUFDdEI7SUFFQSxNQUFNQyxZQUFXQyxRQUFhO1FBQzVCLE1BQU1SLFdBQVcsTUFBTU4sTUFBTSxjQUFjO1lBQ3pDTyxRQUFRO1lBQ1JDLFNBQVM7Z0JBQUUsZ0JBQWdCO1lBQW1CO1lBQzlDTyxNQUFNQyxLQUFLQyxTQUFTLENBQUNIO1FBQ3ZCO1FBRUEsSUFBSSxDQUFDUixTQUFTRyxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNLENBQUMsb0JBQW9CLEVBQUVKLFNBQVNLLE1BQU0sRUFBRTtRQUMxRDtRQUVBLE9BQU9MLFNBQVNNLElBQUk7SUFDdEI7SUFFQSxNQUFNTSxZQUFXQyxFQUFVLEVBQUVMLFFBQWE7UUFDeEMsTUFBTVIsV0FBVyxNQUFNTixNQUFNLENBQUMsV0FBVyxFQUFFbUIsSUFBSSxFQUFFO1lBQy9DWixRQUFRO1lBQ1JDLFNBQVM7Z0JBQUUs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