{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/components/ui/Card.test.tsx"],"sourcesContent":["import { render, screen } from '@/__tests__/utils/test-utils'\nimport { Card, CardContent, CardHeader, CardFooter } from '@/components/ui/Card'\n\ndescribe('Card Components', () => {\n  describe('Card', () => {\n    it('renders with default styling', () => {\n      render(\n        <Card data-testid=\"card\">\n          <div>Card content</div>\n        </Card>\n      )\n      \n      const card = screen.getByTestId('card')\n      expect(card).toBeInTheDocument()\n      expect(card).toHaveClass('bg-card', 'text-light-text', 'rounded-lg')\n    })\n\n    it('applies custom className', () => {\n      render(\n        <Card className=\"custom-card\" data-testid=\"card\">\n          <div>Card content</div>\n        </Card>\n      )\n      \n      const card = screen.getByTestId('card')\n      expect(card).toHaveClass('bg-card', 'custom-card')\n    })\n\n    it('forwards props correctly', () => {\n      render(\n        <Card data-testid=\"card\" role=\"region\" aria-label=\"Test card\">\n          <div>Card content</div>\n        </Card>\n      )\n      \n      const card = screen.getByTestId('card')\n      expect(card).toHaveAttribute('role', 'region')\n      expect(card).toHaveAttribute('aria-label', 'Test card')\n    })\n  })\n\n  describe('CardHeader', () => {\n    it('renders header content', () => {\n      render(\n        <Card>\n          <CardHeader>\n            <h2>Card Title</h2>\n          </CardHeader>\n        </Card>\n      )\n      \n      const header = screen.getByRole('heading', { level: 2 })\n      expect(header).toBeInTheDocument()\n      expect(header).toHaveTextContent('Card Title')\n    })\n\n    it('applies header styling', () => {\n      render(\n        <Card>\n          <CardHeader data-testid=\"header\">\n            <h2>Card Title</h2>\n          </CardHeader>\n        </Card>\n      )\n      \n      const header = screen.getByTestId('header')\n      expect(header).toHaveClass('flex', 'flex-col', 'space-y-1.5', 'pb-4')\n    })\n  })\n\n  describe('CardContent', () => {\n    it('renders content area', () => {\n      render(\n        <Card>\n          <CardContent data-testid=\"content\">\n            <p>This is card content</p>\n          </CardContent>\n        </Card>\n      )\n      \n      const content = screen.getByTestId('content')\n      expect(content).toBeInTheDocument()\n      expect(content).toBeInTheDocument()\n      expect(content).toHaveTextContent('This is card content')\n    })\n  })\n\n  describe('CardFooter', () => {\n    it('renders footer area', () => {\n      render(\n        <Card>\n          <CardFooter data-testid=\"footer\">\n            <button>Action</button>\n          </CardFooter>\n        </Card>\n      )\n      \n      const footer = screen.getByTestId('footer')\n      expect(footer).toBeInTheDocument()\n      expect(footer).toHaveClass('flex', 'items-center', 'pt-4')\n      \n      const button = screen.getByRole('button', { name: /action/i })\n      expect(button).toBeInTheDocument()\n    })\n  })\n\n  describe('Complete Card', () => {\n    it('renders all sections together', () => {\n      render(\n        <Card data-testid=\"complete-card\">\n          <CardHeader>\n            <h3>Complete Card</h3>\n          </CardHeader>\n          <CardContent>\n            <p>This card has all sections</p>\n          </CardContent>\n          <CardFooter>\n            <button>Save</button>\n            <button>Cancel</button>\n          </CardFooter>\n        </Card>\n      )\n      \n      const card = screen.getByTestId('complete-card')\n      expect(card).toBeInTheDocument()\n      \n      expect(screen.getByRole('heading', { level: 3 })).toHaveTextContent('Complete Card')\n      expect(screen.getByText('This card has all sections')).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /save/i })).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /cancel/i })).toBeInTheDocument()\n    })\n\n    it('maintains proper semantic structure', () => {\n      render(\n        <Card role=\"article\" aria-labelledby=\"card-title\">\n          <CardHeader>\n            <h2 id=\"card-title\">Article Title</h2>\n          </CardHeader>\n          <CardContent>\n            <p>Article content goes here</p>\n          </CardContent>\n        </Card>\n      )\n      \n      const card = screen.getByRole('article')\n      expect(card).toHaveAttribute('aria-labelledby', 'card-title')\n      \n      const title = screen.getByRole('heading', { level: 2 })\n      expect(title).toHaveAttribute('id', 'card-title')\n    })\n  })\n})\n"],"names":["describe","it","render","Card","data-testid","div","card","screen","getByTestId","expect","toBeInTheDocument","toHaveClass","className","role","aria-label","toHaveAttribute","CardHeader","h2","header","getByRole","level","toHaveTextContent","CardContent","p","content","CardFooter","button","footer","name","h3","getByText","aria-labelledby","id","title"],"mappings":"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"}