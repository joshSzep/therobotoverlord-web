{"version":3,"names":["cov_1p4u5j0qce","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","BadgesService","badgesService","_BaseService","BaseService","constructor","getBadges","filters","params","buildParams","undefined","getPaginated","getBadge","id","get","getBadgesByCategory","category","getBadgesByRarity","rarity","getUserBadges","userId","getMyBadges","getBadgeProgress","getBadgeProgressById","badgeId","getRecentlyAwarded","limit","getPopularBadges","getRareBadges","searchBadges","query","search","getBadgeStats","getBadgeLeaderboard","checkEligibility","claimBadge","post","createBadge","data","updateBadge","patch","deleteBadge","delete","awardBadge","reason","revokeBadge","bulkAwardBadge","userIds","getBadgeAuditLog","page","recalculateBadges","getBadgeAnalytics","uploadBadgeIcon","file","uploadFile","importBadges","exportBadges","format"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/services/BadgesService.ts"],"sourcesContent":["/**\n * Badges service for The Robot Overlord\n * Handles badge management, awarding, and badge-related operations\n */\n\nimport { BaseService } from './BaseService';\nimport { ApiResponse, PaginatedResponse } from '@/types/api';\nimport { UserBadge } from '@/types/user';\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  category: 'achievement' | 'participation' | 'moderation' | 'loyalty' | 'special' | 'seasonal';\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n  requirements: Array<{\n    type: 'posts_created' | 'upvotes_received' | 'topics_created' | 'days_active' | 'loyalty_score' | 'moderation_actions' | 'special_event';\n    target: number;\n    timeframe?: 'day' | 'week' | 'month' | 'year' | 'all';\n    description: string;\n  }>;\n  rewards: {\n    loyaltyPoints: number;\n    title?: string;\n    privileges?: string[];\n  };\n  isActive: boolean;\n  isSecret: boolean;\n  sortOrder: number;\n  totalAwarded: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface BadgeFilters {\n  category?: Badge['category'];\n  rarity?: Badge['rarity'];\n  isActive?: boolean;\n  isSecret?: boolean;\n  search?: string;\n  sortBy?: 'name' | 'rarity' | 'awarded' | 'created' | 'category';\n  page?: number;\n  limit?: number;\n}\n\nexport interface CreateBadgeData {\n  name: string;\n  description: string;\n  icon: string;\n  category: Badge['category'];\n  rarity: Badge['rarity'];\n  requirements: Badge['requirements'];\n  rewards: Badge['rewards'];\n  isSecret?: boolean;\n  sortOrder?: number;\n}\n\nexport class BadgesService extends BaseService {\n  constructor() {\n    super('/badges');\n  }\n\n  /**\n   * Get all badges with filtering\n   */\n  async getBadges(filters?: BadgeFilters): Promise<PaginatedResponse<Badge>> {\n    const params = filters ? this.buildParams(filters) : undefined;\n    return this.getPaginated<Badge>('', params);\n  }\n\n  /**\n   * Get badge by ID\n   */\n  async getBadge(id: string): Promise<ApiResponse<Badge & {\n    holders: Array<{\n      user: {\n        id: string;\n        username: string;\n        avatar?: string;\n      };\n      awardedAt: string;\n      awardedBy?: string;\n      reason?: string;\n    }>;\n    userProgress?: {\n      current: number;\n      target: number;\n      percentage: number;\n    };\n  }>> {\n    return this.get(`/${id}`);\n  }\n\n  /**\n   * Get badges by category\n   */\n  async getBadgesByCategory(category: Badge['category']): Promise<ApiResponse<Badge[]>> {\n    return this.get(`/category/${category}`);\n  }\n\n  /**\n   * Get badges by rarity\n   */\n  async getBadgesByRarity(rarity: Badge['rarity']): Promise<ApiResponse<Badge[]>> {\n    return this.get(`/rarity/${rarity}`);\n  }\n\n  /**\n   * Get user's badges\n   */\n  async getUserBadges(userId: string): Promise<ApiResponse<Array<UserBadge & {\n    badge: Badge;\n  }>>> {\n    return this.get(`/user/${userId}`);\n  }\n\n  /**\n   * Get current user's badges\n   */\n  async getMyBadges(): Promise<ApiResponse<Array<UserBadge & {\n    badge: Badge;\n  }>>> {\n    return this.get('/my-badges');\n  }\n\n  /**\n   * Get badge progress for current user\n   */\n  async getBadgeProgress(): Promise<ApiResponse<Array<{\n    badge: Badge;\n    progress: Array<{\n      requirement: Badge['requirements'][0];\n      current: number;\n      target: number;\n      percentage: number;\n      completed: boolean;\n    }>;\n    isEligible: boolean;\n    isAwarded: boolean;\n    awardedAt?: string;\n  }>>> {\n    return this.get('/progress');\n  }\n\n  /**\n   * Get badge progress for specific badge\n   */\n  async getBadgeProgressById(badgeId: string): Promise<ApiResponse<{\n    badge: Badge;\n    progress: Array<{\n      requirement: Badge['requirements'][0];\n      current: number;\n      target: number;\n      percentage: number;\n      completed: boolean;\n    }>;\n    isEligible: boolean;\n    isAwarded: boolean;\n    awardedAt?: string;\n  }>> {\n    return this.get(`/${badgeId}/progress`);\n  }\n\n  /**\n   * Get recently awarded badges\n   */\n  async getRecentlyAwarded(limit = 20): Promise<ApiResponse<Array<{\n    user: {\n      id: string;\n      username: string;\n      avatar?: string;\n    };\n    badge: Badge;\n    awardedAt: string;\n    awardedBy?: string;\n    reason?: string;\n  }>>> {\n    return this.get('/recent', { limit });\n  }\n\n  /**\n   * Get popular badges (most awarded)\n   */\n  async getPopularBadges(limit = 10): Promise<ApiResponse<Array<Badge & {\n    awardedCount: number;\n    recentAwards: number;\n  }>>> {\n    return this.get('/popular', { limit });\n  }\n\n  /**\n   * Get rare badges (least awarded)\n   */\n  async getRareBadges(limit = 10): Promise<ApiResponse<Array<Badge & {\n    awardedCount: number;\n  }>>> {\n    return this.get('/rare', { limit });\n  }\n\n  /**\n   * Search badges\n   */\n  async searchBadges(query: string, filters?: Omit<BadgeFilters, 'search'>): Promise<PaginatedResponse<Badge>> {\n    const params = this.buildParams({ search: query, ...filters });\n    return this.getPaginated<Badge>('/search', params);\n  }\n\n  /**\n   * Get badge statistics\n   */\n  async getBadgeStats(): Promise<ApiResponse<{\n    totalBadges: number;\n    totalAwarded: number;\n    categoryBreakdown: Record<string, number>;\n    rarityBreakdown: Record<string, number>;\n    averageAwardsPerBadge: number;\n    mostAwardedBadge: {\n      badge: Badge;\n      count: number;\n    };\n    rarest: {\n      badge: Badge;\n      count: number;\n    };\n    recentActivity: Array<{\n      date: string;\n      awarded: number;\n    }>;\n  }>> {\n    return this.get('/stats');\n  }\n\n  /**\n   * Get badge leaderboard (users with most badges)\n   */\n  async getBadgeLeaderboard(category?: Badge['category'], limit = 50): Promise<ApiResponse<Array<{\n    user: {\n      id: string;\n      username: string;\n      avatar?: string;\n      loyaltyScore: number;\n    };\n    badgeCount: number;\n    rarityScore: number;\n    categories: Record<string, number>;\n    latestBadge?: {\n      badge: Badge;\n      awardedAt: string;\n    };\n  }>>> {\n    const params = category ? { category, limit } : { limit };\n    return this.get('/leaderboard', params);\n  }\n\n  /**\n   * Check badge eligibility for current user\n   */\n  async checkEligibility(): Promise<ApiResponse<Array<{\n    badge: Badge;\n    isEligible: boolean;\n    missingRequirements: Array<{\n      requirement: Badge['requirements'][0];\n      current: number;\n      needed: number;\n    }>;\n  }>>> {\n    return this.get('/eligibility');\n  }\n\n  /**\n   * Claim eligible badge\n   */\n  async claimBadge(badgeId: string): Promise<ApiResponse<{\n    success: boolean;\n    badge?: Badge;\n    userBadge?: UserBadge;\n    message: string;\n  }>> {\n    return this.post(`/${badgeId}/claim`);\n  }\n\n  // Admin/Moderator endpoints\n\n  /**\n   * Create new badge (admin only)\n   */\n  async createBadge(data: CreateBadgeData): Promise<ApiResponse<Badge>> {\n    return this.post('', data);\n  }\n\n  /**\n   * Update badge (admin only)\n   */\n  async updateBadge(id: string, data: Partial<CreateBadgeData>): Promise<ApiResponse<Badge>> {\n    return this.patch(`/${id}`, data);\n  }\n\n  /**\n   * Delete badge (admin only)\n   */\n  async deleteBadge(id: string): Promise<ApiResponse<{ message: string }>> {\n    return this.delete(`/${id}`);\n  }\n\n  /**\n   * Award badge manually (admin/moderator only)\n   */\n  async awardBadge(badgeId: string, userId: string, reason?: string): Promise<ApiResponse<UserBadge>> {\n    return this.post(`/${badgeId}/award`, { userId, reason });\n  }\n\n  /**\n   * Revoke badge (admin only)\n   */\n  async revokeBadge(badgeId: string, userId: string, reason?: string): Promise<ApiResponse<{ message: string }>> {\n    return this.post(`/${badgeId}/revoke`, { userId, reason });\n  }\n\n  /**\n   * Bulk award badges (admin only)\n   */\n  async bulkAwardBadge(badgeId: string, userIds: string[], reason?: string): Promise<ApiResponse<{\n    success: string[];\n    failed: Array<{ userId: string; error: string }>;\n  }>> {\n    return this.post(`/${badgeId}/bulk-award`, { userIds, reason });\n  }\n\n  /**\n   * Get badge audit log (admin only)\n   */\n  async getBadgeAuditLog(badgeId?: string, page = 1, limit = 50): Promise<PaginatedResponse<{\n    id: string;\n    action: 'awarded' | 'revoked' | 'created' | 'updated' | 'deleted';\n    badgeId: string;\n    badge: Badge;\n    userId?: string;\n    user?: {\n      id: string;\n      username: string;\n    };\n    performedBy: string;\n    performer: {\n      id: string;\n      username: string;\n    };\n    reason?: string;\n    metadata?: Record<string, any>;\n    createdAt: string;\n  }>> {\n    const params = badgeId ? { badgeId, page, limit } : { page, limit };\n    return this.getPaginated('/audit-log', params);\n  }\n\n  /**\n   * Recalculate badge eligibility (admin only)\n   */\n  async recalculateBadges(userId?: string): Promise<ApiResponse<{\n    message: string;\n    processed: number;\n    awarded: number;\n  }>> {\n    const params = userId ? { userId } : undefined;\n    return this.post('/recalculate', params);\n  }\n\n  /**\n   * Get badge analytics (admin only)\n   */\n  async getBadgeAnalytics(badgeId?: string): Promise<ApiResponse<{\n    totalBadges: number;\n    totalAwarded: number;\n    awardingTrends: Array<{ date: string; awarded: number }>;\n    categoryDistribution: Record<string, number>;\n    rarityDistribution: Record<string, number>;\n    topPerformers: Array<{\n      user: { id: string; username: string };\n      badgeCount: number;\n    }>;\n    engagementMetrics: {\n      averageTimeToEarn: number;\n      completionRates: Record<string, number>;\n    };\n    badgeSpecific?: {\n      badge: Badge;\n      awardedCount: number;\n      averageTimeToEarn: number;\n      completionRate: number;\n      requirementProgress: Array<{\n        requirement: string;\n        averageProgress: number;\n      }>;\n    };\n  }>> {\n    const params = badgeId ? { badgeId } : undefined;\n    return this.get('/analytics', params);\n  }\n\n  /**\n   * Upload badge icon (admin only)\n   */\n  async uploadBadgeIcon(file: File): Promise<ApiResponse<{ iconUrl: string; iconId: string }>> {\n    return this.uploadFile('/upload/icon', file);\n  }\n\n  /**\n   * Import badges from file (admin only)\n   */\n  async importBadges(file: File): Promise<ApiResponse<{\n    imported: number;\n    failed: Array<{ row: number; error: string }>;\n    badges: Badge[];\n  }>> {\n    return this.uploadFile('/import', file);\n  }\n\n  /**\n   * Export badges data (admin only)\n   */\n  async exportBadges(format: 'json' | 'csv' = 'json'): Promise<ApiResponse<{ downloadUrl: string; expiresAt: string }>> {\n    return this.get('/export', { format });\n  }\n}\n\n// Export singleton instance\nexport const badgesService = new BadgesService();\n"],"mappings":"AAAA;;;GAGC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;U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","ignoreList":[]}