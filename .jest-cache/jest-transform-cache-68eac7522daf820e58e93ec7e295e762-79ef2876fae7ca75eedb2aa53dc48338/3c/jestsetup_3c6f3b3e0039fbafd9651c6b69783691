43b16dc23e307b1eb7d1221916bc5a3c
"use strict";
// Mock Next.js router
jest.mock('next/router', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn(),
                pathname: '/feed',
                query: {},
                asPath: '/feed',
                route: '/feed'
            })
    }));
// Mock Next.js Image component
jest.mock('next/image', ()=>({
        __esModule: true,
        default: (props)=>{
            // eslint-disable-next-line @next/next/no-img-element
            return React.createElement('img', {
                ...props,
                alt: props.alt || ''
            });
        }
    }));
// Mock AuthContext globally
jest.mock('@/contexts/AuthContext', ()=>({
        AuthProvider: ({ children })=>children,
        useAuth: ()=>({
                user: {
                    id: '1',
                    username: 'testuser',
                    email: 'test@example.com',
                    displayName: 'Test User',
                    name: 'Test User'
                },
                isAuthenticated: true,
                isLoading: false,
                error: null,
                login: jest.fn(),
                loginWithGoogle: jest.fn(),
                logout: jest.fn(),
                register: jest.fn(),
                updateProfile: jest.fn(),
                refreshToken: jest.fn(),
                clearError: jest.fn(),
                updateUser: jest.fn()
            }),
        useRequireAuth: ()=>({
                user: {
                    id: '1',
                    username: 'testuser',
                    email: 'test@example.com',
                    displayName: 'Test User',
                    name: 'Test User'
                },
                isAuthenticated: true,
                isLoading: false,
                error: null,
                login: jest.fn(),
                loginWithGoogle: jest.fn(),
                logout: jest.fn(),
                register: jest.fn(),
                updateProfile: jest.fn(),
                refreshToken: jest.fn(),
                clearError: jest.fn(),
                updateUser: jest.fn()
            })
    }));
// Mock API client
jest.mock('@/lib/api-client', ()=>({
        apiClient: {
            get: jest.fn(),
            post: jest.fn(),
            put: jest.fn(),
            delete: jest.fn(),
            setAuthToken: jest.fn(),
            clearAuthToken: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.localStorage = localStorageMock;
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;
// Mock fetch
global.fetch = jest.fn();
// Mock console methods to reduce noise in tests
global.console = {
    ...console,
    // Uncomment to ignore specific console methods
    // log: jest.fn(),
    // debug: jest.fn(),
    // info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn()
};
// Setup custom matchers
expect.extend({
    toBeInTheDocument: require('@testing-library/jest-dom/matchers').toBeInTheDocument
});
// Clean up after each test
afterEach(()=>{
    jest.clearAllMocks();
});

//# sourceMappingURL=data:application/json;base64,