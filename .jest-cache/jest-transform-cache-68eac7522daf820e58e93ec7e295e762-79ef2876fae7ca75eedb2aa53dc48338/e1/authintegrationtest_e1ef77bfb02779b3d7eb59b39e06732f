6e19713f81e72b9963a2972d35ac9bed
"use strict";
jest.mock('@/services/authService', ()=>({
        authService: mockAuthService
    }));
// Mock authentication hooks - removed non-existent module
// Mock authentication context with stable provider
jest.mock('@/contexts/AuthContext', ()=>({
        AuthProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "auth-provider",
                children: children
            }),
        useAuthContext: jest.fn(()=>({
                user: null,
                loading: false,
                login: mockAuthService.login,
                signup: mockAuthService.signup,
                logout: mockAuthService.logout,
                isAuthenticated: false
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _testutils = require("../utils/test-utils");
const _react1 = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock authentication components and hooks
const MockLoginForm = ({ onSubmit })=>{
    const [formData, setFormData] = _react1.default.useState({
        email: '',
        password: ''
    });
    const [error, setError] = _react1.default.useState('');
    const [validationErrors, setValidationErrors] = _react1.default.useState({
        email: '',
        password: ''
    });
    const handleSubmit = async (e)=>{
        e.preventDefault();
        const form = e.target;
        const formDataObj = new FormData(form);
        const email = formDataObj.get('email');
        const password = formDataObj.get('password');
        // Validation
        const errors = {
            email: '',
            password: ''
        };
        if (!email) errors.email = 'Email is required';
        if (!password) errors.password = 'Password is required';
        setValidationErrors(errors);
        if (errors.email || errors.password) {
            return;
        }
        try {
            await onSubmit({
                email,
                password
            });
            setError('');
        } catch (err) {
            setError(err.message || 'Invalid credentials');
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                "data-testid": "login-form",
                onSubmit: handleSubmit,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        "data-testid": "email-input",
                        name: "email",
                        type: "email",
                        placeholder: "Email"
                    }),
                    validationErrors.email && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "email-error",
                        children: validationErrors.email
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        "data-testid": "password-input",
                        name: "password",
                        type: "password",
                        placeholder: "Password"
                    }),
                    validationErrors.password && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "password-error",
                        children: validationErrors.password
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "login-button",
                        type: "submit",
                        children: "Sign In"
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "error-message",
                children: error
            })
        ]
    });
};
const MockSignupForm = ({ onSubmit })=>{
    const [formData, setFormData] = _react1.default.useState({
        email: '',
        password: '',
        name: ''
    });
    const [error, setError] = _react1.default.useState('');
    const [validationErrors, setValidationErrors] = _react1.default.useState({
        email: '',
        password: '',
        name: ''
    });
    const handleSubmit = async (e)=>{
        e.preventDefault();
        const form = e.target;
        const formDataObj = new FormData(form);
        const email = formDataObj.get('email');
        const password = formDataObj.get('password');
        const name = formDataObj.get('name');
        // Validation
        const errors = {
            email: '',
            password: '',
            name: ''
        };
        if (!name) errors.name = 'Name is required';
        if (!email) errors.email = 'Email is required';
        if (!password) errors.password = 'Password is required';
        setValidationErrors(errors);
        if (errors.name || errors.email || errors.password) {
            return;
        }
        try {
            await onSubmit({
                email,
                password,
                name
            });
            setError('');
        } catch (err) {
            setError(err.message || 'Signup failed');
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                "data-testid": "signup-form",
                onSubmit: handleSubmit,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        "data-testid": "name-input",
                        name: "name",
                        type: "text",
                        placeholder: "Name"
                    }),
                    validationErrors.name && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "name-error",
                        children: validationErrors.name
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        "data-testid": "email-input",
                        name: "email",
                        type: "email",
                        placeholder: "Email"
                    }),
                    validationErrors.email && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "email-error",
                        children: validationErrors.email
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        "data-testid": "password-input",
                        name: "password",
                        type: "password",
                        placeholder: "Password"
                    }),
                    validationErrors.password && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "password-error",
                        children: validationErrors.password
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "signup-button",
                        type: "submit",
                        children: "Sign Up"
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "error-message",
                children: error
            })
        ]
    });
};
// Mock authentication service with stable references
const mockAuthService = {
    login: jest.fn(),
    signup: jest.fn(),
    logout: jest.fn(),
    getCurrentUser: jest.fn()
};
describe('Authentication Flow Integration', ()=>{
    const mockUser = {
        id: '1',
        username: 'testuser',
        email: 'test@example.com'
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        localStorage.clear();
        sessionStorage.clear();
    });
    describe('Login Flow', ()=>{
        it('successfully logs in user with valid credentials', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.login.mockResolvedValueOnce({
                user: mockUser,
                token: 'mock-jwt-token',
                refreshToken: 'mock-refresh-token'
            });
            const TestComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoginForm, {
                    onSubmit: async (data)=>{
                        await mockAuthService.login(data);
                    }
                });
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            // Fill in login form
            await user.type(_react.screen.getByTestId('email-input'), 'test@example.com');
            await user.type(_react.screen.getByTestId('password-input'), 'password123');
            // Submit form
            await user.click(_react.screen.getByTestId('login-button'));
            // Should complete login successfully
            await (0, _react.waitFor)(()=>{
                expect(mockAuthService.login).toHaveBeenCalledWith({
                    email: 'test@example.com',
                    password: 'password123'
                });
            });
        });
        it('handles login errors gracefully', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.login.mockRejectedValueOnce(new Error('Invalid credentials'));
            const TestComponent = ()=>{
                const handleSubmit = async (data)=>{
                    await mockAuthService.login(data);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoginForm, {
                    onSubmit: handleSubmit
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            await user.type(_react.screen.getByTestId('email-input'), 'wrong@example.com');
            await user.type(_react.screen.getByTestId('password-input'), 'wrongpassword');
            await user.click(_react.screen.getByTestId('login-button'));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId('error-message')).toHaveTextContent('Invalid credentials');
            });
        });
        it('validates form inputs before submission', async ()=>{
            const user = _userevent.default.setup();
            const TestComponent = ()=>{
                const handleSubmit = async (data)=>{
                    await mockAuthService.login(data);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoginForm, {
                    onSubmit: handleSubmit
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            // Submit without filling fields
            await user.click(_react.screen.getByTestId('login-button'));
            expect(_react.screen.getByTestId('email-error')).toHaveTextContent('Email is required');
            expect(_react.screen.getByTestId('password-error')).toHaveTextContent('Password is required');
            expect(mockAuthService.login).not.toHaveBeenCalled();
        });
    });
    describe('Signup Flow', ()=>{
        it('successfully creates new user account', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.signup.mockResolvedValueOnce({
                user: mockUser,
                token: 'mock-jwt-token'
            });
            const TestComponent = ()=>{
                const handleSubmit = async (data)=>{
                    await mockAuthService.signup(data);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockSignupForm, {
                    onSubmit: handleSubmit
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            await user.type(_react.screen.getByTestId('name-input'), 'newuser');
            await user.type(_react.screen.getByTestId('email-input'), 'new@example.com');
            await user.type(_react.screen.getByTestId('password-input'), 'newpassword123');
            await user.click(_react.screen.getByTestId('signup-button'));
            await (0, _react.waitFor)(()=>{
                expect(mockAuthService.signup).toHaveBeenCalledWith({
                    name: 'newuser',
                    email: 'new@example.com',
                    password: 'newpassword123'
                });
            });
        });
        it('handles signup validation errors', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.signup.mockRejectedValueOnce(new Error('Email already exists'));
            const TestComponent = ()=>{
                const handleSubmit = async (data)=>{
                    await mockAuthService.signup(data);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(MockSignupForm, {
                    onSubmit: handleSubmit
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            await user.type(_react.screen.getByTestId('name-input'), 'existinguser');
            await user.type(_react.screen.getByTestId('email-input'), 'existing@example.com');
            await user.type(_react.screen.getByTestId('password-input'), 'password123');
            await user.click(_react.screen.getByTestId('signup-button'));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId('error-message')).toHaveTextContent('Email already exists');
            });
        });
    });
    describe('Logout Flow', ()=>{
        it('successfully logs out user', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.logout.mockResolvedValueOnce({});
            const TestComponent = ()=>{
                const [isAuthenticated, setIsAuthenticated] = _react1.default.useState(true);
                const handleLogout = async ()=>{
                    await mockAuthService.logout();
                    setIsAuthenticated(false);
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: isAuthenticated ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                "data-testid": "user-info",
                                children: [
                                    "Welcome, ",
                                    mockUser.username
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                "data-testid": "logout-button",
                                onClick: handleLogout,
                                children: "Logout"
                            })
                        ]
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "logged-out",
                        children: "Please log in"
                    })
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            expect(_react.screen.getByTestId('user-info')).toHaveTextContent('Welcome, testuser');
            await user.click(_react.screen.getByTestId('logout-button'));
            await (0, _react.waitFor)(()=>{
                expect(mockAuthService.logout).toHaveBeenCalled();
                expect(_react.screen.getByTestId('logged-out')).toBeInTheDocument();
            });
        });
    });
    describe('Protected Routes', ()=>{
        it('redirects unauthenticated users to login', ()=>{
            const ProtectedComponent = ({ user })=>{
                if (!user) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "login-redirect",
                        children: "Please log in"
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "protected-content",
                    children: "Protected content"
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedComponent, {
                user: null
            }));
            expect(_react.screen.getByTestId('login-redirect')).toBeInTheDocument();
            expect(_react.screen.queryByTestId('protected-content')).not.toBeInTheDocument();
        });
        it('allows authenticated users to access protected content', ()=>{
            const ProtectedComponent = ({ user })=>{
                if (!user) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "login-redirect",
                        children: "Please log in"
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "protected-content",
                    children: "Protected content"
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedComponent, {
                user: {
                    id: '1',
                    username: 'testuser',
                    email: 'test@example.com'
                }
            }));
            expect(_react.screen.getByTestId('protected-content')).toBeInTheDocument();
            expect(_react.screen.queryByTestId('login-redirect')).not.toBeInTheDocument();
        });
    });
    // ...
    describe('Session Persistence', ()=>{
        it('restores user session on page reload', async ()=>{
            // Mock stored session
            localStorage.setItem('auth_token', 'stored-token');
            mockAuthService.getCurrentUser.mockResolvedValueOnce(mockUser);
            const TestComponent = ({ user, loading })=>{
                _react1.default.useEffect(()=>{
                    const token = localStorage.getItem('auth_token');
                    if (token && !user) {
                        mockAuthService.getCurrentUser();
                    }
                }, [
                    user
                ]);
                if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "loading",
                    children: "Loading..."
                });
                if (user) return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "user-restored",
                    children: [
                        "Welcome back, ",
                        user.username
                    ]
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "no-session",
                    children: "No session"
                });
            };
            (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            await (0, _react.waitFor)(()=>{
                expect(mockAuthService.getCurrentUser).toHaveBeenCalled();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,