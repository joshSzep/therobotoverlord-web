{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/integration/auth.integration.test.tsx"],"sourcesContent":["import { screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { integrationRender } from '../utils/test-utils'\nimport React from 'react'\n\n// Mock authentication components and hooks\nconst MockLoginForm = ({ onSubmit }: { onSubmit: (data: any) => void }) => {\n  const [formData, setFormData] = React.useState({ email: '', password: '' })\n  const [error, setError] = React.useState('')\n  const [validationErrors, setValidationErrors] = React.useState({ email: '', password: '' })\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    const form = e.target as HTMLFormElement\n    const formDataObj = new FormData(form)\n    const email = formDataObj.get('email') as string\n    const password = formDataObj.get('password') as string\n    \n    // Validation\n    const errors = { email: '', password: '' }\n    if (!email) errors.email = 'Email is required'\n    if (!password) errors.password = 'Password is required'\n    \n    setValidationErrors(errors)\n    \n    if (errors.email || errors.password) {\n      return\n    }\n    \n    try {\n      await onSubmit({ email, password })\n      setError('')\n    } catch (err: any) {\n      setError(err.message || 'Invalid credentials')\n    }\n  }\n\n  return (\n    <div>\n      <form data-testid=\"login-form\" onSubmit={handleSubmit}>\n        <input\n          data-testid=\"email-input\"\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        {validationErrors.email && <div data-testid=\"email-error\">{validationErrors.email}</div>}\n        <input\n          data-testid=\"password-input\"\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        {validationErrors.password && <div data-testid=\"password-error\">{validationErrors.password}</div>}\n        <button data-testid=\"login-button\" type=\"submit\">\n          Sign In\n        </button>\n      </form>\n      {error && <div data-testid=\"error-message\">{error}</div>}\n    </div>\n  )\n}\n\nconst MockSignupForm = ({ onSubmit }: { onSubmit: (data: any) => void }) => {\n  const [formData, setFormData] = React.useState({ email: '', password: '', name: '' })\n  const [error, setError] = React.useState('')\n  const [validationErrors, setValidationErrors] = React.useState({ email: '', password: '', name: '' })\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    const form = e.target as HTMLFormElement\n    const formDataObj = new FormData(form)\n    const email = formDataObj.get('email') as string\n    const password = formDataObj.get('password') as string\n    const name = formDataObj.get('name') as string\n    \n    // Validation\n    const errors = { email: '', password: '', name: '' }\n    if (!name) errors.name = 'Name is required'\n    if (!email) errors.email = 'Email is required'\n    if (!password) errors.password = 'Password is required'\n    \n    setValidationErrors(errors)\n    \n    if (errors.name || errors.email || errors.password) {\n      return\n    }\n    \n    try {\n      await onSubmit({ email, password, name })\n      setError('')\n    } catch (err: any) {\n      setError(err.message || 'Signup failed')\n    }\n  }\n\n  return (\n    <div>\n      <form data-testid=\"signup-form\" onSubmit={handleSubmit}>\n        <input\n          data-testid=\"name-input\"\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Name\"\n        />\n        {validationErrors.name && <div data-testid=\"name-error\">{validationErrors.name}</div>}\n        <input\n          data-testid=\"email-input\"\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n        />\n        {validationErrors.email && <div data-testid=\"email-error\">{validationErrors.email}</div>}\n        <input\n          data-testid=\"password-input\"\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        {validationErrors.password && <div data-testid=\"password-error\">{validationErrors.password}</div>}\n        <button data-testid=\"signup-button\" type=\"submit\">\n          Sign Up\n        </button>\n      </form>\n      {error && <div data-testid=\"error-message\">{error}</div>}\n    </div>\n  )\n}\n\n// Mock authentication service with stable references\nconst mockAuthService = {\n  login: jest.fn(),\n  signup: jest.fn(),\n  logout: jest.fn(),\n  getCurrentUser: jest.fn()\n}\n\njest.mock('@/services/authService', () => ({\n  authService: mockAuthService\n}))\n\n// Mock authentication hooks - removed non-existent module\n\n// Mock authentication context with stable provider\njest.mock('@/contexts/AuthContext', () => ({\n  AuthProvider: ({ children }: { children: React.ReactNode }) => (\n    <div data-testid=\"auth-provider\">{children}</div>\n  ),\n  useAuthContext: jest.fn(() => ({\n    user: null,\n    loading: false,\n    login: mockAuthService.login,\n    signup: mockAuthService.signup,\n    logout: mockAuthService.logout,\n    isAuthenticated: false\n  }))\n}))\n\ndescribe('Authentication Flow Integration', () => {\n  const mockUser = {\n    id: '1',\n    username: 'testuser',\n    email: 'test@example.com'\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    localStorage.clear()\n    sessionStorage.clear()\n  })\n\n  describe('Login Flow', () => {\n    it('successfully logs in user with valid credentials', async () => {\n      const user = userEvent.setup()\n      \n      mockAuthService.login.mockResolvedValueOnce({\n        user: mockUser,\n        token: 'mock-jwt-token',\n        refreshToken: 'mock-refresh-token'\n      })\n\n      const TestComponent = () => (\n        <MockLoginForm \n          onSubmit={async (data: any) => {\n            await mockAuthService.login(data)\n          }}\n        />\n      )\n\n      integrationRender(<TestComponent />)\n\n      // Fill in login form\n      await user.type(screen.getByTestId('email-input'), 'test@example.com')\n      await user.type(screen.getByTestId('password-input'), 'password123')\n      \n      // Submit form\n      await user.click(screen.getByTestId('login-button'))\n\n      // Should complete login successfully\n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalledWith({\n          email: 'test@example.com',\n          password: 'password123'\n        })\n      })\n\n    })\n\n    it('handles login errors gracefully', async () => {\n      const user = userEvent.setup()\n      \n      mockAuthService.login.mockRejectedValueOnce(\n        new Error('Invalid credentials')\n      )\n\n      const TestComponent = () => {\n        const handleSubmit = async (data: any) => {\n          await mockAuthService.login(data)\n        }\n\n        return (\n          <MockLoginForm onSubmit={handleSubmit} />\n        )\n      }\n\n      integrationRender(<TestComponent />)\n\n      await user.type(screen.getByTestId('email-input'), 'wrong@example.com')\n      await user.type(screen.getByTestId('password-input'), 'wrongpassword')\n      await user.click(screen.getByTestId('login-button'))\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Invalid credentials')\n      })\n    })\n\n    it('validates form inputs before submission', async () => {\n      const user = userEvent.setup()\n      \n      const TestComponent = () => {\n        const handleSubmit = async (data: any) => {\n          await mockAuthService.login(data)\n        }\n\n        return (\n          <MockLoginForm onSubmit={handleSubmit} />\n        )\n      }\n\n      integrationRender(<TestComponent />)\n\n      // Submit without filling fields\n      await user.click(screen.getByTestId('login-button'))\n\n      expect(screen.getByTestId('email-error')).toHaveTextContent('Email is required')\n      expect(screen.getByTestId('password-error')).toHaveTextContent('Password is required')\n      expect(mockAuthService.login).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('Signup Flow', () => {\n    it('successfully creates new user account', async () => {\n      const user = userEvent.setup()\n      \n      mockAuthService.signup.mockResolvedValueOnce({\n        user: mockUser,\n        token: 'mock-jwt-token'\n      })\n\n      const TestComponent = () => {\n        const handleSubmit = async (data: any) => {\n          await mockAuthService.signup(data)\n        }\n\n        return (\n          <MockSignupForm \n            onSubmit={handleSubmit}\n          />\n        )\n      }\n\n      integrationRender(<TestComponent />)\n\n      await user.type(screen.getByTestId('name-input'), 'newuser')\n      await user.type(screen.getByTestId('email-input'), 'new@example.com')\n      await user.type(screen.getByTestId('password-input'), 'newpassword123')\n      \n      await user.click(screen.getByTestId('signup-button'))\n\n      await waitFor(() => {\n        expect(mockAuthService.signup).toHaveBeenCalledWith({\n          name: 'newuser',\n          email: 'new@example.com',\n          password: 'newpassword123'\n        })\n      })\n    })\n\n    it('handles signup validation errors', async () => {\n      const user = userEvent.setup()\n      \n      mockAuthService.signup.mockRejectedValueOnce(\n        new Error('Email already exists')\n      )\n\n      const TestComponent = () => {\n        const handleSubmit = async (data: any) => {\n          await mockAuthService.signup(data)\n        }\n\n        return (\n          <MockSignupForm \n            onSubmit={handleSubmit}\n          />\n        )\n      }\n\n      integrationRender(<TestComponent />)\n\n      await user.type(screen.getByTestId('name-input'), 'existinguser')\n      await user.type(screen.getByTestId('email-input'), 'existing@example.com')\n      await user.type(screen.getByTestId('password-input'), 'password123')\n      \n      await user.click(screen.getByTestId('signup-button'))\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Email already exists')\n      })\n    })\n  })\n\n  describe('Logout Flow', () => {\n    it('successfully logs out user', async () => {\n      const user = userEvent.setup()\n      \n      mockAuthService.logout.mockResolvedValueOnce({})\n\n      const TestComponent = () => {\n        const [isAuthenticated, setIsAuthenticated] = React.useState(true)\n        \n        const handleLogout = async () => {\n          await mockAuthService.logout()\n          setIsAuthenticated(false)\n        }\n\n        return (\n          <div>\n            {isAuthenticated ? (\n              <div>\n                <span data-testid=\"user-info\">Welcome, {mockUser.username}</span>\n                <button data-testid=\"logout-button\" onClick={handleLogout}>\n                  Logout\n                </button>\n              </div>\n            ) : (\n              <div data-testid=\"logged-out\">Please log in</div>\n            )}\n          </div>\n        )\n      }\n\n      integrationRender(<TestComponent />)\n\n      expect(screen.getByTestId('user-info')).toHaveTextContent('Welcome, testuser')\n      \n      await user.click(screen.getByTestId('logout-button'))\n\n      await waitFor(() => {\n        expect(mockAuthService.logout).toHaveBeenCalled()\n        expect(screen.getByTestId('logged-out')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Protected Routes', () => {\n    it('redirects unauthenticated users to login', () => {\n      const ProtectedComponent = ({ user }: any) => {\n        if (!user) {\n          return <div data-testid=\"login-redirect\">Please log in</div>\n        }\n        return <div data-testid=\"protected-content\">Protected content</div>\n      }\n\n      integrationRender(<ProtectedComponent user={null} />)\n\n      expect(screen.getByTestId('login-redirect')).toBeInTheDocument()\n      expect(screen.queryByTestId('protected-content')).not.toBeInTheDocument()\n    })\n\n    it('allows authenticated users to access protected content', () => {\n      const ProtectedComponent = ({ user }: any) => {\n        if (!user) {\n          return <div data-testid=\"login-redirect\">Please log in</div>\n        }\n        return <div data-testid=\"protected-content\">Protected content</div>\n      }\n\n      integrationRender(<ProtectedComponent user={{ id: '1', username: 'testuser', email: 'test@example.com' }} />)\n\n      expect(screen.getByTestId('protected-content')).toBeInTheDocument()\n      expect(screen.queryByTestId('login-redirect')).not.toBeInTheDocument()\n    })\n  })\n\n// ...\n  describe('Session Persistence', () => {\n    it('restores user session on page reload', async () => {\n      // Mock stored session\n      localStorage.setItem('auth_token', 'stored-token')\n      \n      mockAuthService.getCurrentUser.mockResolvedValueOnce(mockUser)\n\n      const TestComponent = ({ user, loading }: any) => {\n        React.useEffect(() => {\n          const token = localStorage.getItem('auth_token')\n          if (token && !user) {\n            mockAuthService.getCurrentUser()\n          }\n        }, [user])\n\n        if (loading) return <div data-testid=\"loading\">Loading...</div>\n        if (user) return <div data-testid=\"user-restored\">Welcome back, {user.username}</div>\n        return <div data-testid=\"no-session\">No session</div>\n      }\n\n      integrationRender(<TestComponent />)\n\n      await waitFor(() => {\n        expect(mockAuthService.getCurrentUser).toHaveBeenCalled()\n      })\n    })\n  })\n})\n"],"names":["jest","mock","authService","mockAuthService","AuthProvider","children","div","data-testid","useAuthContext","fn","user","loading","login","signup","logout","isAuthenticated","MockLoginForm","onSubmit","formData","setFormData","React","useState","email","password","error","setError","validationErrors","setValidationErrors","handleSubmit","e","preventDefault","form","target","formDataObj","FormData","get","errors","err","message","input","name","type","placeholder","button","MockSignupForm","getCurrentUser","describe","mockUser","id","username","beforeEach","clearAllMocks","localStorage","clear","sessionStorage","it","userEvent","setup","mockResolvedValueOnce","token","refreshToken","TestComponent","data","integrationRender","screen","getByTestId","click","waitFor","expect","toHaveBeenCalledWith","mockRejectedValueOnce","Error","toHaveTextContent","not","toHaveBeenCalled","setIsAuthenticated","handleLogout","span","onClick","toBeInTheDocument","ProtectedComponent","queryByTestId","setItem","useEffect","getItem"],"mappings":"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"}