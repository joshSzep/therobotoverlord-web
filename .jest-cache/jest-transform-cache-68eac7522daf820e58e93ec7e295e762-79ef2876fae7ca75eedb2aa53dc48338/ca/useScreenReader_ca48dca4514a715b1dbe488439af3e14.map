{"version":3,"names":["cov_mgyik18qe","actualCoverage","s","default","f","_default","useActionAnnouncements","useFormAnnouncements","useLoadingAnnouncements","useNavigationAnnouncements","useScreenReader","useSearchAnnouncements","useStatusAnnouncements","liveRegionRef","_react","useRef","timeoutRef","useEffect","window","b","liveRegion","document","getElementById","createElement","id","setAttribute","className","body","appendChild","current","clearTimeout","announce","useCallback","message","priority","trim","textContent","setTimeout","announceImportant","announceFieldError","fieldName","error","announceFieldSuccess","announceFormSubmission","success","announcePageChange","pageName","announceTabChange","tabName","announceModalOpen","modalTitle","announceModalClose","announceLoadingStart","resource","announceLoadingComplete","count","undefined","announceLoadingError","announceEmptyState","announceActionSuccess","action","target","announceActionError","announceSelectionChange","selected","total","announceFilterChange","filterType","value","resultCount","announceStatusChange","item","oldStatus","newStatus","announceNotification","type","announcement","charAt","toUpperCase","slice","announceProgress","task","percentage","Math","round","announceSearchStart","query","announceSearchResults","announceSuggestion","suggestion","position"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/hooks/useScreenReader.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useRef, useEffect } from 'react';\n\n// Hook for managing screen reader announcements\nexport const useScreenReader = () => {\n  const liveRegionRef = useRef<HTMLDivElement | null>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Create live region if it doesn't exist\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    let liveRegion = document.getElementById('screen-reader-announcements') as HTMLDivElement;\n    \n    if (!liveRegion) {\n      liveRegion = document.createElement('div');\n      liveRegion.id = 'screen-reader-announcements';\n      liveRegion.setAttribute('aria-live', 'polite');\n      liveRegion.setAttribute('aria-atomic', 'true');\n      liveRegion.className = 'sr-only';\n      document.body.appendChild(liveRegion);\n    }\n    \n    liveRegionRef.current = liveRegion;\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Announce message to screen readers\n  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    if (!liveRegionRef.current || !message.trim()) return;\n\n    // Clear any pending announcements\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    // Set the priority\n    liveRegionRef.current.setAttribute('aria-live', priority);\n    \n    // Clear previous content first\n    liveRegionRef.current.textContent = '';\n    \n    // Add new content after a brief delay to ensure screen readers pick it up\n    timeoutRef.current = setTimeout(() => {\n      if (liveRegionRef.current) {\n        liveRegionRef.current.textContent = message;\n      }\n    }, 100);\n  }, []);\n\n  // Announce with assertive priority (interrupts current speech)\n  const announceImportant = useCallback((message: string) => {\n    announce(message, 'assertive');\n  }, [announce]);\n\n  return {\n    announce,\n    announceImportant\n  };\n};\n\n// Hook for form validation announcements\nexport const useFormAnnouncements = () => {\n  const { announce, announceImportant } = useScreenReader();\n\n  const announceFieldError = useCallback((fieldName: string, error: string) => {\n    announceImportant(`Error in ${fieldName}: ${error}`);\n  }, [announceImportant]);\n\n  const announceFieldSuccess = useCallback((fieldName: string) => {\n    announce(`${fieldName} is valid`);\n  }, [announce]);\n\n  const announceFormSubmission = useCallback((success: boolean, message?: string) => {\n    if (success) {\n      announce(message || 'Form submitted successfully');\n    } else {\n      announceImportant(message || 'Form submission failed. Please check for errors.');\n    }\n  }, [announce, announceImportant]);\n\n  return {\n    announceFieldError,\n    announceFieldSuccess,\n    announceFormSubmission\n  };\n};\n\n// Hook for navigation announcements\nexport const useNavigationAnnouncements = () => {\n  const { announce } = useScreenReader();\n\n  const announcePageChange = useCallback((pageName: string) => {\n    announce(`Navigated to ${pageName}`);\n  }, [announce]);\n\n  const announceTabChange = useCallback((tabName: string) => {\n    announce(`Switched to ${tabName} tab`);\n  }, [announce]);\n\n  const announceModalOpen = useCallback((modalTitle: string) => {\n    announce(`${modalTitle} dialog opened`);\n  }, [announce]);\n\n  const announceModalClose = useCallback(() => {\n    announce('Dialog closed');\n  }, [announce]);\n\n  return {\n    announcePageChange,\n    announceTabChange,\n    announceModalOpen,\n    announceModalClose\n  };\n};\n\n// Hook for data loading announcements\nexport const useLoadingAnnouncements = () => {\n  const { announce, announceImportant } = useScreenReader();\n\n  const announceLoadingStart = useCallback((resource: string) => {\n    announce(`Loading ${resource}`);\n  }, [announce]);\n\n  const announceLoadingComplete = useCallback((resource: string, count?: number) => {\n    const message = count !== undefined \n      ? `Loaded ${count} ${resource}${count !== 1 ? 's' : ''}`\n      : `${resource} loaded`;\n    announce(message);\n  }, [announce]);\n\n  const announceLoadingError = useCallback((resource: string, error?: string) => {\n    announceImportant(`Failed to load ${resource}${error ? `: ${error}` : ''}`);\n  }, [announceImportant]);\n\n  const announceEmptyState = useCallback((resource: string) => {\n    announce(`No ${resource} found`);\n  }, [announce]);\n\n  return {\n    announceLoadingStart,\n    announceLoadingComplete,\n    announceLoadingError,\n    announceEmptyState\n  };\n};\n\n// Hook for action announcements\nexport const useActionAnnouncements = () => {\n  const { announce, announceImportant } = useScreenReader();\n\n  const announceActionSuccess = useCallback((action: string, target?: string) => {\n    const message = target ? `${action} ${target} successfully` : `${action} completed successfully`;\n    announce(message);\n  }, [announce]);\n\n  const announceActionError = useCallback((action: string, error?: string, target?: string) => {\n    const message = target \n      ? `Failed to ${action} ${target}${error ? `: ${error}` : ''}`\n      : `${action} failed${error ? `: ${error}` : ''}`;\n    announceImportant(message);\n  }, [announceImportant]);\n\n  const announceSelectionChange = useCallback((selected: string | number, total?: number) => {\n    const message = total !== undefined \n      ? `${selected} of ${total} selected`\n      : `Selected ${selected}`;\n    announce(message);\n  }, [announce]);\n\n  const announceFilterChange = useCallback((filterType: string, value: string, resultCount?: number) => {\n    const message = resultCount !== undefined\n      ? `Filtered by ${filterType}: ${value}. ${resultCount} results found`\n      : `Filtered by ${filterType}: ${value}`;\n    announce(message);\n  }, [announce]);\n\n  return {\n    announceActionSuccess,\n    announceActionError,\n    announceSelectionChange,\n    announceFilterChange\n  };\n};\n\n// Hook for status announcements\nexport const useStatusAnnouncements = () => {\n  const { announce, announceImportant } = useScreenReader();\n\n  const announceStatusChange = useCallback((item: string, oldStatus: string, newStatus: string) => {\n    announce(`${item} status changed from ${oldStatus} to ${newStatus}`);\n  }, [announce]);\n\n  const announceNotification = useCallback((type: 'info' | 'warning' | 'error' | 'success', message: string) => {\n    const priority = type === 'error' || type === 'warning' ? 'assertive' : 'polite';\n    const announcement = `${type.charAt(0).toUpperCase() + type.slice(1)}: ${message}`;\n    \n    if (priority === 'assertive') {\n      announceImportant(announcement);\n    } else {\n      announce(announcement);\n    }\n  }, [announce, announceImportant]);\n\n  const announceProgress = useCallback((current: number, total: number, task?: string) => {\n    const percentage = Math.round((current / total) * 100);\n    const message = task \n      ? `${task}: ${percentage}% complete (${current} of ${total})`\n      : `${percentage}% complete (${current} of ${total})`;\n    announce(message);\n  }, [announce]);\n\n  return {\n    announceStatusChange,\n    announceNotification,\n    announceProgress\n  };\n};\n\n// Hook for search announcements\nexport const useSearchAnnouncements = () => {\n  const { announce } = useScreenReader();\n\n  const announceSearchStart = useCallback((query: string) => {\n    announce(`Searching for \"${query}\"`);\n  }, [announce]);\n\n  const announceSearchResults = useCallback((query: string, count: number) => {\n    const message = count === 0 \n      ? `No results found for \"${query}\"`\n      : `Found ${count} result${count !== 1 ? 's' : ''} for \"${query}\"`;\n    announce(message);\n  }, [announce]);\n\n  const announceSuggestion = useCallback((suggestion: string, position: number, total: number) => {\n    announce(`Suggestion ${position} of ${total}: ${suggestion}`);\n  }, [announce]);\n\n  return {\n    announceSearchStart,\n    announceSearchResults,\n    announceSuggestion\n  };\n};\n\nexport default useScreenReader;\n"],"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","ignoreList":[]}