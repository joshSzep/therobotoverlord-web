e95daef85756ff5c261d97d25b821808
"use strict";

/* istanbul ignore next */
function cov_y5m0ivt0e() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-static.xml/route.ts";
  var hash = "b6b2744b717cb2f3d3fb6e4337512a77b59eebb7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-static.xml/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 19
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 83
        }
      },
      "5": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "6": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 72,
          column: 10
        }
      },
      "7": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "8": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 78,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 18
          }
        },
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 18
          },
          end: {
            line: 66,
            column: 19
          }
        },
        loc: {
          start: {
            line: 66,
            column: 26
          },
          end: {
            line: 71,
            column: 9
          }
        },
        line: 66
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 52
          }
        }, {
          start: {
            line: 13,
            column: 56
          },
          end: {
            line: 13,
            column: 83
          }
        }],
        line: 13
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/sitemap-static.xml/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\n\n// Static pages sitemap\nexport async function GET() {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com';\n  \n  const staticPages = [\n    {\n      url: '',\n      lastmod: new Date().toISOString(),\n      changefreq: 'daily',\n      priority: '1.0'\n    },\n    {\n      url: '/feed',\n      lastmod: new Date().toISOString(),\n      changefreq: 'hourly',\n      priority: '0.9'\n    },\n    {\n      url: '/topics',\n      lastmod: new Date().toISOString(),\n      changefreq: 'daily',\n      priority: '0.8'\n    },\n    {\n      url: '/search',\n      lastmod: new Date().toISOString(),\n      changefreq: 'weekly',\n      priority: '0.7'\n    },\n    {\n      url: '/about',\n      lastmod: new Date().toISOString(),\n      changefreq: 'monthly',\n      priority: '0.6'\n    },\n    {\n      url: '/contact',\n      lastmod: new Date().toISOString(),\n      changefreq: 'monthly',\n      priority: '0.5'\n    },\n    {\n      url: '/privacy',\n      lastmod: new Date().toISOString(),\n      changefreq: 'yearly',\n      priority: '0.3'\n    },\n    {\n      url: '/terms',\n      lastmod: new Date().toISOString(),\n      changefreq: 'yearly',\n      priority: '0.3'\n    }\n  ];\n\n  const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${staticPages.map(page => `  <url>\n    <loc>${baseUrl}${page.url}</loc>\n    <lastmod>${page.lastmod}</lastmod>\n    <changefreq>${page.changefreq}</changefreq>\n    <priority>${page.priority}</priority>\n  </url>`).join('\\n')}\n</urlset>`;\n\n  return new NextResponse(sitemap, {\n    headers: {\n      'Content-Type': 'application/xml',\n      'Cache-Control': 'public, max-age=3600, s-maxage=3600'\n    }\n  });\n}\n"],
      names: ["GET", "baseUrl", "process", "env", "NEXT_PUBLIC_SITE_URL", "staticPages", "url", "lastmod", "Date", "toISOString", "changefreq", "priority", "sitemap", "map", "page", "join", "NextResponse", "headers"],
      mappings: ";;;;+BAGsBA;;;eAAAA;;;wBAHO;AAGtB,eAAeA;IACpB,MAAMC,UAAUC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;IAEpD,MAAMC,cAAc;QAClB;YACEC,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;QACA;YACEL,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;QACA;YACEL,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;QACA;YACEL,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;QACA;YACEL,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;QACA;YACEL,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;QACA;YACEL,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;QACA;YACEL,KAAK;YACLC,SAAS,IAAIC,OAAOC,WAAW;YAC/BC,YAAY;YACZC,UAAU;QACZ;KACD;IAED,MAAMC,UAAU,CAAC;;AAEnB,EAAEP,YAAYQ,GAAG,CAACC,CAAAA,OAAQ,CAAC;SAClB,EAAEb,UAAUa,KAAKR,GAAG,CAAC;aACjB,EAAEQ,KAAKP,OAAO,CAAC;gBACZ,EAAEO,KAAKJ,UAAU,CAAC;cACpB,EAAEI,KAAKH,QAAQ,CAAC;QACtB,CAAC,EAAEI,IAAI,CAAC,MAAM;SACb,CAAC;IAER,OAAO,IAAIC,oBAAY,CAACJ,SAAS;QAC/BK,SAAS;YACP,gBAAgB;YAChB,iBAAiB;QACnB;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b6b2744b717cb2f3d3fb6e4337512a77b59eebb7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_y5m0ivt0e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_y5m0ivt0e();
cov_y5m0ivt0e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_y5m0ivt0e().s[1]++;
Object.defineProperty(exports, "GET", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_y5m0ivt0e().f[0]++;
    cov_y5m0ivt0e().s[2]++;
    return GET;
  }
});
const _server =
/* istanbul ignore next */
(cov_y5m0ivt0e().s[3]++, require("next/server"));
async function GET() {
  /* istanbul ignore next */
  cov_y5m0ivt0e().f[1]++;
  const baseUrl =
  /* istanbul ignore next */
  (cov_y5m0ivt0e().s[4]++,
  /* istanbul ignore next */
  (cov_y5m0ivt0e().b[0][0]++, process.env.NEXT_PUBLIC_SITE_URL) ||
  /* istanbul ignore next */
  (cov_y5m0ivt0e().b[0][1]++, 'https://robotoverlord.com'));
  const staticPages =
  /* istanbul ignore next */
  (cov_y5m0ivt0e().s[5]++, [{
    url: '',
    lastmod: new Date().toISOString(),
    changefreq: 'daily',
    priority: '1.0'
  }, {
    url: '/feed',
    lastmod: new Date().toISOString(),
    changefreq: 'hourly',
    priority: '0.9'
  }, {
    url: '/topics',
    lastmod: new Date().toISOString(),
    changefreq: 'daily',
    priority: '0.8'
  }, {
    url: '/search',
    lastmod: new Date().toISOString(),
    changefreq: 'weekly',
    priority: '0.7'
  }, {
    url: '/about',
    lastmod: new Date().toISOString(),
    changefreq: 'monthly',
    priority: '0.6'
  }, {
    url: '/contact',
    lastmod: new Date().toISOString(),
    changefreq: 'monthly',
    priority: '0.5'
  }, {
    url: '/privacy',
    lastmod: new Date().toISOString(),
    changefreq: 'yearly',
    priority: '0.3'
  }, {
    url: '/terms',
    lastmod: new Date().toISOString(),
    changefreq: 'yearly',
    priority: '0.3'
  }]);
  const sitemap =
  /* istanbul ignore next */
  (cov_y5m0ivt0e().s[6]++, `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${staticPages.map(page => {
    /* istanbul ignore next */
    cov_y5m0ivt0e().f[2]++;
    cov_y5m0ivt0e().s[7]++;
    return `  <url>
    <loc>${baseUrl}${page.url}</loc>
    <lastmod>${page.lastmod}</lastmod>
    <changefreq>${page.changefreq}</changefreq>
    <priority>${page.priority}</priority>
  </url>`;
  }).join('\n')}
</urlset>`);
  /* istanbul ignore next */
  cov_y5m0ivt0e().s[8]++;
  return new _server.NextResponse(sitemap, {
    headers: {
      'Content-Type': 'application/xml',
      'Cache-Control': 'public, max-age=3600, s-maxage=3600'
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfeTVtMGl2dDBlIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiR0VUIiwiZiIsImJhc2VVcmwiLCJiIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NJVEVfVVJMIiwic3RhdGljUGFnZXMiLCJ1cmwiLCJsYXN0bW9kIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiY2hhbmdlZnJlcSIsInByaW9yaXR5Iiwic2l0ZW1hcCIsIm1hcCIsInBhZ2UiLCJqb2luIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImhlYWRlcnMiXSwic291cmNlcyI6WyIvVXNlcnMvam9zaHN6ZXAvY29kZS90aGVyb2JvdG92ZXJsb3JkLW1vbm8vdGhlcm9ib3RvdmVybG9yZC13ZWIvc3JjL2FwcC9zaXRlbWFwLXN0YXRpYy54bWwvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG4vLyBTdGF0aWMgcGFnZXMgc2l0ZW1hcFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcbiAgY29uc3QgYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NJVEVfVVJMIHx8ICdodHRwczovL3JvYm90b3ZlcmxvcmQuY29tJztcbiAgXG4gIGNvbnN0IHN0YXRpY1BhZ2VzID0gW1xuICAgIHtcbiAgICAgIHVybDogJycsXG4gICAgICBsYXN0bW9kOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBjaGFuZ2VmcmVxOiAnZGFpbHknLFxuICAgICAgcHJpb3JpdHk6ICcxLjAnXG4gICAgfSxcbiAgICB7XG4gICAgICB1cmw6ICcvZmVlZCcsXG4gICAgICBsYXN0bW9kOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBjaGFuZ2VmcmVxOiAnaG91cmx5JyxcbiAgICAgIHByaW9yaXR5OiAnMC45J1xuICAgIH0sXG4gICAge1xuICAgICAgdXJsOiAnL3RvcGljcycsXG4gICAgICBsYXN0bW9kOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBjaGFuZ2VmcmVxOiAnZGFpbHknLFxuICAgICAgcHJpb3JpdHk6ICcwLjgnXG4gICAgfSxcbiAgICB7XG4gICAgICB1cmw6ICcvc2VhcmNoJyxcbiAgICAgIGxhc3Rtb2Q6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGNoYW5nZWZyZXE6ICd3ZWVrbHknLFxuICAgICAgcHJpb3JpdHk6ICcwLjcnXG4gICAgfSxcbiAgICB7XG4gICAgICB1cmw6ICcvYWJvdXQnLFxuICAgICAgbGFzdG1vZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgY2hhbmdlZnJlcTogJ21vbnRobHknLFxuICAgICAgcHJpb3JpdHk6ICcwLjYnXG4gICAgfSxcbiAgICB7XG4gICAgICB1cmw6ICcvY29udGFjdCcsXG4gICAgICBsYXN0bW9kOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBjaGFuZ2VmcmVxOiAnbW9udGhseScsXG4gICAgICBwcmlvcml0eTogJzAuNSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHVybDogJy9wcml2YWN5JyxcbiAgICAgIGxhc3Rtb2Q6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGNoYW5nZWZyZXE6ICd5ZWFybHknLFxuICAgICAgcHJpb3JpdHk6ICcwLjMnXG4gICAgfSxcbiAgICB7XG4gICAgICB1cmw6ICcvdGVybXMnLFxuICAgICAgbGFzdG1vZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgY2hhbmdlZnJlcTogJ3llYXJseScsXG4gICAgICBwcmlvcml0eTogJzAuMydcbiAgICB9XG4gIF07XG5cbiAgY29uc3Qgc2l0ZW1hcCA9IGA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cbjx1cmxzZXQgeG1sbnM9XCJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45XCI+XG4ke3N0YXRpY1BhZ2VzLm1hcChwYWdlID0+IGAgIDx1cmw+XG4gICAgPGxvYz4ke2Jhc2VVcmx9JHtwYWdlLnVybH08L2xvYz5cbiAgICA8bGFzdG1vZD4ke3BhZ2UubGFzdG1vZH08L2xhc3Rtb2Q+XG4gICAgPGNoYW5nZWZyZXE+JHtwYWdlLmNoYW5nZWZyZXF9PC9jaGFuZ2VmcmVxPlxuICAgIDxwcmlvcml0eT4ke3BhZ2UucHJpb3JpdHl9PC9wcmlvcml0eT5cbiAgPC91cmw+YCkuam9pbignXFxuJyl9XG48L3VybHNldD5gO1xuXG4gIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKHNpdGVtYXAsIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3htbCcsXG4gICAgICAnQ2FjaGUtQ29udHJvbCc6ICdwdWJsaWMsIG1heC1hZ2U9MzYwMCwgcy1tYXhhZ2U9MzYwMCdcbiAgICB9XG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFRTTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7OytCQUxnQjs7Ozs7O1dBQUFDLEdBQUE7Ozs7O2lDQUhPO0FBR3RCLGVBQWVBLElBQUE7RUFBQTtFQUFBSCxhQUFBLEdBQUFJLENBQUE7RUFDcEIsTUFBTUMsT0FBQTtFQUFBO0VBQUEsQ0FBQUwsYUFBQSxHQUFBRSxDQUFBO0VBQVU7RUFBQSxDQUFBRixhQUFBLEdBQUFNLENBQUEsVUFBQUMsT0FBQSxDQUFRQyxHQUFHLENBQUNDLG9CQUFvQjtFQUFBO0VBQUEsQ0FBQVQsYUFBQSxHQUFBTSxDQUFBLFVBQUk7RUFFcEQsTUFBTUksV0FBQTtFQUFBO0VBQUEsQ0FBQVYsYUFBQSxHQUFBRSxDQUFBLE9BQWMsQ0FDbEI7SUFDRVMsR0FBQSxFQUFLO0lBQ0xDLE9BQUEsRUFBUyxJQUFJQyxJQUFBLEdBQU9DLFdBQVc7SUFDL0JDLFVBQUEsRUFBWTtJQUNaQyxRQUFBLEVBQVU7RUFDWixHQUNBO0lBQ0VMLEdBQUEsRUFBSztJQUNMQyxPQUFBLEVBQVMsSUFBSUMsSUFBQSxHQUFPQyxXQUFXO0lBQy9CQyxVQUFBLEVBQVk7SUFDWkMsUUFBQSxFQUFVO0VBQ1osR0FDQTtJQUNFTCxHQUFBLEVBQUs7SUFDTEMsT0FBQSxFQUFTLElBQUlDLElBQUEsR0FBT0MsV0FBVztJQUMvQkMsVUFBQSxFQUFZO0lBQ1pDLFFBQUEsRUFBVTtFQUNaLEdBQ0E7SUFDRUwsR0FBQSxFQUFLO0lBQ0xDLE9BQUEsRUFBUyxJQUFJQyxJQUFBLEdBQU9DLFdBQVc7SUFDL0JDLFVBQUEsRUFBWTtJQUNaQyxRQUFBLEVBQVU7RUFDWixHQUNBO0lBQ0VMLEdBQUEsRUFBSztJQUNMQyxPQUFBLEVBQVMsSUFBSUMsSUFBQSxHQUFPQyxXQUFXO0lBQy9CQyxVQUFBLEVBQVk7SUFDWkMsUUFBQSxFQUFVO0VBQ1osR0FDQTtJQUNFTCxHQUFBLEVBQUs7SUFDTEMsT0FBQSxFQUFTLElBQUlDLElBQUEsR0FBT0MsV0FBVztJQUMvQkMsVUFBQSxFQUFZO0lBQ1pDLFFBQUEsRUFBVTtFQUNaLEdBQ0E7SUFDRUwsR0FBQSxFQUFLO0lBQ0xDLE9BQUEsRUFBUyxJQUFJQyxJQUFBLEdBQU9DLFdBQVc7SUFDL0JDLFVBQUEsRUFBWTtJQUNaQyxRQUFBLEVBQVU7RUFDWixHQUNBO0lBQ0VMLEdBQUEsRUFBSztJQUNMQyxPQUFBLEVBQVMsSUFBSUMsSUFBQSxHQUFPQyxXQUFXO0lBQy9CQyxVQUFBLEVBQVk7SUFDWkMsUUFBQSxFQUFVO0VBQ1osRUFDRDtFQUVELE1BQU1DLE9BQUE7RUFBQTtFQUFBLENBQUFqQixhQUFBLEdBQUFFLENBQUEsT0FBVTs7QUFFbEIsRUFBRVEsV0FBQSxDQUFZUSxHQUFHLENBQUNDLElBQUEsSUFBUTtJQUFBO0lBQUFuQixhQUFBLEdBQUFJLENBQUE7SUFBQUosYUFBQSxHQUFBRSxDQUFBO0lBQUE7V0FDZkcsT0FBQSxHQUFVYyxJQUFBLENBQUtSLEdBQUc7ZUFDZFEsSUFBQSxDQUFLUCxPQUFPO2tCQUNUTyxJQUFBLENBQUtKLFVBQVU7Z0JBQ2pCSSxJQUFBLENBQUtILFFBQVE7U0FDcEI7RUFBRCxDQUFDLEVBQUVJLElBQUksQ0FBQztVQUNOO0VBQUE7RUFBQXBCLGFBQUEsR0FBQUUsQ0FBQTtFQUVSLE9BQU8sSUFBSW1CLE9BQUEsQ0FBQUMsWUFBWSxDQUFDTCxPQUFBLEVBQVM7SUFDL0JNLE9BQUEsRUFBUztNQUNQLGdCQUFnQjtNQUNoQixpQkFBaUI7SUFDbkI7RUFDRjtBQUNGIiwiaWdub3JlTGlzdCI6W119