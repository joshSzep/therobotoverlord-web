{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/stores/appStore.ts"],"sourcesContent":["/**\n * Global application state store using Zustand\n * Manages app-wide state including notifications, loading states, and UI state\n */\n\nimport { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\n\n// Notification types\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  actions?: Array<{\n    label: string;\n    action: () => void;\n  }>;\n}\n\n// Loading state types\nexport interface LoadingState {\n  [key: string]: boolean;\n}\n\n// UI state types\nexport interface UIState {\n  sidebarOpen: boolean;\n  theme: 'dark' | 'light' | 'auto';\n  compactMode: boolean;\n}\n\n// App store interface\ninterface AppStore {\n  // Notifications\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id'>) => void;\n  removeNotification: (id: string) => void;\n  clearNotifications: () => void;\n\n  // Loading states\n  loading: LoadingState;\n  setLoading: (key: string, isLoading: boolean) => void;\n  isLoading: (key: string) => boolean;\n\n  // UI state\n  ui: UIState;\n  setSidebarOpen: (open: boolean) => void;\n  toggleSidebar: () => void;\n  setTheme: (theme: UIState['theme']) => void;\n  setCompactMode: (compact: boolean) => void;\n\n  // Global actions\n  reset: () => void;\n}\n\n// Initial state\nconst initialState = {\n  notifications: [],\n  loading: {},\n  ui: {\n    sidebarOpen: false,\n    theme: 'dark' as const,\n    compactMode: false,\n  },\n};\n\n// Create the store\nexport const useAppStore = create<AppStore>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        ...initialState,\n\n        // Notification actions\n        addNotification: (notification) => {\n          const id = `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          const newNotification: Notification = {\n            ...notification,\n            id,\n            duration: notification.duration ?? 5000,\n          };\n\n          set(\n            (state) => ({\n              notifications: [...state.notifications, newNotification],\n            }),\n            false,\n            'addNotification'\n          );\n\n          // Auto-remove notification after duration\n          if (newNotification.duration && newNotification.duration > 0) {\n            setTimeout(() => {\n              get().removeNotification(id);\n            }, newNotification.duration);\n          }\n        },\n\n        removeNotification: (id) =>\n          set(\n            (state) => ({\n              notifications: state.notifications.filter((n) => n.id !== id),\n            }),\n            false,\n            'removeNotification'\n          ),\n\n        clearNotifications: () =>\n          set({ notifications: [] }, false, 'clearNotifications'),\n\n        // Loading state actions\n        setLoading: (key, isLoading) =>\n          set(\n            (state) => ({\n              loading: {\n                ...state.loading,\n                [key]: isLoading,\n              },\n            }),\n            false,\n            'setLoading'\n          ),\n\n        isLoading: (key) => get().loading[key] || false,\n\n        // UI state actions\n        setSidebarOpen: (open) =>\n          set(\n            (state) => ({\n              ui: { ...state.ui, sidebarOpen: open },\n            }),\n            false,\n            'setSidebarOpen'\n          ),\n\n        toggleSidebar: () =>\n          set(\n            (state) => ({\n              ui: { ...state.ui, sidebarOpen: !state.ui.sidebarOpen },\n            }),\n            false,\n            'toggleSidebar'\n          ),\n\n        setTheme: (theme) =>\n          set(\n            (state) => ({\n              ui: { ...state.ui, theme },\n            }),\n            false,\n            'setTheme'\n          ),\n\n        setCompactMode: (compact) =>\n          set(\n            (state) => ({\n              ui: { ...state.ui, compactMode: compact },\n            }),\n            false,\n            'setCompactMode'\n          ),\n\n        // Global reset\n        reset: () => set(initialState, false, 'reset'),\n      }),\n      {\n        name: 'robot-overlord-app-store',\n        partialize: (state) => ({\n          ui: state.ui,\n        }),\n      }\n    ),\n    {\n      name: 'AppStore',\n    }\n  )\n);\n\n// Convenience hooks\nexport const useNotifications = () => useAppStore((state) => state.notifications);\nexport const useLoading = () => useAppStore((state) => ({\n  loading: state.loading,\n  setLoading: state.setLoading,\n  isLoading: state.isLoading,\n}));\nexport const useUI = () => useAppStore((state) => ({\n  ui: state.ui,\n  setSidebarOpen: state.setSidebarOpen,\n  toggleSidebar: state.toggleSidebar,\n  setTheme: state.setTheme,\n  setCompactMode: state.setCompactMode,\n}));\n"],"names":["useAppStore","useLoading","useNotifications","useUI","initialState","notifications","loading","ui","sidebarOpen","theme","compactMode","create","devtools","persist","set","get","addNotification","notification","id","Date","now","Math","random","toString","substr","newNotification","duration","state","setTimeout","removeNotification","filter","n","clearNotifications","setLoading","key","isLoading","setSidebarOpen","open","toggleSidebar","setTheme","setCompactMode","compact","reset","name","partialize"],"mappings":"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"}