4d993ecbcc3a8327ede0ae6605a0a486
/**
 * Global application state store using Zustand
 * Manages app-wide state including notifications, loading states, and UI state
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useAppStore () {
        return useAppStore;
    },
    get useLoading () {
        return useLoading;
    },
    get useNotifications () {
        return useNotifications;
    },
    get useUI () {
        return useUI;
    }
});
const _zustand = require("zustand");
const _middleware = require("zustand/middleware");
// Initial state
const initialState = {
    notifications: [],
    loading: {},
    ui: {
        sidebarOpen: false,
        theme: 'dark',
        compactMode: false
    }
};
const useAppStore = (0, _zustand.create)()((0, _middleware.devtools)((0, _middleware.persist)((set, get)=>({
        ...initialState,
        // Notification actions
        addNotification: (notification)=>{
            const id = `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            const newNotification = {
                ...notification,
                id,
                duration: notification.duration ?? 5000
            };
            set((state)=>({
                    notifications: [
                        ...state.notifications,
                        newNotification
                    ]
                }), false, 'addNotification');
            // Auto-remove notification after duration
            if (newNotification.duration && newNotification.duration > 0) {
                setTimeout(()=>{
                    get().removeNotification(id);
                }, newNotification.duration);
            }
        },
        removeNotification: (id)=>set((state)=>({
                    notifications: state.notifications.filter((n)=>n.id !== id)
                }), false, 'removeNotification'),
        clearNotifications: ()=>set({
                notifications: []
            }, false, 'clearNotifications'),
        // Loading state actions
        setLoading: (key, isLoading)=>set((state)=>({
                    loading: {
                        ...state.loading,
                        [key]: isLoading
                    }
                }), false, 'setLoading'),
        isLoading: (key)=>get().loading[key] || false,
        // UI state actions
        setSidebarOpen: (open)=>set((state)=>({
                    ui: {
                        ...state.ui,
                        sidebarOpen: open
                    }
                }), false, 'setSidebarOpen'),
        toggleSidebar: ()=>set((state)=>({
                    ui: {
                        ...state.ui,
                        sidebarOpen: !state.ui.sidebarOpen
                    }
                }), false, 'toggleSidebar'),
        setTheme: (theme)=>set((state)=>({
                    ui: {
                        ...state.ui,
                        theme
                    }
                }), false, 'setTheme'),
        setCompactMode: (compact)=>set((state)=>({
                    ui: {
                        ...state.ui,
                        compactMode: compact
                    }
                }), false, 'setCompactMode'),
        // Global reset
        reset: ()=>set(initialState, false, 'reset')
    }), {
    name: 'robot-overlord-app-store',
    partialize: (state)=>({
            ui: state.ui
        })
}), {
    name: 'AppStore'
}));
const useNotifications = ()=>useAppStore((state)=>state.notifications);
const useLoading = ()=>useAppStore((state)=>({
            loading: state.loading,
            setLoading: state.setLoading,
            isLoading: state.isLoading
        }));
const useUI = ()=>useAppStore((state)=>({
            ui: state.ui,
            setSidebarOpen: state.setSidebarOpen,
            toggleSidebar: state.toggleSidebar,
            setTheme: state.setTheme,
            setCompactMode: state.setCompactMode
        }));

//# sourceMappingURL=data:application/json;base64,