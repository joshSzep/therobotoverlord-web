c1b764e900c041692038101188232a4c
/**
 * Common API response and request types for The Robot Overlord
 * Shared interfaces for API communication
 */ // Generic API response wrapper
"use strict";

/* istanbul ignore next */
function cov_2bcdowojuu() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/api.ts";
  var hash = "9f59bb0594f3c322db58aed9f4c246b7adf413e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/api.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 8,
          column: 3
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/api.ts"],
      sourcesContent: ["/**\n * Common API response and request types for The Robot Overlord\n * Shared interfaces for API communication\n */\n\n// Generic API response wrapper\nexport interface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  message?: string;\n  errors?: ApiError[];\n  metadata?: ResponseMetadata;\n}\n\n// Paginated response wrapper\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: PaginationInfo;\n  metadata?: ResponseMetadata;\n}\n\n// Response metadata\nexport interface ResponseMetadata {\n  timestamp: string;\n  requestId: string;\n  version: string;\n  totalCount?: number;\n  processingTime?: number;\n  rateLimit?: {\n    limit: number;\n    remaining: number;\n    resetAt: string;\n  };\n  warnings?: string[];\n}\n\n// Pagination information\nexport interface PaginationInfo {\n  page: number;\n  limit: number;\n  totalCount: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n  nextCursor?: string;\n  prevCursor?: string;\n}\n\n// Error response structure\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: Record<string, any>;\n  field?: string;\n  type: 'validation' | 'authentication' | 'authorization' | 'not_found' | 'server_error' | 'rate_limit' | 'business_logic';\n  timestamp: string;\n}\n\n// Bulk operation response\nexport interface BulkOperationResponse<T> {\n  success: T[];\n  failed: Array<{\n    item: T;\n    error: ApiError;\n  }>;\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n  };\n}\n\n// Search response\nexport interface SearchResponse<T> {\n  results: T[];\n  query: string;\n  filters?: Record<string, any>;\n  facets?: Record<string, Array<{\n    value: string;\n    count: number;\n  }>>;\n  suggestions?: string[];\n  totalResults: number;\n  searchTime: number;\n  pagination: PaginationInfo;\n}\n\n// WebSocket message types\nexport interface WebSocketMessage {\n  type: string;\n  payload: any;\n  timestamp: string;\n  id?: string;\n  userId?: string;\n  sessionId?: string;\n}\n\n// Real-time event types\nexport interface RealtimeEvent {\n  type: 'post_created' | 'post_updated' | 'post_deleted' | 'post_voted' | \n        'topic_created' | 'topic_updated' | 'user_joined' | 'user_left' | \n        'notification' | 'moderation_action' | 'badge_awarded' | 'leaderboard_updated';\n  data: any;\n  userId?: string;\n  topicId?: string;\n  postId?: string;\n  targetUsers?: string[];\n  timestamp: string;\n  metadata?: Record<string, any>;\n}\n\n// File upload response\nexport interface FileUploadResponse {\n  id: string;\n  filename: string;\n  originalName: string;\n  mimeType: string;\n  size: number;\n  url: string;\n  thumbnailUrl?: string;\n  metadata?: {\n    width?: number;\n    height?: number;\n    duration?: number;\n    checksum: string;\n  };\n  uploadedAt: string;\n  expiresAt?: string;\n}\n\n// Batch request wrapper\nexport interface BatchRequest<T> {\n  operations: Array<{\n    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n    path: string;\n    body?: T;\n    id?: string;\n  }>;\n  atomic?: boolean;\n}\n\n// Batch response wrapper\nexport interface BatchResponse<T> {\n  responses: Array<{\n    id?: string;\n    status: number;\n    data?: T;\n    error?: ApiError;\n  }>;\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n  };\n}\n\n// Health check response\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  version: string;\n  uptime: number;\n  services: Record<string, {\n    status: 'up' | 'down' | 'degraded';\n    responseTime?: number;\n    lastCheck: string;\n  }>;\n  metrics?: {\n    memoryUsage: number;\n    cpuUsage: number;\n    activeConnections: number;\n  };\n}\n\n// Analytics response\nexport interface AnalyticsResponse {\n  metrics: Record<string, number>;\n  trends: Array<{\n    date: string;\n    value: number;\n    change?: number;\n  }>;\n  breakdown: Record<string, Record<string, number>>;\n  summary: {\n    total: number;\n    average: number;\n    peak: number;\n    growth: number;\n  };\n  period: {\n    start: string;\n    end: string;\n    granularity: 'hour' | 'day' | 'week' | 'month';\n  };\n}\n\n// Export response for data downloads\nexport interface ExportResponse {\n  id: string;\n  format: 'json' | 'csv' | 'xlsx' | 'pdf';\n  downloadUrl: string;\n  filename: string;\n  size: number;\n  recordCount: number;\n  createdAt: string;\n  expiresAt: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  progress?: number;\n}\n"],
      names: [],
      mappings: "AAAA;;;CAGC,GAED,+BAA+B"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9f59bb0594f3c322db58aed9f4c246b7adf413e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bcdowojuu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bcdowojuu();
cov_2bcdowojuu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2pvc2hzemVwL2NvZGUvdGhlcm9ib3RvdmVybG9yZC1tb25vL3RoZXJvYm90b3ZlcmxvcmQtd2ViL3NyYy90eXBlcy9hcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tb24gQVBJIHJlc3BvbnNlIGFuZCByZXF1ZXN0IHR5cGVzIGZvciBUaGUgUm9ib3QgT3ZlcmxvcmRcbiAqIFNoYXJlZCBpbnRlcmZhY2VzIGZvciBBUEkgY29tbXVuaWNhdGlvblxuICovXG5cbi8vIEdlbmVyaWMgQVBJIHJlc3BvbnNlIHdyYXBwZXJcbmV4cG9ydCBpbnRlcmZhY2UgQXBpUmVzcG9uc2U8VD4ge1xuICBkYXRhOiBUO1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICBlcnJvcnM/OiBBcGlFcnJvcltdO1xuICBtZXRhZGF0YT86IFJlc3BvbnNlTWV0YWRhdGE7XG59XG5cbi8vIFBhZ2luYXRlZCByZXNwb25zZSB3cmFwcGVyXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRlZFJlc3BvbnNlPFQ+IHtcbiAgZGF0YTogVFtdO1xuICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uSW5mbztcbiAgbWV0YWRhdGE/OiBSZXNwb25zZU1ldGFkYXRhO1xufVxuXG4vLyBSZXNwb25zZSBtZXRhZGF0YVxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZU1ldGFkYXRhIHtcbiAgdGltZXN0YW1wOiBzdHJpbmc7XG4gIHJlcXVlc3RJZDogc3RyaW5nO1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIHRvdGFsQ291bnQ/OiBudW1iZXI7XG4gIHByb2Nlc3NpbmdUaW1lPzogbnVtYmVyO1xuICByYXRlTGltaXQ/OiB7XG4gICAgbGltaXQ6IG51bWJlcjtcbiAgICByZW1haW5pbmc6IG51bWJlcjtcbiAgICByZXNldEF0OiBzdHJpbmc7XG4gIH07XG4gIHdhcm5pbmdzPzogc3RyaW5nW107XG59XG5cbi8vIFBhZ2luYXRpb24gaW5mb3JtYXRpb25cbmV4cG9ydCBpbnRlcmZhY2UgUGFnaW5hdGlvbkluZm8ge1xuICBwYWdlOiBudW1iZXI7XG4gIGxpbWl0OiBudW1iZXI7XG4gIHRvdGFsQ291bnQ6IG51bWJlcjtcbiAgdG90YWxQYWdlczogbnVtYmVyO1xuICBoYXNOZXh0OiBib29sZWFuO1xuICBoYXNQcmV2OiBib29sZWFuO1xuICBuZXh0Q3Vyc29yPzogc3RyaW5nO1xuICBwcmV2Q3Vyc29yPzogc3RyaW5nO1xufVxuXG4vLyBFcnJvciByZXNwb25zZSBzdHJ1Y3R1cmVcbmV4cG9ydCBpbnRlcmZhY2UgQXBpRXJyb3Ige1xuICBjb2RlOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIGZpZWxkPzogc3RyaW5nO1xuICB0eXBlOiAndmFsaWRhdGlvbicgfCAnYXV0aGVudGljYXRpb24nIHwgJ2F1dGhvcml6YXRpb24nIHwgJ25vdF9mb3VuZCcgfCAnc2VydmVyX2Vycm9yJyB8ICdyYXRlX2xpbWl0JyB8ICdidXNpbmVzc19sb2dpYyc7XG4gIHRpbWVzdGFtcDogc3RyaW5nO1xufVxuXG4vLyBCdWxrIG9wZXJhdGlvbiByZXNwb25zZVxuZXhwb3J0IGludGVyZmFjZSBCdWxrT3BlcmF0aW9uUmVzcG9uc2U8VD4ge1xuICBzdWNjZXNzOiBUW107XG4gIGZhaWxlZDogQXJyYXk8e1xuICAgIGl0ZW06IFQ7XG4gICAgZXJyb3I6IEFwaUVycm9yO1xuICB9PjtcbiAgc3VtbWFyeToge1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgc3VjY2Vzc2Z1bDogbnVtYmVyO1xuICAgIGZhaWxlZDogbnVtYmVyO1xuICB9O1xufVxuXG4vLyBTZWFyY2ggcmVzcG9uc2VcbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoUmVzcG9uc2U8VD4ge1xuICByZXN1bHRzOiBUW107XG4gIHF1ZXJ5OiBzdHJpbmc7XG4gIGZpbHRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBmYWNldHM/OiBSZWNvcmQ8c3RyaW5nLCBBcnJheTx7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICBjb3VudDogbnVtYmVyO1xuICB9Pj47XG4gIHN1Z2dlc3Rpb25zPzogc3RyaW5nW107XG4gIHRvdGFsUmVzdWx0czogbnVtYmVyO1xuICBzZWFyY2hUaW1lOiBudW1iZXI7XG4gIHBhZ2luYXRpb246IFBhZ2luYXRpb25JbmZvO1xufVxuXG4vLyBXZWJTb2NrZXQgbWVzc2FnZSB0eXBlc1xuZXhwb3J0IGludGVyZmFjZSBXZWJTb2NrZXRNZXNzYWdlIHtcbiAgdHlwZTogc3RyaW5nO1xuICBwYXlsb2FkOiBhbnk7XG4gIHRpbWVzdGFtcDogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgdXNlcklkPzogc3RyaW5nO1xuICBzZXNzaW9uSWQ/OiBzdHJpbmc7XG59XG5cbi8vIFJlYWwtdGltZSBldmVudCB0eXBlc1xuZXhwb3J0IGludGVyZmFjZSBSZWFsdGltZUV2ZW50IHtcbiAgdHlwZTogJ3Bvc3RfY3JlYXRlZCcgfCAncG9zdF91cGRhdGVkJyB8ICdwb3N0X2RlbGV0ZWQnIHwgJ3Bvc3Rfdm90ZWQnIHwgXG4gICAgICAgICd0b3BpY19jcmVhdGVkJyB8ICd0b3BpY191cGRhdGVkJyB8ICd1c2VyX2pvaW5lZCcgfCAndXNlcl9sZWZ0JyB8IFxuICAgICAgICAnbm90aWZpY2F0aW9uJyB8ICdtb2RlcmF0aW9uX2FjdGlvbicgfCAnYmFkZ2VfYXdhcmRlZCcgfCAnbGVhZGVyYm9hcmRfdXBkYXRlZCc7XG4gIGRhdGE6IGFueTtcbiAgdXNlcklkPzogc3RyaW5nO1xuICB0b3BpY0lkPzogc3RyaW5nO1xuICBwb3N0SWQ/OiBzdHJpbmc7XG4gIHRhcmdldFVzZXJzPzogc3RyaW5nW107XG4gIHRpbWVzdGFtcDogc3RyaW5nO1xuICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbi8vIEZpbGUgdXBsb2FkIHJlc3BvbnNlXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVVcGxvYWRSZXNwb25zZSB7XG4gIGlkOiBzdHJpbmc7XG4gIGZpbGVuYW1lOiBzdHJpbmc7XG4gIG9yaWdpbmFsTmFtZTogc3RyaW5nO1xuICBtaW1lVHlwZTogc3RyaW5nO1xuICBzaXplOiBudW1iZXI7XG4gIHVybDogc3RyaW5nO1xuICB0aHVtYm5haWxVcmw/OiBzdHJpbmc7XG4gIG1ldGFkYXRhPzoge1xuICAgIHdpZHRoPzogbnVtYmVyO1xuICAgIGhlaWdodD86IG51bWJlcjtcbiAgICBkdXJhdGlvbj86IG51bWJlcjtcbiAgICBjaGVja3N1bTogc3RyaW5nO1xuICB9O1xuICB1cGxvYWRlZEF0OiBzdHJpbmc7XG4gIGV4cGlyZXNBdD86IHN0cmluZztcbn1cblxuLy8gQmF0Y2ggcmVxdWVzdCB3cmFwcGVyXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoUmVxdWVzdDxUPiB7XG4gIG9wZXJhdGlvbnM6IEFycmF5PHtcbiAgICBtZXRob2Q6ICdHRVQnIHwgJ1BPU1QnIHwgJ1BVVCcgfCAnUEFUQ0gnIHwgJ0RFTEVURSc7XG4gICAgcGF0aDogc3RyaW5nO1xuICAgIGJvZHk/OiBUO1xuICAgIGlkPzogc3RyaW5nO1xuICB9PjtcbiAgYXRvbWljPzogYm9vbGVhbjtcbn1cblxuLy8gQmF0Y2ggcmVzcG9uc2Ugd3JhcHBlclxuZXhwb3J0IGludGVyZmFjZSBCYXRjaFJlc3BvbnNlPFQ+IHtcbiAgcmVzcG9uc2VzOiBBcnJheTx7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgc3RhdHVzOiBudW1iZXI7XG4gICAgZGF0YT86IFQ7XG4gICAgZXJyb3I/OiBBcGlFcnJvcjtcbiAgfT47XG4gIHN1bW1hcnk6IHtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIHN1Y2Nlc3NmdWw6IG51bWJlcjtcbiAgICBmYWlsZWQ6IG51bWJlcjtcbiAgfTtcbn1cblxuLy8gSGVhbHRoIGNoZWNrIHJlc3BvbnNlXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aENoZWNrUmVzcG9uc2Uge1xuICBzdGF0dXM6ICdoZWFsdGh5JyB8ICdkZWdyYWRlZCcgfCAndW5oZWFsdGh5JztcbiAgdGltZXN0YW1wOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbiAgdXB0aW1lOiBudW1iZXI7XG4gIHNlcnZpY2VzOiBSZWNvcmQ8c3RyaW5nLCB7XG4gICAgc3RhdHVzOiAndXAnIHwgJ2Rvd24nIHwgJ2RlZ3JhZGVkJztcbiAgICByZXNwb25zZVRpbWU/OiBudW1iZXI7XG4gICAgbGFzdENoZWNrOiBzdHJpbmc7XG4gIH0+O1xuICBtZXRyaWNzPzoge1xuICAgIG1lbW9yeVVzYWdlOiBudW1iZXI7XG4gICAgY3B1VXNhZ2U6IG51bWJlcjtcbiAgICBhY3RpdmVDb25uZWN0aW9uczogbnVtYmVyO1xuICB9O1xufVxuXG4vLyBBbmFseXRpY3MgcmVzcG9uc2VcbmV4cG9ydCBpbnRlcmZhY2UgQW5hbHl0aWNzUmVzcG9uc2Uge1xuICBtZXRyaWNzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICB0cmVuZHM6IEFycmF5PHtcbiAgICBkYXRlOiBzdHJpbmc7XG4gICAgdmFsdWU6IG51bWJlcjtcbiAgICBjaGFuZ2U/OiBudW1iZXI7XG4gIH0+O1xuICBicmVha2Rvd246IFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIG51bWJlcj4+O1xuICBzdW1tYXJ5OiB7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBhdmVyYWdlOiBudW1iZXI7XG4gICAgcGVhazogbnVtYmVyO1xuICAgIGdyb3d0aDogbnVtYmVyO1xuICB9O1xuICBwZXJpb2Q6IHtcbiAgICBzdGFydDogc3RyaW5nO1xuICAgIGVuZDogc3RyaW5nO1xuICAgIGdyYW51bGFyaXR5OiAnaG91cicgfCAnZGF5JyB8ICd3ZWVrJyB8ICdtb250aCc7XG4gIH07XG59XG5cbi8vIEV4cG9ydCByZXNwb25zZSBmb3IgZGF0YSBkb3dubG9hZHNcbmV4cG9ydCBpbnRlcmZhY2UgRXhwb3J0UmVzcG9uc2Uge1xuICBpZDogc3RyaW5nO1xuICBmb3JtYXQ6ICdqc29uJyB8ICdjc3YnIHwgJ3hsc3gnIHwgJ3BkZic7XG4gIGRvd25sb2FkVXJsOiBzdHJpbmc7XG4gIGZpbGVuYW1lOiBzdHJpbmc7XG4gIHNpemU6IG51bWJlcjtcbiAgcmVjb3JkQ291bnQ6IG51bWJlcjtcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG4gIGV4cGlyZXNBdDogc3RyaW5nO1xuICBzdGF0dXM6ICdwZW5kaW5nJyB8ICdwcm9jZXNzaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XG4gIHByb2dyZXNzPzogbnVtYmVyO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0dBQUEsQ0FLQSIsImlnbm9yZUxpc3QiOltdfQ==