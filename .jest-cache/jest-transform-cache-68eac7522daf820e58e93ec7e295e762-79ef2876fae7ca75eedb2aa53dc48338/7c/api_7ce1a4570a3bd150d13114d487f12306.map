{"version":3,"names":[],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/api.ts"],"sourcesContent":["/**\n * Common API response and request types for The Robot Overlord\n * Shared interfaces for API communication\n */\n\n// Generic API response wrapper\nexport interface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  message?: string;\n  errors?: ApiError[];\n  metadata?: ResponseMetadata;\n}\n\n// Paginated response wrapper\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: PaginationInfo;\n  metadata?: ResponseMetadata;\n}\n\n// Response metadata\nexport interface ResponseMetadata {\n  timestamp: string;\n  requestId: string;\n  version: string;\n  totalCount?: number;\n  processingTime?: number;\n  rateLimit?: {\n    limit: number;\n    remaining: number;\n    resetAt: string;\n  };\n  warnings?: string[];\n}\n\n// Pagination information\nexport interface PaginationInfo {\n  page: number;\n  limit: number;\n  totalCount: number;\n  totalPages: number;\n  hasNext: boolean;\n  hasPrev: boolean;\n  nextCursor?: string;\n  prevCursor?: string;\n}\n\n// Error response structure\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: Record<string, any>;\n  field?: string;\n  type: 'validation' | 'authentication' | 'authorization' | 'not_found' | 'server_error' | 'rate_limit' | 'business_logic';\n  timestamp: string;\n}\n\n// Bulk operation response\nexport interface BulkOperationResponse<T> {\n  success: T[];\n  failed: Array<{\n    item: T;\n    error: ApiError;\n  }>;\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n  };\n}\n\n// Search response\nexport interface SearchResponse<T> {\n  results: T[];\n  query: string;\n  filters?: Record<string, any>;\n  facets?: Record<string, Array<{\n    value: string;\n    count: number;\n  }>>;\n  suggestions?: string[];\n  totalResults: number;\n  searchTime: number;\n  pagination: PaginationInfo;\n}\n\n// WebSocket message types\nexport interface WebSocketMessage {\n  type: string;\n  payload: any;\n  timestamp: string;\n  id?: string;\n  userId?: string;\n  sessionId?: string;\n}\n\n// Real-time event types\nexport interface RealtimeEvent {\n  type: 'post_created' | 'post_updated' | 'post_deleted' | 'post_voted' | \n        'topic_created' | 'topic_updated' | 'user_joined' | 'user_left' | \n        'notification' | 'moderation_action' | 'badge_awarded' | 'leaderboard_updated';\n  data: any;\n  userId?: string;\n  topicId?: string;\n  postId?: string;\n  targetUsers?: string[];\n  timestamp: string;\n  metadata?: Record<string, any>;\n}\n\n// File upload response\nexport interface FileUploadResponse {\n  id: string;\n  filename: string;\n  originalName: string;\n  mimeType: string;\n  size: number;\n  url: string;\n  thumbnailUrl?: string;\n  metadata?: {\n    width?: number;\n    height?: number;\n    duration?: number;\n    checksum: string;\n  };\n  uploadedAt: string;\n  expiresAt?: string;\n}\n\n// Batch request wrapper\nexport interface BatchRequest<T> {\n  operations: Array<{\n    method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n    path: string;\n    body?: T;\n    id?: string;\n  }>;\n  atomic?: boolean;\n}\n\n// Batch response wrapper\nexport interface BatchResponse<T> {\n  responses: Array<{\n    id?: string;\n    status: number;\n    data?: T;\n    error?: ApiError;\n  }>;\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n  };\n}\n\n// Health check response\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  version: string;\n  uptime: number;\n  services: Record<string, {\n    status: 'up' | 'down' | 'degraded';\n    responseTime?: number;\n    lastCheck: string;\n  }>;\n  metrics?: {\n    memoryUsage: number;\n    cpuUsage: number;\n    activeConnections: number;\n  };\n}\n\n// Analytics response\nexport interface AnalyticsResponse {\n  metrics: Record<string, number>;\n  trends: Array<{\n    date: string;\n    value: number;\n    change?: number;\n  }>;\n  breakdown: Record<string, Record<string, number>>;\n  summary: {\n    total: number;\n    average: number;\n    peak: number;\n    growth: number;\n  };\n  period: {\n    start: string;\n    end: string;\n    granularity: 'hour' | 'day' | 'week' | 'month';\n  };\n}\n\n// Export response for data downloads\nexport interface ExportResponse {\n  id: string;\n  format: 'json' | 'csv' | 'xlsx' | 'pdf';\n  downloadUrl: string;\n  filename: string;\n  size: number;\n  recordCount: number;\n  createdAt: string;\n  expiresAt: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  progress?: number;\n}\n"],"mappings":"AAAA;;;GAAA,CAKA","ignoreList":[]}