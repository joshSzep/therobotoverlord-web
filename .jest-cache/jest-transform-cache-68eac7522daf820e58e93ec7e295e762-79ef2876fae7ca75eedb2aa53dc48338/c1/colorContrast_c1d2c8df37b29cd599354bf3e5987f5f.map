{"version":3,"names":["IMPROVED_THEME_COLORS","cov_19xn0hjfut","f","s","THEME_COLORS","WCAG_LEVELS","checkWCAGCompliance","default","_default","generateContrastReport","getContrastRatio","getLuminance","hexToRgb","suggestImprovedColors","testThemeContrast","hex","result","exec","b","r","parseInt","g","rs","gs","bs","map","c","Math","pow","color1","color2","rgb1","rgb2","lum1","lum2","brightest","max","darkest","min","AA_NORMAL","AA_LARGE","AAA_NORMAL","AAA_LARGE","foreground","background","isLargeText","ratio","aaThreshold","aaaThreshold","AA","AAA","level","results","combinations","fg","bg","usage","combo","foregroundColor","backgroundColor","compliance","push","originalFg","originalBg","targetLevel","targetRatio","foregroundSuggestions","backgroundSuggestions","fgRgb","i","lightFg","toString","padStart","darkFg","bgRgb","lightBg","darkBg","Set","slice","passing","filter","length","failing","aaCompliant","aaaCompliant","recommendations","combination","issue","toFixed","suggestion","priority","summary","total"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/utils/colorContrast.ts"],"sourcesContent":["/**\n * Color contrast utilities for WCAG compliance testing and improvement\n */\n\n// Convert hex color to RGB\nexport const hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n};\n\n// Convert RGB to relative luminance\nexport const getLuminance = (r: number, g: number, b: number): number => {\n  const [rs, gs, bs] = [r, g, b].map(c => {\n    c = c / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  });\n  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;\n};\n\n// Calculate contrast ratio between two colors\nexport const getContrastRatio = (color1: string, color2: string): number => {\n  const rgb1 = hexToRgb(color1);\n  const rgb2 = hexToRgb(color2);\n  \n  if (!rgb1 || !rgb2) return 0;\n  \n  const lum1 = getLuminance(rgb1.r, rgb1.g, rgb1.b);\n  const lum2 = getLuminance(rgb2.r, rgb2.g, rgb2.b);\n  \n  const brightest = Math.max(lum1, lum2);\n  const darkest = Math.min(lum1, lum2);\n  \n  return (brightest + 0.05) / (darkest + 0.05);\n};\n\n// WCAG compliance levels\nexport const WCAG_LEVELS = {\n  AA_NORMAL: 4.5,\n  AA_LARGE: 3,\n  AAA_NORMAL: 7,\n  AAA_LARGE: 4.5\n} as const;\n\n// Check WCAG compliance\nexport const checkWCAGCompliance = (\n  foreground: string, \n  background: string, \n  isLargeText: boolean = false\n): {\n  ratio: number;\n  AA: boolean;\n  AAA: boolean;\n  level: 'fail' | 'AA' | 'AAA';\n} => {\n  const ratio = getContrastRatio(foreground, background);\n  const aaThreshold = isLargeText ? WCAG_LEVELS.AA_LARGE : WCAG_LEVELS.AA_NORMAL;\n  const aaaThreshold = isLargeText ? WCAG_LEVELS.AAA_LARGE : WCAG_LEVELS.AAA_NORMAL;\n  \n  const AA = ratio >= aaThreshold;\n  const AAA = ratio >= aaaThreshold;\n  \n  return {\n    ratio,\n    AA,\n    AAA,\n    level: AAA ? 'AAA' : AA ? 'AA' : 'fail'\n  };\n};\n\n// Robot Overlord theme colors for testing\nexport const THEME_COLORS = {\n  // Core brand colors\n  'overlord-red': '#FF4757',\n  'authority-red': '#FF3742',\n  'deep-black': '#0C0C0C',\n  'surface-dark': '#1A1A1A',\n  'steel-dark': '#2A2A2A',\n  \n  // UI colors\n  'light-text': '#F8F9FA',\n  'muted-light': '#9CA3AF',\n  'card-bg': '#1F2937',\n  'border': '#374151',\n  'muted': '#6B7280',\n  \n  // Status colors\n  'approved-green': '#10B981',\n  'rejected-red': '#EF4444',\n  'pending-yellow': '#F59E0B',\n  'under-review-blue': '#3B82F6',\n  \n  // Background variants\n  'background': '#111827',\n  'card': '#1F2937',\n  'popover': '#374151',\n  'primary': '#FF4757',\n  'secondary': '#6B7280',\n  'accent': '#FF3742',\n  'destructive': '#EF4444'\n} as const;\n\n// Test all theme color combinations\nexport const testThemeContrast = (): Array<{\n  foreground: string;\n  background: string;\n  foregroundColor: string;\n  backgroundColor: string;\n  compliance: ReturnType<typeof checkWCAGCompliance>;\n  usage: string;\n}> => {\n  const results = [];\n  \n  // Common text/background combinations\n  const combinations = [\n    { fg: 'light-text', bg: 'deep-black', usage: 'Primary text on dark background' },\n    { fg: 'light-text', bg: 'surface-dark', usage: 'Text on surface' },\n    { fg: 'light-text', bg: 'steel-dark', usage: 'Text on steel surface' },\n    { fg: 'light-text', bg: 'card', usage: 'Text on card background' },\n    { fg: 'muted-light', bg: 'deep-black', usage: 'Muted text on dark background' },\n    { fg: 'muted-light', bg: 'surface-dark', usage: 'Muted text on surface' },\n    { fg: 'muted-light', bg: 'card', usage: 'Muted text on card' },\n    { fg: 'overlord-red', bg: 'deep-black', usage: 'Brand color on dark background' },\n    { fg: 'overlord-red', bg: 'surface-dark', usage: 'Brand color on surface' },\n    { fg: 'light-text', bg: 'overlord-red', usage: 'White text on brand color' },\n    { fg: 'deep-black', bg: 'overlord-red', usage: 'Dark text on brand color' },\n    { fg: 'approved-green', bg: 'deep-black', usage: 'Success color on dark' },\n    { fg: 'rejected-red', bg: 'deep-black', usage: 'Error color on dark' },\n    { fg: 'pending-yellow', bg: 'deep-black', usage: 'Warning color on dark' },\n    { fg: 'under-review-blue', bg: 'deep-black', usage: 'Info color on dark' },\n    { fg: 'light-text', bg: 'approved-green', usage: 'Text on success background' },\n    { fg: 'light-text', bg: 'rejected-red', usage: 'Text on error background' },\n    { fg: 'light-text', bg: 'pending-yellow', usage: 'Text on warning background' },\n    { fg: 'light-text', bg: 'under-review-blue', usage: 'Text on info background' }\n  ];\n  \n  for (const combo of combinations) {\n    const foregroundColor = THEME_COLORS[combo.fg as keyof typeof THEME_COLORS];\n    const backgroundColor = THEME_COLORS[combo.bg as keyof typeof THEME_COLORS];\n    \n    if (foregroundColor && backgroundColor) {\n      const compliance = checkWCAGCompliance(foregroundColor, backgroundColor);\n      results.push({\n        foreground: combo.fg,\n        background: combo.bg,\n        foregroundColor,\n        backgroundColor,\n        compliance,\n        usage: combo.usage\n      });\n    }\n  }\n  \n  return results;\n};\n\n// Generate improved color suggestions\nexport const suggestImprovedColors = (\n  originalFg: string,\n  originalBg: string,\n  targetLevel: 'AA' | 'AAA' = 'AA',\n  isLargeText: boolean = false\n): {\n  foregroundSuggestions: string[];\n  backgroundSuggestions: string[];\n} => {\n  const targetRatio = isLargeText \n    ? (targetLevel === 'AAA' ? WCAG_LEVELS.AAA_LARGE : WCAG_LEVELS.AA_LARGE)\n    : (targetLevel === 'AAA' ? WCAG_LEVELS.AAA_NORMAL : WCAG_LEVELS.AA_NORMAL);\n  \n  const foregroundSuggestions: string[] = [];\n  const backgroundSuggestions: string[] = [];\n  \n  // Generate lighter/darker variations of foreground\n  const fgRgb = hexToRgb(originalFg);\n  if (fgRgb) {\n    for (let i = 0; i <= 255; i += 15) {\n      const lightFg = `#${Math.min(255, fgRgb.r + i).toString(16).padStart(2, '0')}${Math.min(255, fgRgb.g + i).toString(16).padStart(2, '0')}${Math.min(255, fgRgb.b + i).toString(16).padStart(2, '0')}`;\n      const darkFg = `#${Math.max(0, fgRgb.r - i).toString(16).padStart(2, '0')}${Math.max(0, fgRgb.g - i).toString(16).padStart(2, '0')}${Math.max(0, fgRgb.b - i).toString(16).padStart(2, '0')}`;\n      \n      if (getContrastRatio(lightFg, originalBg) >= targetRatio) {\n        foregroundSuggestions.push(lightFg);\n      }\n      if (getContrastRatio(darkFg, originalBg) >= targetRatio) {\n        foregroundSuggestions.push(darkFg);\n      }\n    }\n  }\n  \n  // Generate lighter/darker variations of background\n  const bgRgb = hexToRgb(originalBg);\n  if (bgRgb) {\n    for (let i = 0; i <= 255; i += 15) {\n      const lightBg = `#${Math.min(255, bgRgb.r + i).toString(16).padStart(2, '0')}${Math.min(255, bgRgb.g + i).toString(16).padStart(2, '0')}${Math.min(255, bgRgb.b + i).toString(16).padStart(2, '0')}`;\n      const darkBg = `#${Math.max(0, bgRgb.r - i).toString(16).padStart(2, '0')}${Math.max(0, bgRgb.g - i).toString(16).padStart(2, '0')}${Math.max(0, bgRgb.b - i).toString(16).padStart(2, '0')}`;\n      \n      if (getContrastRatio(originalFg, lightBg) >= targetRatio) {\n        backgroundSuggestions.push(lightBg);\n      }\n      if (getContrastRatio(originalFg, darkBg) >= targetRatio) {\n        backgroundSuggestions.push(darkBg);\n      }\n    }\n  }\n  \n  return {\n    foregroundSuggestions: [...new Set(foregroundSuggestions)].slice(0, 5),\n    backgroundSuggestions: [...new Set(backgroundSuggestions)].slice(0, 5)\n  };\n};\n\n// Generate contrast report\nexport const generateContrastReport = (): {\n  summary: {\n    total: number;\n    passing: number;\n    failing: number;\n    aaCompliant: number;\n    aaaCompliant: number;\n  };\n  results: ReturnType<typeof testThemeContrast>;\n  recommendations: Array<{\n    combination: string;\n    issue: string;\n    suggestion: string;\n    priority: 'high' | 'medium' | 'low';\n  }>;\n} => {\n  const results = testThemeContrast();\n  const passing = results.filter(r => r.compliance.AA).length;\n  const failing = results.length - passing;\n  const aaCompliant = results.filter(r => r.compliance.AA).length;\n  const aaaCompliant = results.filter(r => r.compliance.AAA).length;\n  \n  const recommendations = results\n    .filter(r => !r.compliance.AA)\n    .map(r => ({\n      combination: `${r.foreground} on ${r.background}`,\n      issue: `Contrast ratio ${r.compliance.ratio.toFixed(2)} is below WCAG AA standard (4.5)`,\n      suggestion: `Increase contrast by using darker text or lighter background`,\n      priority: r.compliance.ratio < 3 ? 'high' as const : 'medium' as const\n    }));\n  \n  return {\n    summary: {\n      total: results.length,\n      passing,\n      failing,\n      aaCompliant,\n      aaaCompliant\n    },\n    results,\n    recommendations\n  };\n};\n\n// Improved theme colors with better contrast\nexport const IMPROVED_THEME_COLORS = {\n  ...THEME_COLORS,\n  // Improved muted text for better contrast\n  'muted-light': '#D1D5DB', // Lighter for better contrast on dark backgrounds\n  // Improved status colors\n  'approved-green': '#34D399', // Lighter green for better contrast\n  'pending-yellow': '#FBBF24', // Lighter yellow for better contrast\n  'under-review-blue': '#60A5FA', // Lighter blue for better contrast\n} as const;\n\nexport default {\n  hexToRgb,\n  getLuminance,\n  getContrastRatio,\n  checkWCAGCompliance,\n  testThemeContrast,\n  suggestImprovedColors,\n  generateContrastReport,\n  THEME_COLORS,\n  IMPROVED_THEME_COLORS,\n  WCAG_LEVELS\n};\n"],"mappingsgQaA,sBAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,qBAAA;;MA1LAI,aAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,YAAA;;MAlCAC,YAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,WAAA;;MAQAC,oBAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAG,mBAAA;;MA8NbC,QAAA;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAK,QAAA;;MAvDaC,uBAAA;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAM,sBAAA;;MA/LAC,iBAAA;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAO,gBAAA;;MATAC,aAAA;IAAA;IAAAV,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAQ,YAAA;;MAVAC,SAAA;IAAA;IAAAX,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAS,QAAA;;MA2JAC,sBAAA;IAAA;IAAAZ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAU,qBAAA;;MAtDAC,kBAAA;IAAA;IAAAb,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAW,iBAAA;;;;;AArGN,MAAMF,QAAA,GAAYG,GAAA;EAAA;EAAAd,cAAA,GAAAC,CAAA;EACvB,MAAMc,MAAA;EAAA;EAAA,CAAAf,cAAA,GAAAE,CAAA,QAAS,4CAA4Cc,IAAI,CAACF,GAAA;EAAA;EAAAd,cAAA,GAAAE,CAAA;EAChE,OAAOa,MAAA;EAAA;EAAA,CAAAf,cAAA,GAAAiB,CAAA,UAAS;IACdC,CAAA,EAAGC,QAAA,CAASJ,MAAM,CAAC,EAAE,EAAE;IACvBK,CAAA,EAAGD,QAAA,CAASJ,MAAM,CAAC,EAAE,EAAE;IACvBE,CAAA,EAAGE,QAAA,CAASJ,MAAM,CAAC,EAAE,EAAE;EACzB;EAAA;EAAA,CAAAf,cAAA,GAAAiB,CAAA,UAAI;AACN;AAAA;AAAAjB,cAAA,GAAAE,CAAA;AAGO,MAAMQ,YAAA,GAAeA,CAACQ,CAAA,EAAWE,CAAA,EAAWH,CAAA;EAAA;EAAAjB,cAAA,GAAAC,CAAA;EACjD,MAAM,CAACoB,EAAA,EAAIC,EAAA,EAAIC,EAAA,CAAG;EAAA;EAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAG,CAACgB,CAAA,EAAGE,CAAA,EAAGH,CAAA,CAAE,CAACO,GAAG,CAACC,CAAA;IAAA;IAAAzB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACjCuB,CAAA,GAAIA,CAAA,GAAI;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IACR,OAAOuB,CAAA,IAAK;IAAA;IAAA,CAAAzB,cAAA,GAAAiB,CAAA,UAAUQ,CAAA,GAAI;IAAA;IAAA,CAAAzB,cAAA,GAAAiB,CAAA,UAAQS,IAAA,CAAKC,GAAG,CAAC,CAACF,CAAA,GAAI,KAAI,IAAK,OAAO;EAClE;EAAA;EAAAzB,cAAA,GAAAE,CAAA;EACA,OAAO,SAASmB,EAAA,GAAK,SAASC,EAAA,GAAK,SAASC,EAAA;AAC9C;AAAA;AAAAvB,cAAA,GAAAE,CAAA;AAGO,MAAMO,gBAAA,GAAmBA,CAACmB,MAAA,EAAgBC,MAAA;EAAA;EAAA7B,cAAA,GAAAC,CAAA;EAC/C,MAAM6B,IAAA;EAAA;EAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAOS,QAAA,CAASiB,MAAA;EACtB,MAAMG,IAAA;EAAA;EAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAOS,QAAA,CAASkB,MAAA;EAAA;EAAA7B,cAAA,GAAAE,CAAA;EAEtB;EAAI;EAAA,CAAAF,cAAA,GAAAiB,CAAA,WAACa,IAAA;EAAA;EAAA,CAAA9B,cAAA,GAAAiB,CAAA,UAAQ,CAACc,IAAA,GAAM;IAAA;IAAA/B,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,cAAA,GAAAiB,CAAA;EAAA;EAE3B,MAAMe,IAAA;EAAA;EAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAOQ,YAAA,CAAaoB,IAAA,CAAKZ,CAAC,EAAEY,IAAA,CAAKV,CAAC,EAAEU,IAAA,CAAKb,CAAC;EAChD,MAAMgB,IAAA;EAAA;EAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAOQ,YAAA,CAAaqB,IAAA,CAAKb,CAAC,EAAEa,IAAA,CAAKX,CAAC,EAAEW,IAAA,CAAKd,CAAC;EAEhD,MAAMiB,SAAA;EAAA;EAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAYwB,IAAA,CAAKS,GAAG,CAACH,IAAA,EAAMC,IAAA;EACjC,MAAMG,OAAA;EAAA;EAAA,CAAApC,cAAA,GAAAE,CAAA,QAAUwB,IAAA,CAAKW,GAAG,CAACL,IAAA,EAAMC,IAAA;EAAA;EAAAjC,cAAA,GAAAE,CAAA;EAE/B,OAAO,CAACgC,SAAA,GAAY,IAAG,KAAME,OAAA,GAAU,IAAG;AAC5C;AAGO,MAAMhC,WAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,QAAc;EACzBoC,SAAA,EAAW;EACXC,QAAA,EAAU;EACVC,UAAA,EAAY;EACZC,SAAA,EAAW;AACb;AAAA;AAAAzC,cAAA,GAAAE,CAAA;AAGO,MAAMG,mBAAA,GAAsBA,CACjCqC,UAAA,EACAC,UAAA,EACAC,WAAA;AAAA;AAAA,CAAA5C,cAAA,GAAAiB,CAAA,UAAuB,KAAK;EAAA;EAAAjB,cAAA,GAAAC,CAAA;EAO5B,MAAM4C,KAAA;EAAA;EAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAQO,gBAAA,CAAiBiC,UAAA,EAAYC,UAAA;EAC3C,MAAMG,WAAA;EAAA;EAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAc0C,WAAA;EAAA;EAAA,CAAA5C,cAAA,GAAAiB,CAAA,UAAcb,WAAA,CAAYmC,QAAQ;EAAA;EAAA,CAAAvC,cAAA,GAAAiB,CAAA,UAAGb,WAAA,CAAYkC,SAAS;EAC9E,MAAMS,YAAA;EAAA;EAAA,CAAA/C,cAAA,GAAAE,CAAA,QAAe0C,WAAA;EAAA;EAAA,CAAA5C,cAAA,GAAAiB,CAAA,UAAcb,WAAA,CAAYqC,SAAS;EAAA;EAAA,CAAAzC,cAAA,GAAAiB,CAAA,UAAGb,WAAA,CAAYoC,UAAU;EAEjF,MAAMQ,EAAA;EAAA;EAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAK2C,KAAA,IAASC,WAAA;EACpB,MAAMG,GAAA;EAAA;EAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAM2C,KAAA,IAASE,YAAA;EAAA;EAAA/C,cAAA,GAAAE,CAAA;EAErB,OAAO;IACL2C,KAAA;IACAG,EAAA;IACAC,GAAA;IACAC,KAAA,EAAOD,GAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAiB,CAAA,UAAM;IAAA;IAAA,CAAAjB,cAAA,GAAAiB,CAAA,UAAQ+B,EAAA;IAAA;IAAA,CAAAhD,cAAA,GAAAiB,CAAA,UAAK;IAAA;IAAA,CAAAjB,cAAA,GAAAiB,CAAA,UAAO;EACnC;AACF;AAGO,MAAMd,YAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,QAAe;EAC1B;EACA,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;EACd,gBAAgB;EAChB,cAAc;EAEd;EACA,cAAc;EACd,eAAe;EACf,WAAW;EACX,UAAU;EACV,SAAS;EAET;EACA,kBAAkB;EAClB,gBAAgB;EAChB,kBAAkB;EAClB,qBAAqB;EAErB;EACA,cAAc;EACd,QAAQ;EACR,WAAW;EACX,WAAW;EACX,aAAa;EACb,UAAU;EACV,eAAe;AACjB;AAAA;AAAAF,cAAA,GAAAE,CAAA;AAGO,MAAMW,iBAAA,GAAoBA,CAAA;EAAA;EAAAb,cAAA,GAAAC,CAAA;EAQ/B,MAAMkD,OAAA;EAAA;EAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAU,EAAE;EAElB;EACA,MAAMkD,YAAA;EAAA;EAAA,CAAApD,cAAA,GAAAE,CAAA,QAAe,CACnB;IAAEmD,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAkC,GAC/E;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAgBC,KAAA,EAAO;EAAkB,GACjE;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAwB,GACrE;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAQC,KAAA,EAAO;EAA0B,GACjE;IAAEF,EAAA,EAAI;IAAeC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAgC,GAC9E;IAAEF,EAAA,EAAI;IAAeC,EAAA,EAAI;IAAgBC,KAAA,EAAO;EAAwB,GACxE;IAAEF,EAAA,EAAI;IAAeC,EAAA,EAAI;IAAQC,KAAA,EAAO;EAAqB,GAC7D;IAAEF,EAAA,EAAI;IAAgBC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAiC,GAChF;IAAEF,EAAA,EAAI;IAAgBC,EAAA,EAAI;IAAgBC,KAAA,EAAO;EAAyB,GAC1E;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAgBC,KAAA,EAAO;EAA4B,GAC3E;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAgBC,KAAA,EAAO;EAA2B,GAC1E;IAAEF,EAAA,EAAI;IAAkBC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAwB,GACzE;IAAEF,EAAA,EAAI;IAAgBC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAsB,GACrE;IAAEF,EAAA,EAAI;IAAkBC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAwB,GACzE;IAAEF,EAAA,EAAI;IAAqBC,EAAA,EAAI;IAAcC,KAAA,EAAO;EAAqB,GACzE;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAkBC,KAAA,EAAO;EAA6B,GAC9E;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAgBC,KAAA,EAAO;EAA2B,GAC1E;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAkBC,KAAA,EAAO;EAA6B,GAC9E;IAAEF,EAAA,EAAI;IAAcC,EAAA,EAAI;IAAqBC,KAAA,EAAO;EAA0B,EAC/E;EAAA;EAAAvD,cAAA,GAAAE,CAAA;EAED,KAAK,MAAMsD,KAAA,IAASJ,YAAA,EAAc;IAChC,MAAMK,eAAA;IAAA;IAAA,CAAAzD,cAAA,GAAAE,CAAA,QAAkBC,YAAY,CAACqD,KAAA,CAAMH,EAAE,CAA8B;IAC3E,MAAMK,eAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAkBC,YAAY,CAACqD,KAAA,CAAMF,EAAE,CAA8B;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IAE3E;IAAI;IAAA,CAAAF,cAAA,GAAAiB,CAAA,WAAAwC,eAAA;IAAA;IAAA,CAAAzD,cAAA,GAAAiB,CAAA,WAAmByC,eAAA,GAAiB;MAAA;MAAA1D,cAAA,GAAAiB,CAAA;MACtC,MAAM0C,UAAA;MAAA;MAAA,CAAA3D,cAAA,GAAAE,CAAA,QAAaG,mBAAA,CAAoBoD,eAAA,EAAiBC,eAAA;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MACxDiD,OAAA,CAAQS,IAAI,CAAC;QACXlB,UAAA,EAAYc,KAAA,CAAMH,EAAE;QACpBV,UAAA,EAAYa,KAAA,CAAMF,EAAE;QACpBG,eAAA;QACAC,eAAA;QACAC,UAAA;QACAJ,KAAA,EAAOC,KAAA,CAAMD;MACf;IACF;IAAA;IAAA;MAAAvD,cAAA,GAAAiB,CAAA;IAAA;EACF;EAAA;EAAAjB,cAAA,GAAAE,CAAA;EAEA,OAAOiD,OAAA;AACT;AAAA;AAAAnD,cAAA,GAAAE,CAAA;AAGO,MAAMU,qBAAA,GAAwBA,CACnCiD,UAAA,EACAC,UAAA,EACAC,WAAA;AAAA;AAAA,CAAA/D,cAAA,GAAAiB,CAAA,WAA4B,IAAI,GAChC2B,WAAA;AAAA;AAAA,CAAA5C,cAAA,GAAAiB,CAAA,WAAuB,KAAK;EAAA;EAAAjB,cAAA,GAAAC,CAAA;EAK5B,MAAM+D,WAAA;EAAA;EAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAc0C,WAAA;EAAA;EAAA,CAAA5C,cAAA,GAAAiB,CAAA,WACf8C,WAAA,KAAgB;EAAA;EAAA,CAAA/D,cAAA,GAAAiB,CAAA,WAAQb,WAAA,CAAYqC,SAAS;EAAA;EAAA,CAAAzC,cAAA,GAAAiB,CAAA,WAAGb,WAAA,CAAYmC,QAAQ;EAAA;EAAA,CAAAvC,cAAA,GAAAiB,CAAA,WACpE8C,WAAA,KAAgB;EAAA;EAAA,CAAA/D,cAAA,GAAAiB,CAAA,WAAQb,WAAA,CAAYoC,UAAU;EAAA;EAAA,CAAAxC,cAAA,GAAAiB,CAAA,WAAGb,WAAA,CAAYkC,SAAS;EAE3E,MAAM2B,qBAAA;EAAA;EAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAkC,EAAE;EAC1C,MAAMgE,qBAAA;EAAA;EAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAkC,EAAE;EAE1C;EACA,MAAMiE,KAAA;EAAA;EAAA,CAAAnE,cAAA,GAAAE,CAAA,QAAQS,QAAA,CAASkD,UAAA;EAAA;EAAA7D,cAAA,GAAAE,CAAA;EACvB,IAAIiE,KAAA,EAAO;IAAA;IAAAnE,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAE,CAAA;IACT,KAAK,IAAIkE,CAAA;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAI,IAAGkE,CAAA,IAAK,KAAKA,CAAA,IAAK,IAAI;MACjC,MAAMC,OAAA;MAAA;MAAA,CAAArE,cAAA,GAAAE,CAAA,QAAU,IAAIwB,IAAA,CAAKW,GAAG,CAAC,KAAK8B,KAAA,CAAMjD,CAAC,GAAGkD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKW,GAAG,CAAC,KAAK8B,KAAA,CAAM/C,CAAC,GAAGgD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKW,GAAG,CAAC,KAAK8B,KAAA,CAAMlD,CAAC,GAAGmD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,MAAM;MACpM,MAAMC,MAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAE,CAAA,QAAS,IAAIwB,IAAA,CAAKS,GAAG,CAAC,GAAGgC,KAAA,CAAMjD,CAAC,GAAGkD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKS,GAAG,CAAC,GAAGgC,KAAA,CAAM/C,CAAC,GAAGgD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKS,GAAG,CAAC,GAAGgC,KAAA,CAAMlD,CAAC,GAAGmD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,MAAM;MAAA;MAAAvE,cAAA,GAAAE,CAAA;MAE7L,IAAIO,gBAAA,CAAiB4D,OAAA,EAASP,UAAA,KAAeE,WAAA,EAAa;QAAA;QAAAhE,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAE,CAAA;QACxD+D,qBAAA,CAAsBL,IAAI,CAACS,OAAA;MAC7B;MAAA;MAAA;QAAArE,cAAA,GAAAiB,CAAA;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MACA,IAAIO,gBAAA,CAAiB+D,MAAA,EAAQV,UAAA,KAAeE,WAAA,EAAa;QAAA;QAAAhE,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAE,CAAA;QACvD+D,qBAAA,CAAsBL,IAAI,CAACY,MAAA;MAC7B;MAAA;MAAA;QAAAxE,cAAA,GAAAiB,CAAA;MAAA;IACF;EACF;EAAA;EAAA;IAAAjB,cAAA,GAAAiB,CAAA;EAAA;EAEA;EACA,MAAMwD,KAAA;EAAA;EAAA,CAAAzE,cAAA,GAAAE,CAAA,QAAQS,QAAA,CAASmD,UAAA;EAAA;EAAA9D,cAAA,GAAAE,CAAA;EACvB,IAAIuE,KAAA,EAAO;IAAA;IAAAzE,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAE,CAAA;IACT,KAAK,IAAIkE,CAAA;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAI,IAAGkE,CAAA,IAAK,KAAKA,CAAA,IAAK,IAAI;MACjC,MAAMM,OAAA;MAAA;MAAA,CAAA1E,cAAA,GAAAE,CAAA,QAAU,IAAIwB,IAAA,CAAKW,GAAG,CAAC,KAAKoC,KAAA,CAAMvD,CAAC,GAAGkD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKW,GAAG,CAAC,KAAKoC,KAAA,CAAMrD,CAAC,GAAGgD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKW,GAAG,CAAC,KAAKoC,KAAA,CAAMxD,CAAC,GAAGmD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,MAAM;MACpM,MAAMI,MAAA;MAAA;MAAA,CAAA3E,cAAA,GAAAE,CAAA,QAAS,IAAIwB,IAAA,CAAKS,GAAG,CAAC,GAAGsC,KAAA,CAAMvD,CAAC,GAAGkD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKS,GAAG,CAAC,GAAGsC,KAAA,CAAMrD,CAAC,GAAGgD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,OAAO7C,IAAA,CAAKS,GAAG,CAAC,GAAGsC,KAAA,CAAMxD,CAAC,GAAGmD,CAAA,EAAGE,QAAQ,CAAC,IAAIC,QAAQ,CAAC,GAAG,MAAM;MAAA;MAAAvE,cAAA,GAAAE,CAAA;MAE7L,IAAIO,gBAAA,CAAiBoD,UAAA,EAAYa,OAAA,KAAYV,WAAA,EAAa;QAAA;QAAAhE,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAE,CAAA;QACxDgE,qBAAA,CAAsBN,IAAI,CAACc,OAAA;MAC7B;MAAA;MAAA;QAAA1E,cAAA,GAAAiB,CAAA;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MACA,IAAIO,gBAAA,CAAiBoD,UAAA,EAAYc,MAAA,KAAWX,WAAA,EAAa;QAAA;QAAAhE,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAE,CAAA;QACvDgE,qBAAA,CAAsBN,IAAI,CAACe,MAAA;MAC7B;MAAA;MAAA;QAAA3E,cAAA,GAAAiB,CAAA;MAAA;IACF;EACF;EAAA;EAAA;IAAAjB,cAAA,GAAAiB,CAAA;EAAA;EAAAjB,cAAA,GAAAE,CAAA;EAEA,OAAO;IACL+D,qBAAA,EAAuB,C,GAAI,IAAIW,GAAA,CAAIX,qBAAA,EAAuB,CAACY,KAAK,CAAC,GAAG;IACpEX,qBAAA,EAAuB,C,GAAI,IAAIU,GAAA,CAAIV,qBAAA,EAAuB,CAACW,KAAK,CAAC,GAAG;EACtE;AACF;AAAA;AAAA7E,cAAA,GAAAE,CAAA;AAGO,MAAMM,sBAAA,GAAyBA,CAAA;EAAA;EAAAR,cAAA,GAAAC,CAAA;EAgBpC,MAAMkD,OAAA;EAAA;EAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAUW,iBAAA;EAChB,MAAMiE,OAAA;EAAA;EAAA,CAAA9E,cAAA,GAAAE,CAAA,QAAUiD,OAAA,CAAQ4B,MAAM,CAAC7D,CAAA,IAAK;IAAA;IAAAlB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA,OAAAgB,CAAA,CAAEyC,UAAU,CAACX,EAAE;EAAF,CAAE,EAAEgC,MAAM;EAC3D,MAAMC,OAAA;EAAA;EAAA,CAAAjF,cAAA,GAAAE,CAAA,QAAUiD,OAAA,CAAQ6B,MAAM,GAAGF,OAAA;EACjC,MAAMI,WAAA;EAAA;EAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAciD,OAAA,CAAQ4B,MAAM,CAAC7D,CAAA,IAAK;IAAA;IAAAlB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA,OAAAgB,CAAA,CAAEyC,UAAU,CAACX,EAAE;EAAF,CAAE,EAAEgC,MAAM;EAC/D,MAAMG,YAAA;EAAA;EAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAeiD,OAAA,CAAQ4B,MAAM,CAAC7D,CAAA,IAAK;IAAA;IAAAlB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA,OAAAgB,CAAA,CAAEyC,UAAU,CAACV,GAAG;EAAH,CAAG,EAAE+B,MAAM;EAEjE,MAAMI,eAAA;EAAA;EAAA,CAAApF,cAAA,GAAAE,CAAA,QAAkBiD,OAAA,CACrB4B,MAAM,CAAC7D,CAAA,IAAK;IAAA;IAAAlB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA,QAACgB,CAAA,CAAEyC,UAAU,CAACX,EAAE;EAAF,CAAE,EAC5BxB,GAAG,CAACN,CAAA,IAAM;IAAA;IAAAlB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA;MACTmF,WAAA,EAAa,GAAGnE,CAAA,CAAEwB,UAAU,OAAOxB,CAAA,CAAEyB,UAAU,EAAE;MACjD2C,KAAA,EAAO,kBAAkBpE,CAAA,CAAEyC,UAAU,CAACd,KAAK,CAAC0C,OAAO,CAAC,oCAAoC;MACxFC,UAAA,EAAY,8DAA8D;MAC1EC,QAAA,EAAUvE,CAAA,CAAEyC,UAAU,CAACd,KAAK,GAAG;MAAA;MAAA,CAAA7C,cAAA,GAAAiB,CAAA,WAAI;MAAA;MAAA,CAAAjB,cAAA,GAAAiB,CAAA,WAAkB;IACvD;EAAA;EAAA;EAAAjB,cAAA,GAAAE,CAAA;EAEF,OAAO;IACLwF,OAAA,EAAS;MACPC,KAAA,EAAOxC,OAAA,CAAQ6B,MAAM;MACrBF,OAAA;MACAG,OAAA;MACAC,WAAA;MACAC;IACF;IACAhC,OAAA;IACAiC;EACF;AACF;AAGO,MAAMrF,qBAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAwB;EACnC,GAAGC,YAAY;EACf;EACA,eAAe;EACf;EACA,kBAAkB;EAClB,kBAAkB;EAClB,qBAAqB;AACvB;MAEAI,QAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,QAAe;EACbS,QAAA;EACAD,YAAA;EACAD,gBAAA;EACAJ,mBAAA;EACAQ,iBAAA;EACAD,qBAAA;EACAJ,sBAAA;EACAL,YAAA;EACAJ,qBAAA;EACAK;AACF","ignoreList":[]}