36c049dc61f8e7e7bd9f408eaa15a395
/**
 * Moderation type definitions for The Robot Overlord
 * Based on backend API schema
 */"use strict";

/* istanbul ignore next */
function cov_24x51baie2() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/moderation.ts";
  var hash = "03cef50330779362211331f005d0fa751dfeb80c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/moderation.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/moderation.ts"],
      sourcesContent: ["/**\n * Moderation type definitions for The Robot Overlord\n * Based on backend API schema\n */\n\nexport interface ModerationAction {\n  id: string;\n  type: 'post' | 'topic' | 'user' | 'comment';\n  targetId: string;\n  action: 'approve' | 'reject' | 'flag' | 'remove' | 'ban' | 'suspend' | 'warn' | 'edit' | 'lock' | 'unlock' | 'pin' | 'unpin';\n  reason?: string;\n  details?: string;\n  moderatedBy: string;\n  moderator: {\n    id: string;\n    username: string;\n    role: string;\n    avatar?: string;\n  };\n  previousStatus?: string;\n  newStatus: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  isReversible: boolean;\n  expiresAt?: string;\n  notifyTarget: boolean;\n  isPublic: boolean;\n  metadata?: Record<string, any>;\n  createdAt: string;\n  reversedAt?: string;\n  reversedBy?: string;\n}\n\nexport interface ModerationQueue {\n  id: string;\n  type: 'post' | 'topic' | 'user' | 'report';\n  targetId: string;\n  target: {\n    id: string;\n    title?: string;\n    content?: string;\n    author?: {\n      id: string;\n      username: string;\n      avatar?: string;\n    };\n  };\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'in_review' | 'resolved' | 'escalated';\n  assignedTo?: string;\n  assignedModerator?: {\n    id: string;\n    username: string;\n    avatar?: string;\n  };\n  reportCount: number;\n  autoFlagged: boolean;\n  flagReasons: string[];\n  submittedAt: string;\n  assignedAt?: string;\n  reviewedAt?: string;\n  escalatedAt?: string;\n  deadline?: string;\n}\n\nexport interface Report {\n  id: string;\n  type: 'post' | 'topic' | 'user' | 'comment';\n  targetId: string;\n  target: {\n    id: string;\n    title?: string;\n    content?: string;\n    author?: {\n      id: string;\n      username: string;\n    };\n  };\n  reportedBy: string;\n  reporter: {\n    id: string;\n    username: string;\n    avatar?: string;\n    trustScore: number;\n  };\n  reason: string;\n  category: 'spam' | 'harassment' | 'hate_speech' | 'misinformation' | 'inappropriate_content' | 'copyright' | 'other';\n  details?: string;\n  evidence?: Array<{\n    type: 'screenshot' | 'link' | 'text';\n    url?: string;\n    description?: string;\n  }>;\n  status: 'pending' | 'under_review' | 'resolved' | 'dismissed' | 'escalated';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  reviewedBy?: string;\n  reviewer?: {\n    id: string;\n    username: string;\n    role: string;\n  };\n  resolution?: string;\n  actionTaken?: ModerationAction;\n  createdAt: string;\n  reviewedAt?: string;\n  resolvedAt?: string;\n}\n\nexport interface ModerationRule {\n  id: string;\n  name: string;\n  description: string;\n  type: 'automatic' | 'manual' | 'hybrid';\n  category: 'content' | 'behavior' | 'spam' | 'quality';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  isActive: boolean;\n  conditions: Array<{\n    field: string;\n    operator: 'equals' | 'contains' | 'matches' | 'greater_than' | 'less_than';\n    value: any;\n    weight: number;\n  }>;\n  actions: Array<{\n    action: ModerationAction['action'];\n    threshold: number;\n    autoExecute: boolean;\n    requiresReview: boolean;\n  }>;\n  exceptions: Array<{\n    condition: string;\n    reason: string;\n  }>;\n  statistics: {\n    triggered: number;\n    falsePositives: number;\n    accuracy: number;\n    lastTriggered?: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ModerationStatistics {\n  totalActions: number;\n  pendingItems: number;\n  averageResponseTime: number;\n  actionBreakdown: Record<string, number>;\n  moderatorPerformance: Array<{\n    moderator: {\n      id: string;\n      username: string;\n    };\n    actionsCount: number;\n    averageTime: number;\n    accuracy: number;\n    specializations: string[];\n  }>;\n  contentTrends: Array<{\n    date: string;\n    reports: number;\n    actions: number;\n    falsePositives: number;\n  }>;\n  categoryBreakdown: Record<string, {\n    reports: number;\n    resolved: number;\n    pending: number;\n  }>;\n  automationEffectiveness: {\n    autoResolved: number;\n    requiresHuman: number;\n    accuracy: number;\n  };\n}\n\nexport interface ModerationFilters {\n  type?: ModerationQueue['type'];\n  status?: ModerationQueue['status'];\n  priority?: ModerationQueue['priority'];\n  assignedTo?: string;\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n  autoFlagged?: boolean;\n  hasReports?: boolean;\n  category?: Report['category'];\n  severity?: ModerationAction['severity'];\n  page?: number;\n  limit?: number;\n}\n\nexport interface CreateReportRequest {\n  type: Report['type'];\n  targetId: string;\n  reason: string;\n  category: Report['category'];\n  details?: string;\n  evidence?: Report['evidence'];\n}\n\nexport interface ModerationDecision {\n  action: ModerationAction['action'];\n  reason?: string;\n  details?: string;\n  severity?: ModerationAction['severity'];\n  notifyTarget?: boolean;\n  isPublic?: boolean;\n  expiresAt?: string;\n  customMessage?: string;\n}\n\nexport interface AppealRequest {\n  id: string;\n  moderationActionId: string;\n  moderationAction: ModerationAction;\n  appealedBy: string;\n  appellant: {\n    id: string;\n    username: string;\n    avatar?: string;\n  };\n  reason: string;\n  evidence?: Array<{\n    type: 'text' | 'link' | 'file';\n    content: string;\n    description?: string;\n  }>;\n  status: 'pending' | 'under_review' | 'approved' | 'denied' | 'withdrawn';\n  reviewedBy?: string;\n  reviewer?: {\n    id: string;\n    username: string;\n    role: string;\n  };\n  decision?: string;\n  decisionReason?: string;\n  createdAt: string;\n  reviewedAt?: string;\n  resolvedAt?: string;\n}\n\nexport interface ModerationTemplate {\n  id: string;\n  name: string;\n  type: 'warning' | 'removal' | 'ban' | 'suspension' | 'approval' | 'rejection';\n  subject: string;\n  content: string;\n  variables: string[];\n  isDefault: boolean;\n  usageCount: number;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n}\n"],
      names: [],
      mappings: "AAAA;;;CAGC"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "03cef50330779362211331f005d0fa751dfeb80c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_24x51baie2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_24x51baie2();
cov_24x51baie2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,