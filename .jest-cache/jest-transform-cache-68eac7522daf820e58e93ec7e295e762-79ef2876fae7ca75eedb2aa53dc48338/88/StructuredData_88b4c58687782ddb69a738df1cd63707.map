{"version":3,"names":["cov_24h33d571o","actualCoverage","s","OrganizationStructuredData","f","StructuredData","WebSiteStructuredData","default","_default","useStructuredData","data","structuredData","_jsxruntime","jsx","_head","type","dangerouslySetInnerHTML","__html","JSON","stringify","organizationData","name","url","b","process","env","NEXT_PUBLIC_SITE_URL","logo","description","sameAs","contactPoint","contactType","email","websiteData","potentialAction","target","generateArticleData","article","headline","title","author","authorUrl","publisher","datePublished","publishedAt","dateModified","updatedAt","image","undefined","mainEntityOfPage","keywords","articleSection","section","wordCount","content","split","length","generateBreadcrumbData","breadcrumbs","itemListElement","map","crumb","index","position","item","generateFAQData","faqs","mainEntity","faq","question","acceptedAnswer","text","answer","generateForumData","forum","interactionStatistic","interactionType","userInteractionCount","postCount","memberCount","generatePersonData","person","bio","jobTitle","worksFor"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/seo/StructuredData.tsx"],"sourcesContent":["'use client';\n\nimport Head from 'next/head';\n\n// Schema.org structured data types\ninterface Organization {\n  '@type': 'Organization';\n  name: string;\n  url: string;\n  logo: string;\n  description: string;\n  sameAs: string[];\n  contactPoint?: {\n    '@type': 'ContactPoint';\n    contactType: string;\n    email?: string;\n    url?: string;\n  };\n}\n\ninterface WebSite {\n  '@type': 'WebSite';\n  name: string;\n  url: string;\n  description: string;\n  potentialAction?: {\n    '@type': 'SearchAction';\n    target: string;\n    'query-input': string;\n  };\n}\n\ninterface Article {\n  '@type': 'Article';\n  headline: string;\n  description: string;\n  author: {\n    '@type': 'Person';\n    name: string;\n    url?: string;\n  };\n  publisher: Organization;\n  datePublished: string;\n  dateModified?: string;\n  image?: string[];\n  url: string;\n  mainEntityOfPage: string;\n  keywords?: string[];\n  articleSection?: string;\n  wordCount?: number;\n}\n\ninterface BreadcrumbList {\n  '@type': 'BreadcrumbList';\n  itemListElement: Array<{\n    '@type': 'ListItem';\n    position: number;\n    name: string;\n    item: string;\n  }>;\n}\n\ninterface FAQPage {\n  '@type': 'FAQPage';\n  mainEntity: Array<{\n    '@type': 'Question';\n    name: string;\n    acceptedAnswer: {\n      '@type': 'Answer';\n      text: string;\n    };\n  }>;\n}\n\ninterface StructuredDataProps {\n  data: Organization | WebSite | Article | BreadcrumbList | FAQPage | any;\n}\n\nexport const StructuredData: React.FC<StructuredDataProps> = ({ data }) => {\n  const structuredData = {\n    '@context': 'https://schema.org',\n    ...data\n  };\n\n  return (\n    <Head>\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{\n          __html: JSON.stringify(structuredData, null, 2)\n        }}\n      />\n    </Head>\n  );\n};\n\n// Predefined structured data for common use cases\nexport const OrganizationStructuredData: React.FC = () => {\n  const organizationData: Organization = {\n    '@type': 'Organization',\n    name: 'The Robot Overlord',\n    url: process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com',\n    logo: `${process.env.NEXT_PUBLIC_SITE_URL}/images/logo.png`,\n    description: 'AI-powered community platform for technology discussions and insights',\n    sameAs: [\n      'https://twitter.com/robotoverlord',\n      'https://github.com/robotoverlord',\n      'https://linkedin.com/company/robotoverlord'\n    ],\n    contactPoint: {\n      '@type': 'ContactPoint',\n      contactType: 'customer support',\n      email: 'support@robotoverlord.com',\n      url: `${process.env.NEXT_PUBLIC_SITE_URL}/contact`\n    }\n  };\n\n  return <StructuredData data={organizationData} />;\n};\n\nexport const WebSiteStructuredData: React.FC = () => {\n  const websiteData: WebSite = {\n    '@type': 'WebSite',\n    name: 'The Robot Overlord',\n    url: process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com',\n    description: 'AI-powered community platform for technology discussions and insights',\n    potentialAction: {\n      '@type': 'SearchAction',\n      target: `${process.env.NEXT_PUBLIC_SITE_URL}/search?q={search_term_string}`,\n      'query-input': 'required name=search_term_string'\n    }\n  };\n\n  return <StructuredData data={websiteData} />;\n};\n\n// Hook for generating structured data\nexport const useStructuredData = () => {\n  const generateArticleData = (article: {\n    title: string;\n    description: string;\n    content: string;\n    author: string;\n    authorUrl?: string;\n    publishedAt: string;\n    updatedAt?: string;\n    image?: string;\n    url: string;\n    keywords?: string[];\n    section?: string;\n  }): Article => ({\n    '@type': 'Article',\n    headline: article.title,\n    description: article.description,\n    author: {\n      '@type': 'Person',\n      name: article.author,\n      url: article.authorUrl\n    },\n    publisher: {\n      '@type': 'Organization',\n      name: 'The Robot Overlord',\n      url: process.env.NEXT_PUBLIC_SITE_URL || 'https://robotoverlord.com',\n      logo: `${process.env.NEXT_PUBLIC_SITE_URL}/images/logo.png`,\n      description: 'AI-powered community platform',\n      sameAs: []\n    },\n    datePublished: article.publishedAt,\n    dateModified: article.updatedAt || article.publishedAt,\n    image: article.image ? [article.image] : undefined,\n    url: article.url,\n    mainEntityOfPage: article.url,\n    keywords: article.keywords,\n    articleSection: article.section,\n    wordCount: article.content.split(' ').length\n  });\n\n  const generateBreadcrumbData = (breadcrumbs: Array<{\n    name: string;\n    url: string;\n  }>): BreadcrumbList => ({\n    '@type': 'BreadcrumbList',\n    itemListElement: breadcrumbs.map((crumb, index) => ({\n      '@type': 'ListItem',\n      position: index + 1,\n      name: crumb.name,\n      item: crumb.url\n    }))\n  });\n\n  const generateFAQData = (faqs: Array<{\n    question: string;\n    answer: string;\n  }>): FAQPage => ({\n    '@type': 'FAQPage',\n    mainEntity: faqs.map(faq => ({\n      '@type': 'Question',\n      name: faq.question,\n      acceptedAnswer: {\n        '@type': 'Answer',\n        text: faq.answer\n      }\n    }))\n  });\n\n  const generateForumData = (forum: {\n    name: string;\n    description: string;\n    url: string;\n    postCount: number;\n    memberCount: number;\n  }) => ({\n    '@type': 'DiscussionForumPosting',\n    name: forum.name,\n    description: forum.description,\n    url: forum.url,\n    interactionStatistic: [\n      {\n        '@type': 'InteractionCounter',\n        interactionType: 'https://schema.org/CommentAction',\n        userInteractionCount: forum.postCount\n      },\n      {\n        '@type': 'InteractionCounter',\n        interactionType: 'https://schema.org/JoinAction',\n        userInteractionCount: forum.memberCount\n      }\n    ]\n  });\n\n  const generatePersonData = (person: {\n    name: string;\n    bio?: string;\n    url: string;\n    image?: string;\n    sameAs?: string[];\n    jobTitle?: string;\n    worksFor?: string;\n  }) => ({\n    '@type': 'Person',\n    name: person.name,\n    description: person.bio,\n    url: person.url,\n    image: person.image,\n    sameAs: person.sameAs || [],\n    jobTitle: person.jobTitle,\n    worksFor: person.worksFor ? {\n      '@type': 'Organization',\n      name: person.worksFor\n    } : undefined\n  });\n\n  return {\n    generateArticleData,\n    generateBreadcrumbData,\n    generateFAQData,\n    generateForumData,\n    generatePersonData\n  };\n};\n\nexport default StructuredData;\n"],"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","ignoreList":[]}