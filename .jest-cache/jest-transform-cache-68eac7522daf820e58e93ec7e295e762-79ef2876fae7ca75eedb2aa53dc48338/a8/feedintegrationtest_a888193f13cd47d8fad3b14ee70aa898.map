{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/pages/feed.integration.test.tsx"],"sourcesContent":["import {\n  createMockPost,\n  integrationRender as render,\n  screen,\n  userEvent,\n  waitFor,\n} from \"@/__tests__/utils/test-utils\";\n\nimport FeedPage from \"@/app/feed/page\";\n\n// Mock the lazy components\njest.mock(\"@/components/lazy/LazyComponents\", () => ({\n  LazyContentFeed: ({\n    items = [],\n    onLoadMore,\n    hasMore,\n    isLoadingMore,\n  }: {\n    items?: Array<{\n      id: string;\n      data?: { title?: string; content?: string; author?: string };\n      title?: string;\n      content?: string;\n      author?: string;\n    }>;\n    onLoadMore?: () => void;\n    hasMore?: boolean;\n    isLoadingMore?: boolean;\n  }) => (\n    <div data-testid=\"content-feed\">\n      <div data-testid=\"feed-items\">\n        {items.map((item) => (\n          <div key={item.id} data-testid={`feed-item-${item.id}`}>\n            <h3>{item.data?.title || item.title}</h3>\n            <p>{item.data?.content || item.content}</p>\n            <span>By {item.data?.author || item.author}</span>\n          </div>\n        ))}\n      </div>\n      {hasMore && (\n        <button\n          onClick={onLoadMore}\n          disabled={isLoadingMore}\n          data-testid=\"load-more-button\"\n        >\n          {isLoadingMore ? \"Loading...\" : \"Load More\"}\n        </button>\n      )}\n    </div>\n  ),\n  LazyPersonalizedRecommendations: ({\n    limit,\n    categories = [],\n  }: {\n    limit?: number;\n    categories?: string[];\n  }) => (\n    <div data-testid=\"recommendations\">\n      <h3>Recommendations</h3>\n      <p>Limit: {limit}</p>\n      <p>Categories: {categories.join(\", \")}</p>\n    </div>\n  ),\n}));\n\n// Mock hooks\nconst mockUseRealTimeUpdates = jest.fn(() => ({\n  connected: true,\n  isRealTimeEnabled: true,\n  lastUpdate: null,\n}));\n\njest.mock(\"@/hooks/useRealTimeUpdates\", () => ({\n  useRealTimeUpdates: mockUseRealTimeUpdates,\n}));\n\n// Mock other UI components\njest.mock(\"@/components/ui/LoadingSpinner\", () => ({\n  LoadingState: ({\n    children,\n    isLoading,\n    error,\n    skeleton,\n  }: {\n    children: React.ReactNode;\n    isLoading?: boolean;\n    error?: string | null;\n    skeleton?: React.ReactNode;\n  }) => {\n    if (isLoading) return <div data-testid=\"loading-state\">{skeleton}</div>;\n    if (error) return <div data-testid=\"error-state\">Error loading feed</div>;\n    return children;\n  },\n}));\n\njest.mock(\"@/components/ui/EmptyState\", () => ({\n  EmptyFeedState: () => (\n    <div data-testid=\"empty-feed-state\">Mock Empty Feed State</div>\n  ),\n}));\n\njest.mock(\"@/components/feed/FeedFilters\", () => ({\n  FeedFilters: () => <div data-testid=\"feed-filters\">Mock Feed Filters</div>,\n}));\n\n// Mock services\nconst mockPostsService = {\n  getPosts: jest.fn(),\n  getPost: jest.fn(),\n  createPost: jest.fn(),\n  updatePost: jest.fn(),\n  deletePost: jest.fn(),\n};\n\njest.mock(\"@/services\", () => ({\n  postsService: mockPostsService,\n  topicsService: {\n    getTopics: jest.fn(),\n    getTopic: jest.fn(),\n  },\n}));\n\n// Mock API calls\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe(\"Feed Page Integration\", () => {\n  const mockPosts = [\n    createMockPost({\n      id: \"1\",\n      title: \"AI Revolution\",\n      content: \"The future of AI is here\",\n      author: \"ai_expert\",\n    }),\n    createMockPost({\n      id: \"2\",\n      title: \"Machine Learning Basics\",\n      content: \"Understanding ML fundamentals\",\n      author: \"ml_teacher\",\n    }),\n  ];\n\n  beforeEach(() => {\n    mockFetch.mockClear();\n    // Mock successful API responses\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({\n        posts: mockPosts,\n        hasMore: true,\n        total: 10,\n      }),\n    });\n  });\n\n  it(\"renders feed page with posts\", async () => {\n    render(<FeedPage />);\n\n    // Wait for posts to load\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check for feed title\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n  });\n\n  it(\"displays loading state initially\", async () => {\n    render(<FeedPage />);\n\n    // Wait for content to load\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Content should be rendered\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n  });\n\n  it(\"handles filter changes\", async () => {\n    render(<FeedPage />);\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"feed-filters\")).toBeInTheDocument();\n    });\n\n    // Should render filters component\n    expect(screen.getByText(\"Mock Feed Filters\")).toBeInTheDocument();\n  });\n\n  it(\"implements infinite scrolling\", async () => {\n    const user = userEvent.setup();\n    render(<FeedPage />);\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Mock additional posts for load more\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        posts: [createMockPost({ id: \"3\", title: \"New Post\" })],\n        hasMore: false,\n        total: 3,\n      }),\n    });\n\n    // Click load more button\n    const loadMoreButton = screen.getByRole('button', { name: /load more/i }) || screen.getByText(/load more/i);\n    await user.click(loadMoreButton);\n\n    // Should show loading state\n    expect(loadMoreButton).toHaveTextContent(\"Loading...\");\n\n    // Wait for new content\n    await waitFor(() => {\n      expect(screen.getByText(\"New Post\")).toBeInTheDocument();\n    });\n  });\n\n  it(\"shows recommendations sidebar\", async () => {\n    render(<FeedPage />);\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check for feed content\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n  });\n\n  it(\"handles real-time updates\", async () => {\n    render(<FeedPage />);\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check that real-time updates hook is called\n    await waitFor(() => {\n      expect(mockUseRealTimeUpdates).toHaveBeenCalled();\n    }, { timeout: 3000 });\n  });\n\n  it(\"handles API errors gracefully\", async () => {\n    // Mock API error\n    mockPostsService.getPosts.mockRejectedValueOnce(new Error(\"API Error\"));\n\n    render(<FeedPage />);\n\n    // Should still render the page structure\n    await waitFor(() => {\n      expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n    });\n  });\n\n  it(\"shows empty state when no posts\", async () => {\n    // Mock empty posts response\n    mockPostsService.getPosts.mockResolvedValueOnce({\n      posts: [],\n      hasMore: false,\n      total: 0,\n    });\n\n    render(<FeedPage />);\n\n    // Should render the page with empty state component\n    await waitFor(() => {\n      expect(screen.getByTestId(\"empty-feed-state\")).toBeInTheDocument();\n    }, { timeout: 3000 });\n  });\n\n  it(\"maintains accessibility standards\", async () => {\n    render(<FeedPage />);\n\n    // Check for proper heading structure - look for the actual heading\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n\n    // Wait for content to load\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Check keyboard navigation\n    const buttons = screen.getAllByRole(\"button\");\n    if (buttons.length > 0 && buttons[0]) {\n      buttons[0].focus();\n      // Should be able to focus elements\n      expect(document.activeElement).toBe(buttons[0]);\n    }\n  });\n\n  it(\"handles responsive layout\", () => {\n    // Mock different viewport sizes\n    Object.defineProperty(window, \"innerWidth\", {\n      writable: true,\n      configurable: true,\n      value: 768,\n    });\n\n    render(<FeedPage />);\n\n    // Check if layout renders properly on mobile\n    expect(screen.getByText(\"Content Feed\")).toBeInTheDocument();\n\n    // Verify responsive behavior exists\n    expect(window.innerWidth).toBe(768);\n  });\n\n  it(\"preserves scroll position on navigation\", async () => {\n    // Mock window.scrollTo and scrollY\n    const mockScrollTo = jest.fn();\n    Object.defineProperty(window, \"scrollTo\", {\n      value: mockScrollTo,\n      writable: true,\n    });\n    Object.defineProperty(window, \"scrollY\", {\n      value: 0,\n      writable: true,\n      configurable: true,\n    });\n\n    render(<FeedPage />);\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Simulate scroll down\n    mockScrollTo(0, 500);\n    Object.defineProperty(window, \"scrollY\", { value: 500, writable: true });\n\n    expect(mockScrollTo).toHaveBeenCalledWith(0, 500);\n    expect(window.scrollY).toBe(500);\n\n    // Verify scroll restoration capability exists\n    expect(typeof window.scrollTo).toBe(\"function\");\n  });\n\n  it(\"integrates with performance monitoring\", async () => {\n    // Mock performance.now for consistent timing\n    const mockPerformanceNow = jest.spyOn(performance, \"now\");\n    mockPerformanceNow.mockReturnValueOnce(0).mockReturnValueOnce(100);\n\n    render(<FeedPage />);\n\n    await waitFor(() => {\n      expect(screen.getByTestId(\"content-feed\")).toBeInTheDocument();\n    });\n\n    // Verify performance monitoring is available\n    expect(typeof performance.now).toBe(\"function\");\n    expect(mockPerformanceNow).toHaveBeenCalled();\n\n    mockPerformanceNow.mockRestore();\n  });\n});\n"],"names":["jest","mock","LazyContentFeed","items","onLoadMore","hasMore","isLoadingMore","div","data-testid","map","item","id","h3","data","title","p","content","span","author","button","onClick","disabled","LazyPersonalizedRecommendations","limit","categories","join","useRealTimeUpdates","mockUseRealTimeUpdates","LoadingState","children","isLoading","error","skeleton","EmptyFeedState","FeedFilters","postsService","mockPostsService","topicsService","getTopics","fn","getTopic","connected","isRealTimeEnabled","lastUpdate","getPosts","getPost","createPost","updatePost","deletePost","mockFetch","global","fetch","describe","mockPosts","createMockPost","beforeEach","mockClear","mockResolvedValue","ok","json","posts","total","it","render","FeedPage","waitFor","expect","screen","getByTestId","toBeInTheDocument","getByText","user","userEvent","setup","mockResolvedValueOnce","loadMoreButton","getByRole","name","click","toHaveTextContent","toHaveBeenCalled","timeout","mockRejectedValueOnce","Error","buttons","getAllByRole","length","focus","document","activeElement","toBe","Object","defineProperty","window","writable","configurable","value","innerWidth","mockScrollTo","toHaveBeenCalledWith","scrollY","scrollTo","mockPerformanceNow","spyOn","performance","mockReturnValueOnce","now","mockRestore"],"mappings":"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"}