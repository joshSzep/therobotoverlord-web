e73db686c00bb8171684ab1e8255e6db
"use strict";
// Mock the lazy components
jest.mock("@/components/lazy/LazyComponents", ()=>({
        LazyContentFeed: ({ items = [], onLoadMore, hasMore, isLoadingMore })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "content-feed",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "feed-items",
                        children: items.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                "data-testid": `feed-item-${item.id}`,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                        children: item.data?.title || item.title
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        children: item.data?.content || item.content
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                        children: [
                                            "By ",
                                            item.data?.author || item.author
                                        ]
                                    })
                                ]
                            }, item.id))
                    }),
                    hasMore && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: onLoadMore,
                        disabled: isLoadingMore,
                        "data-testid": "load-more-button",
                        children: isLoadingMore ? "Loading..." : "Load More"
                    })
                ]
            }),
        LazyPersonalizedRecommendations: ({ limit, categories = [] })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "recommendations",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                        children: "Recommendations"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                        children: [
                            "Limit: ",
                            limit
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                        children: [
                            "Categories: ",
                            categories.join(", ")
                        ]
                    })
                ]
            })
    }));
jest.mock("@/hooks/useRealTimeUpdates", ()=>({
        useRealTimeUpdates: mockUseRealTimeUpdates
    }));
// Mock other UI components
jest.mock("@/components/ui/LoadingSpinner", ()=>({
        LoadingState: ({ children, isLoading, error, skeleton })=>{
            if (isLoading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "loading-state",
                children: skeleton
            });
            if (error) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "error-state",
                children: "Error loading feed"
            });
            return children;
        }
    }));
jest.mock("@/components/ui/EmptyState", ()=>({
        EmptyFeedState: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "empty-feed-state",
                children: "Mock Empty Feed State"
            })
    }));
jest.mock("@/components/feed/FeedFilters", ()=>({
        FeedFilters: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "feed-filters",
                children: "Mock Feed Filters"
            })
    }));
jest.mock("@/services", ()=>({
        postsService: mockPostsService,
        topicsService: {
            getTopics: jest.fn(),
            getTopic: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _testutils = require("../utils/test-utils");
const _page = /*#__PURE__*/ _interop_require_default(require("../../app/feed/page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock hooks
const mockUseRealTimeUpdates = jest.fn(()=>({
        connected: true,
        isRealTimeEnabled: true,
        lastUpdate: null
    }));
// Mock services
const mockPostsService = {
    getPosts: jest.fn(),
    getPost: jest.fn(),
    createPost: jest.fn(),
    updatePost: jest.fn(),
    deletePost: jest.fn()
};
// Mock API calls
const mockFetch = jest.fn();
global.fetch = mockFetch;
describe("Feed Page Integration", ()=>{
    const mockPosts = [
        (0, _testutils.createMockPost)({
            id: "1",
            title: "AI Revolution",
            content: "The future of AI is here",
            author: "ai_expert"
        }),
        (0, _testutils.createMockPost)({
            id: "2",
            title: "Machine Learning Basics",
            content: "Understanding ML fundamentals",
            author: "ml_teacher"
        })
    ];
    beforeEach(()=>{
        mockFetch.mockClear();
        // Mock successful API responses
        mockFetch.mockResolvedValue({
            ok: true,
            json: async ()=>({
                    posts: mockPosts,
                    hasMore: true,
                    total: 10
                })
        });
    });
    it("renders feed page with posts", async ()=>{
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Wait for posts to load
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Check for feed title
        expect(_testutils.screen.getByText("Content Feed")).toBeInTheDocument();
    });
    it("displays loading state initially", async ()=>{
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Wait for content to load
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Content should be rendered
        expect(_testutils.screen.getByText("Content Feed")).toBeInTheDocument();
    });
    it("handles filter changes", async ()=>{
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("feed-filters")).toBeInTheDocument();
        });
        // Should render filters component
        expect(_testutils.screen.getByText("Mock Feed Filters")).toBeInTheDocument();
    });
    it("implements infinite scrolling", async ()=>{
        const user = _testutils.userEvent.setup();
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Mock additional posts for load more
        mockFetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    posts: [
                        (0, _testutils.createMockPost)({
                            id: "3",
                            title: "New Post"
                        })
                    ],
                    hasMore: false,
                    total: 3
                })
        });
        // Click load more button
        const loadMoreButton = _testutils.screen.getByRole('button', {
            name: /load more/i
        }) || _testutils.screen.getByText(/load more/i);
        await user.click(loadMoreButton);
        // Should show loading state
        expect(loadMoreButton).toHaveTextContent("Loading...");
        // Wait for new content
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByText("New Post")).toBeInTheDocument();
        });
    });
    it("shows recommendations sidebar", async ()=>{
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Check for feed content
        expect(_testutils.screen.getByText("Content Feed")).toBeInTheDocument();
    });
    it("handles real-time updates", async ()=>{
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Check that real-time updates hook is called
        await (0, _testutils.waitFor)(()=>{
            expect(mockUseRealTimeUpdates).toHaveBeenCalled();
        }, {
            timeout: 3000
        });
    });
    it("handles API errors gracefully", async ()=>{
        // Mock API error
        mockPostsService.getPosts.mockRejectedValueOnce(new Error("API Error"));
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Should still render the page structure
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByText("Content Feed")).toBeInTheDocument();
        });
    });
    it("shows empty state when no posts", async ()=>{
        // Mock empty posts response
        mockPostsService.getPosts.mockResolvedValueOnce({
            posts: [],
            hasMore: false,
            total: 0
        });
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Should render the page with empty state component
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("empty-feed-state")).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    it("maintains accessibility standards", async ()=>{
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Check for proper heading structure - look for the actual heading
        expect(_testutils.screen.getByText("Content Feed")).toBeInTheDocument();
        // Wait for content to load
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Check keyboard navigation
        const buttons = _testutils.screen.getAllByRole("button");
        if (buttons.length > 0 && buttons[0]) {
            buttons[0].focus();
            // Should be able to focus elements
            expect(document.activeElement).toBe(buttons[0]);
        }
    });
    it("handles responsive layout", ()=>{
        // Mock different viewport sizes
        Object.defineProperty(window, "innerWidth", {
            writable: true,
            configurable: true,
            value: 768
        });
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        // Check if layout renders properly on mobile
        expect(_testutils.screen.getByText("Content Feed")).toBeInTheDocument();
        // Verify responsive behavior exists
        expect(window.innerWidth).toBe(768);
    });
    it("preserves scroll position on navigation", async ()=>{
        // Mock window.scrollTo and scrollY
        const mockScrollTo = jest.fn();
        Object.defineProperty(window, "scrollTo", {
            value: mockScrollTo,
            writable: true
        });
        Object.defineProperty(window, "scrollY", {
            value: 0,
            writable: true,
            configurable: true
        });
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Simulate scroll down
        mockScrollTo(0, 500);
        Object.defineProperty(window, "scrollY", {
            value: 500,
            writable: true
        });
        expect(mockScrollTo).toHaveBeenCalledWith(0, 500);
        expect(window.scrollY).toBe(500);
        // Verify scroll restoration capability exists
        expect(typeof window.scrollTo).toBe("function");
    });
    it("integrates with performance monitoring", async ()=>{
        // Mock performance.now for consistent timing
        const mockPerformanceNow = jest.spyOn(performance, "now");
        mockPerformanceNow.mockReturnValueOnce(0).mockReturnValueOnce(100);
        (0, _testutils.integrationRender)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await (0, _testutils.waitFor)(()=>{
            expect(_testutils.screen.getByTestId("content-feed")).toBeInTheDocument();
        });
        // Verify performance monitoring is available
        expect(typeof performance.now).toBe("function");
        expect(mockPerformanceNow).toHaveBeenCalled();
        mockPerformanceNow.mockRestore();
    });
});

//# sourceMappingURL=data:application/json;base64,