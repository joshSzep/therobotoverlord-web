{"version":3,"names":["cov_1bk2c8qr8c","actualCoverage","s","AuthProvider","f","useAuth","useRequireAuth","AuthContext","_react","createContext","children","user","setUser","useState","isLoading","setIsLoading","error","setError","isAuthenticated","clearError","useCallback","updateUser","updates","prev","b","storeTokens","accessToken","refreshToken","window","localStorage","setItem","_apiclient","apiClient","setAuthToken","clearTokens","removeItem","clearAuthToken","fetchCurrentUser","userData","get","console","login","credentials","response","post","tokens","access_token","refresh_token","currentUser","Error","message","loginWithGoogle","provider","getItem","logout","useEffect","initializeAuth","token","refreshInterval","setInterval","catch","clearInterval","contextValue","_jsxruntime","jsx","Provider","value","context","useContext","auth","location","href"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/contexts/AuthContext.tsx"],"sourcesContent":["/**\n * Authentication Context for The Robot Overlord\n * Manages user authentication state and token handling\n */\n\n'use client';\n\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { apiClient } from '@/lib/api-client';\nimport { User, AuthResponse, LoginCredentials, OAuthProvider, CurrentUser } from '@/types/user';\n\ninterface AuthContextType {\n  // State\n  user: CurrentUser | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  login: (credentials: LoginCredentials) => Promise<void>;\n  loginWithGoogle: (provider: OAuthProvider) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<void>;\n  clearError: () => void;\n  updateUser: (updates: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<CurrentUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const isAuthenticated = !!user;\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  /**\n   * Update user data in state\n   */\n  const updateUser = useCallback((updates: Partial<User>) => {\n    setUser(prev => prev ? { ...prev, ...updates } : null);\n  }, []);\n\n  /**\n   * Store authentication tokens\n   */\n  const storeTokens = useCallback((accessToken: string, refreshToken: string) => {\n    if (typeof window === 'undefined') return;\n    \n    localStorage.setItem('auth_token', accessToken);\n    localStorage.setItem('refresh_token', refreshToken);\n    apiClient.setAuthToken(accessToken);\n  }, []);\n\n  /**\n   * Clear authentication tokens\n   */\n  const clearTokens = useCallback(() => {\n    if (typeof window === 'undefined') return;\n    \n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('refresh_token');\n    apiClient.clearAuthToken();\n  }, []);\n\n  /**\n   * Fetch current user data\n   */\n  const fetchCurrentUser = useCallback(async (): Promise<CurrentUser | null> => {\n    try {\n      const userData = await apiClient.get<CurrentUser>('/auth/me');\n      return userData;\n    } catch (error) {\n      console.error('Failed to fetch current user:', error);\n      return null;\n    }\n  }, []);\n\n  /**\n   * Login with email/password\n   */\n  const login = useCallback(async (credentials: LoginCredentials) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<AuthResponse>('/auth/login', credentials);\n      \n      // Store tokens\n      storeTokens(response.tokens.access_token, response.tokens.refresh_token);\n      \n      // Fetch full user data with permissions and preferences\n      const currentUser = await fetchCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n      } else {\n        throw new Error('Failed to fetch user data after login');\n      }\n    } catch (error: any) {\n      setError(error.message || 'Login failed');\n      clearTokens();\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [storeTokens, clearTokens, fetchCurrentUser]);\n\n  /**\n   * Login with Google OAuth\n   */\n  const loginWithGoogle = useCallback(async (provider: OAuthProvider) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await apiClient.post<AuthResponse>('/auth/oauth/google', provider);\n      \n      // Store tokens\n      storeTokens(response.tokens.access_token, response.tokens.refresh_token);\n      \n      // Fetch full user data\n      const currentUser = await fetchCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n      } else {\n        throw new Error('Failed to fetch user data after OAuth login');\n      }\n    } catch (error: any) {\n      setError(error.message || 'Google login failed');\n      clearTokens();\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [storeTokens, clearTokens, fetchCurrentUser]);\n\n  /**\n   * Refresh authentication token\n   */\n  const refreshToken = useCallback(async () => {\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await apiClient.post<AuthResponse>('/auth/refresh', {\n        refresh_token: refreshToken\n      });\n\n      // Store new tokens\n      storeTokens(response.tokens.access_token, response.tokens.refresh_token);\n      \n      // Update user data\n      const currentUser = await fetchCurrentUser();\n      if (currentUser) {\n        setUser(currentUser);\n      }\n    } catch (error: any) {\n      console.error('Token refresh failed:', error);\n      // If refresh fails, logout user\n      await logout();\n      throw error;\n    }\n  }, [storeTokens, fetchCurrentUser]);\n\n  /**\n   * Logout user\n   */\n  const logout = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      \n      // Call logout endpoint to invalidate tokens on server\n      try {\n        await apiClient.post('/auth/logout');\n      } catch (error) {\n        // Continue with logout even if server call fails\n        console.error('Server logout failed:', error);\n      }\n      \n      // Clear local state and tokens\n      clearTokens();\n      setUser(null);\n      setError(null);\n    } catch (error: any) {\n      console.error('Logout error:', error);\n      setError(error.message || 'Logout failed');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [clearTokens]);\n\n  /**\n   * Initialize authentication state on mount\n   */\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        setIsLoading(true);\n        \n        const token = localStorage.getItem('auth_token');\n        if (!token) {\n          setIsLoading(false);\n          return;\n        }\n\n        // Set token in API client\n        apiClient.setAuthToken(token);\n        \n        // Try to fetch current user\n        const currentUser = await fetchCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n        } else {\n          // Token might be invalid, clear it\n          clearTokens();\n        }\n      } catch (error) {\n        console.error('Auth initialization failed:', error);\n        clearTokens();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Only run on client side\n    if (typeof window !== 'undefined') {\n      initializeAuth();\n    }\n  }, [fetchCurrentUser, clearTokens]);\n\n  /**\n   * Set up token refresh interval\n   */\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    // Refresh token every 50 minutes (tokens typically expire in 1 hour)\n    const refreshInterval = setInterval(() => {\n      refreshToken().catch(error => {\n        console.error('Automatic token refresh failed:', error);\n      });\n    }, 50 * 60 * 1000); // 50 minutes\n\n    return () => clearInterval(refreshInterval);\n  }, [isAuthenticated, refreshToken]);\n\n  const contextValue: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    loginWithGoogle,\n    logout,\n    refreshToken,\n    clearError,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n/**\n * Hook to use authentication context\n */\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\n/**\n * Hook to require authentication (redirects to login if not authenticated)\n */\nexport function useRequireAuth() {\n  const auth = useAuth();\n  \n  useEffect(() => {\n    if (!auth.isLoading && !auth.isAuthenticated) {\n      // Redirect to login page\n      if (typeof window !== 'undefined') {\n        window.location.href = '/login';\n      }\n    }\n  }, [auth.isLoading, auth.isAuthenticated]);\n\n  return auth;\n}\n"],"mappingsgB;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAAAC,aAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,YAAA;;MAyPAE,QAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,OAAA;;MAWAC,eAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAI,cAAA;;;;;;;;yEA9RmE;;;kCACzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmB1B,MAAMC,WAAA;AAAA;AAAA,cAAAP,cAAA,GAAAE,CAAA,QAAc,IAAAM,MAAA,CAAAC,aAAa,EAAyB;AAMnD,SAASN,aAAa;EAAEO;AAAQ,CAAqB;EAAA;EAAAV,cAAA,GAAAI,CAAA;EAC1D,MAAM,CAACO,IAAA,EAAMC,OAAA,CAAQ;EAAA;EAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAG,IAAAM,MAAA,CAAAK,QAAQ,EAAqB;EACrD,MAAM,CAACC,SAAA,EAAWC,YAAA,CAAa;EAAA;EAAA,CAAAf,cAAA,GAAAE,CAAA,QAAG,IAAAM,MAAA,CAAAK,QAAQ,EAAC;EAC3C,MAAM,CAACG,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAG,IAAAM,MAAA,CAAAK,QAAQ,EAAgB;EAElD,MAAMK,eAAA;EAAA;EAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAkB,CAAC,CAACS,IAAA;EAE1B;;;EAGA,MAAMQ,UAAA;EAAA;EAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAa,IAAAM,MAAA,CAAAY,WAAW,EAAC;IAAA;IAAApB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC7Be,QAAA,CAAS;EACX,GAAG,EAAE;EAEL;;;EAGA,MAAMI,UAAA;EAAA;EAAA,CAAArB,cAAA,GAAAE,CAAA,QAAa,IAAAM,MAAA,CAAAY,WAAW,EAAEE,OAAA;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC9BU,OAAA,CAAQW,IAAA,IAAQ;MAAA;MAAAvB,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAqB,IAAA;MAAA;MAAA,CAAAvB,cAAA,GAAAwB,CAAA,WAAO;QAAE,GAAGD,IAAI;QAAE,GAAGD;MAAQ;MAAA;MAAA,CAAAtB,cAAA,GAAAwB,CAAA,WAAI;IAAA;EACnD,GAAG,EAAE;EAEL;;;EAGA,MAAMC,WAAA;EAAA;EAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAc,IAAAM,MAAA,CAAAY,WAAW,EAAC,CAACM,WAAA,EAAqBC,YAAA;IAAA;IAAA3B,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACpD,IAAI,OAAO0B,MAAA,KAAW,aAAa;MAAA;MAAA5B,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAwB,CAAA;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAEnC2B,YAAA,CAAaC,OAAO,CAAC,cAAcJ,WAAA;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IACnC2B,YAAA,CAAaC,OAAO,CAAC,iBAAiBH,YAAA;IAAA;IAAA3B,cAAA,GAAAE,CAAA;IACtC6B,UAAA,CAAAC,SAAS,CAACC,YAAY,CAACP,WAAA;EACzB,GAAG,EAAE;EAEL;;;EAGA,MAAMQ,WAAA;EAAA;EAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAc,IAAAM,MAAA,CAAAY,WAAW,EAAC;IAAA;IAAApB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC9B,IAAI,OAAO0B,MAAA,KAAW,aAAa;MAAA;MAAA5B,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAwB,CAAA;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAEnC2B,YAAA,CAAaM,UAAU,CAAC;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACxB2B,YAAA,CAAaM,UAAU,CAAC;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACxB6B,UAAA,CAAAC,SAAS,CAACI,cAAc;EAC1B,GAAG,EAAE;EAEL;;;EAGA,MAAMC,gBAAA;EAAA;EAAA,CAAArC,cAAA,GAAAE,CAAA,QAAmB,IAAAM,MAAA,CAAAY,WAAW,EAAC;IAAA;IAAApB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACnC,IAAI;MACF,MAAMoC,QAAA;MAAA;MAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAW,MAAM6B,UAAA,CAAAC,SAAS,CAACO,GAAG,CAAc;MAAA;MAAAvC,cAAA,GAAAE,CAAA;MAClD,OAAOoC,QAAA;IACT,EAAE,OAAOtB,KAAA,EAAO;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACdsC,OAAA,CAAQxB,KAAK,CAAC,iCAAiCA,KAAA;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MAC/C,OAAO;IACT;EACF,GAAG,EAAE;EAEL;;;EAGA,MAAMuC,KAAA;EAAA;EAAA,CAAAzC,cAAA,GAAAE,CAAA,QAAQ,IAAAM,MAAA,CAAAY,WAAW,EAAC,MAAOsB,WAAA;IAAA;IAAA1C,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC/B,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFa,YAAA,CAAa;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACbe,QAAA,CAAS;MAET,MAAM0B,QAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAW,MAAM6B,UAAA,CAAAC,SAAS,CAACY,IAAI,CAAe,eAAeF,WAAA;MAEnE;MAAA;MAAA1C,cAAA,GAAAE,CAAA;MACAuB,WAAA,CAAYkB,QAAA,CAASE,MAAM,CAACC,YAAY,EAAEH,QAAA,CAASE,MAAM,CAACE,aAAa;MAEvE;MACA,MAAMC,WAAA;MAAA;MAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAc,MAAMmC,gBAAA;MAAA;MAAArC,cAAA,GAAAE,CAAA;MAC1B,IAAI8C,WAAA,EAAa;QAAA;QAAAhD,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAE,CAAA;QACfU,OAAA,CAAQoC,WAAA;MACV,OAAO;QAAA;QAAAhD,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAE,CAAA;QACL,MAAM,IAAI+C,KAAA,CAAM;MAClB;IACF,EAAE,OAAOjC,KAAA,EAAY;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACnBe,QAAA;MAAS;MAAA,CAAAjB,cAAA,GAAAwB,CAAA,WAAAR,KAAA,CAAMkC,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAAwB,CAAA,WAAI;MAAA;MAAAxB,cAAA,GAAAE,CAAA;MAC1BgC,WAAA;MAAA;MAAAlC,cAAA,GAAAE,CAAA;MACA,MAAMc,KAAA;IACR,UAAU;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACRa,YAAA,CAAa;IACf;EACF,GAAG,CAACU,WAAA,EAAaS,WAAA,EAAaG,gBAAA,CAAiB;EAE/C;;;EAGA,MAAMc,eAAA;EAAA;EAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAkB,IAAAM,MAAA,CAAAY,WAAW,EAAC,MAAOgC,QAAA;IAAA;IAAApD,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACzC,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFa,YAAA,CAAa;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACbe,QAAA,CAAS;MAET,MAAM0B,QAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAW,MAAM6B,UAAA,CAAAC,SAAS,CAACY,IAAI,CAAe,sBAAsBQ,QAAA;MAE1E;MAAA;MAAApD,cAAA,GAAAE,CAAA;MACAuB,WAAA,CAAYkB,QAAA,CAASE,MAAM,CAACC,YAAY,EAAEH,QAAA,CAASE,MAAM,CAACE,aAAa;MAEvE;MACA,MAAMC,WAAA;MAAA;MAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAc,MAAMmC,gBAAA;MAAA;MAAArC,cAAA,GAAAE,CAAA;MAC1B,IAAI8C,WAAA,EAAa;QAAA;QAAAhD,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAE,CAAA;QACfU,OAAA,CAAQoC,WAAA;MACV,OAAO;QAAA;QAAAhD,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAE,CAAA;QACL,MAAM,IAAI+C,KAAA,CAAM;MAClB;IACF,EAAE,OAAOjC,KAAA,EAAY;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACnBe,QAAA;MAAS;MAAA,CAAAjB,cAAA,GAAAwB,CAAA,WAAAR,KAAA,CAAMkC,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAAwB,CAAA,WAAI;MAAA;MAAAxB,cAAA,GAAAE,CAAA;MAC1BgC,WAAA;MAAA;MAAAlC,cAAA,GAAAE,CAAA;MACA,MAAMc,KAAA;IACR,UAAU;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACRa,YAAA,CAAa;IACf;EACF,GAAG,CAACU,WAAA,EAAaS,WAAA,EAAaG,gBAAA,CAAiB;EAE/C;;;EAGA,MAAMV,YAAA;EAAA;EAAA,CAAA3B,cAAA,GAAAE,CAAA,QAAe,IAAAM,MAAA,CAAAY,WAAW,EAAC;IAAA;IAAApB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC/B,IAAI;MACF,MAAMyB,YAAA;MAAA;MAAA,CAAA3B,cAAA,GAAAE,CAAA,QAAe2B,YAAA,CAAawB,OAAO,CAAC;MAAA;MAAArD,cAAA,GAAAE,CAAA;MAC1C,IAAI,CAACyB,YAAA,EAAc;QAAA;QAAA3B,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAE,CAAA;QACjB,MAAM,IAAI+C,KAAA,CAAM;MAClB;MAAA;MAAA;QAAAjD,cAAA,GAAAwB,CAAA;MAAA;MAEA,MAAMmB,QAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAW,MAAM6B,UAAA,CAAAC,SAAS,CAACY,IAAI,CAAe,iBAAiB;QACnEG,aAAA,EAAepB;MACjB;MAEA;MAAA;MAAA3B,cAAA,GAAAE,CAAA;MACAuB,WAAA,CAAYkB,QAAA,CAASE,MAAM,CAACC,YAAY,EAAEH,QAAA,CAASE,MAAM,CAACE,aAAa;MAEvE;MACA,MAAMC,WAAA;MAAA;MAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAc,MAAMmC,gBAAA;MAAA;MAAArC,cAAA,GAAAE,CAAA;MAC1B,IAAI8C,WAAA,EAAa;QAAA;QAAAhD,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAE,CAAA;QACfU,OAAA,CAAQoC,WAAA;MACV;MAAA;MAAA;QAAAhD,cAAA,GAAAwB,CAAA;MAAA;IACF,EAAE,OAAOR,KAAA,EAAY;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACnBsC,OAAA,CAAQxB,KAAK,CAAC,yBAAyBA,KAAA;MACvC;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACA,MAAMoD,MAAA;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACN,MAAMc,KAAA;IACR;EACF,GAAG,CAACS,WAAA,EAAaY,gBAAA,CAAiB;EAElC;;;EAGA,MAAMiB,MAAA;EAAA;EAAA,CAAAtD,cAAA,GAAAE,CAAA,SAAS,IAAAM,MAAA,CAAAY,WAAW,EAAC;IAAA;IAAApB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACzB,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFa,YAAA,CAAa;MAEb;MAAA;MAAAf,cAAA,GAAAE,CAAA;MACA,IAAI;QAAA;QAAAF,cAAA,GAAAE,CAAA;QACF,MAAM6B,UAAA,CAAAC,SAAS,CAACY,IAAI,CAAC;MACvB,EAAE,OAAO5B,KAAA,EAAO;QAAA;QAAAhB,cAAA,GAAAE,CAAA;QACd;QACAsC,OAAA,CAAQxB,KAAK,CAAC,yBAAyBA,KAAA;MACzC;MAEA;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACAgC,WAAA;MAAA;MAAAlC,cAAA,GAAAE,CAAA;MACAU,OAAA,CAAQ;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACRe,QAAA,CAAS;IACX,EAAE,OAAOD,KAAA,EAAY;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MACnBsC,OAAA,CAAQxB,KAAK,CAAC,iBAAiBA,KAAA;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MAC/Be,QAAA;MAAS;MAAA,CAAAjB,cAAA,GAAAwB,CAAA,WAAAR,KAAA,CAAMkC,OAAO;MAAA;MAAA,CAAAlD,cAAA,GAAAwB,CAAA,WAAI;IAC5B,UAAU;MAAA;MAAAxB,cAAA,GAAAE,CAAA;MACRa,YAAA,CAAa;IACf;EACF,GAAG,CAACmB,WAAA,CAAY;EAEhB;;;EAAA;EAAAlC,cAAA,GAAAE,CAAA;EAGA,IAAAM,MAAA,CAAA+C,SAAS,EAAC;IAAA;IAAAvD,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACR,MAAMsD,cAAA,GAAiB,MAAAA,CAAA;MAAA;MAAAxD,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACrB,IAAI;QAAA;QAAAF,cAAA,GAAAE,CAAA;QACFa,YAAA,CAAa;QAEb,MAAM0C,KAAA;QAAA;QAAA,CAAAzD,cAAA,GAAAE,CAAA,SAAQ2B,YAAA,CAAawB,OAAO,CAAC;QAAA;QAAArD,cAAA,GAAAE,CAAA;QACnC,IAAI,CAACuD,KAAA,EAAO;UAAA;UAAAzD,cAAA,GAAAwB,CAAA;UAAAxB,cAAA,GAAAE,CAAA;UACVa,YAAA,CAAa;UAAA;UAAAf,cAAA,GAAAE,CAAA;UACb;QACF;QAAA;QAAA;UAAAF,cAAA,GAAAwB,CAAA;QAAA;QAEA;QAAAxB,cAAA,GAAAE,CAAA;QACA6B,UAAA,CAAAC,SAAS,CAACC,YAAY,CAACwB,KAAA;QAEvB;QACA,MAAMT,WAAA;QAAA;QAAA,CAAAhD,cAAA,GAAAE,CAAA,SAAc,MAAMmC,gBAAA;QAAA;QAAArC,cAAA,GAAAE,CAAA;QAC1B,IAAI8C,WAAA,EAAa;UAAA;UAAAhD,cAAA,GAAAwB,CAAA;UAAAxB,cAAA,GAAAE,CAAA;UACfU,OAAA,CAAQoC,WAAA;QACV,OAAO;UAAA;UAAAhD,cAAA,GAAAwB,CAAA;UAAAxB,cAAA,GAAAE,CAAA;UACL;UACAgC,WAAA;QACF;MACF,EAAE,OAAOlB,KAAA,EAAO;QAAA;QAAAhB,cAAA,GAAAE,CAAA;QACdsC,OAAA,CAAQxB,KAAK,CAAC,+BAA+BA,KAAA;QAAA;QAAAhB,cAAA,GAAAE,CAAA;QAC7CgC,WAAA;MACF,UAAU;QAAA;QAAAlC,cAAA,GAAAE,CAAA;QACRa,YAAA,CAAa;MACf;IACF;IAEA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAI,OAAO0B,MAAA,KAAW,aAAa;MAAA;MAAA5B,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAE,CAAA;MACjCsD,cAAA;IACF;IAAA;IAAA;MAAAxD,cAAA,GAAAwB,CAAA;IAAA;EACF,GAAG,CAACa,gBAAA,EAAkBH,WAAA,CAAY;EAElC;;;EAAA;EAAAlC,cAAA,GAAAE,CAAA;EAGA,IAAAM,MAAA,CAAA+C,SAAS,EAAC;IAAA;IAAAvD,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACR,IAAI,CAACgB,eAAA,EAAiB;MAAA;MAAAlB,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAwB,CAAA;IAAA;IAEtB;IACA,MAAMkC,eAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,SAAkByD,WAAA,CAAY;MAAA;MAAA3D,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAClCyB,YAAA,GAAeiC,KAAK,CAAC5C,KAAA;QAAA;QAAAhB,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAE,CAAA;QACnBsC,OAAA,CAAQxB,KAAK,CAAC,mCAAmCA,KAAA;MACnD;IACF,GAAG,KAAK,KAAK,QAAO;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAEpB,OAAO,MAAM;MAAA;MAAAF,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAA2D,aAAA,CAAcH,eAAA;IAAA;EAC7B,GAAG,CAACxC,eAAA,EAAiBS,YAAA,CAAa;EAElC,MAAMmC,YAAA;EAAA;EAAA,CAAA9D,cAAA,GAAAE,CAAA,SAAgC;IACpCS,IAAA;IACAO,eAAA;IACAJ,SAAA;IACAE,KAAA;IACAyB,KAAA;IACAU,eAAA;IACAG,MAAA;IACA3B,YAAA;IACAR,UAAA;IACAE;EACF;EAAA;EAAArB,cAAA,GAAAE,CAAA;EAEA,oBACE,IAAA6D,WAAA,CAAAC,GAAA,EAACzD,WAAA,CAAY0D,QAAQ;IAACC,KAAA,EAAOJ,YAAA;cAC1BpD;;AAGP;AAKO,SAASL,QAAA;EAAA;EAAAL,cAAA,GAAAI,CAAA;EACd,MAAM+D,OAAA;EAAA;EAAA,CAAAnE,cAAA,GAAAE,CAAA,SAAU,IAAAM,MAAA,CAAA4D,UAAU,EAAC7D,WAAA;EAAA;EAAAP,cAAA,GAAAE,CAAA;EAC3B,IAAI,CAACiE,OAAA,EAAS;IAAA;IAAAnE,cAAA,GAAAwB,CAAA;IAAAxB,cAAA,GAAAE,CAAA;IACZ,MAAM,IAAI+C,KAAA,CAAM;EAClB;EAAA;EAAA;IAAAjD,cAAA,GAAAwB,CAAA;EAAA;EAAAxB,cAAA,GAAAE,CAAA;EACA,OAAOiE,OAAA;AACT;AAKO,SAAS7D,eAAA;EAAA;EAAAN,cAAA,GAAAI,CAAA;EACd,MAAMiE,IAAA;EAAA;EAAA,CAAArE,cAAA,GAAAE,CAAA,SAAOG,OAAA;EAAA;EAAAL,cAAA,GAAAE,CAAA;EAEb,IAAAM,MAAA,CAAA+C,SAAS,EAAC;IAAA;IAAAvD,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAwB,CAAA,YAAC6C,IAAA,CAAKvD,SAAS;IAAA;IAAA,CAAAd,cAAA,GAAAwB,CAAA,WAAI,CAAC6C,IAAA,CAAKnD,eAAe,GAAE;MAAA;MAAAlB,cAAA,GAAAwB,CAAA;MAAAxB,cAAA,GAAAE,CAAA;MAC5C;MACA,IAAI,OAAO0B,MAAA,KAAW,aAAa;QAAA;QAAA5B,cAAA,GAAAwB,CAAA;QAAAxB,cAAA,GAAAE,CAAA;QACjC0B,MAAA,CAAO0C,QAAQ,CAACC,IAAI,GAAG;MACzB;MAAA;MAAA;QAAAvE,cAAA,GAAAwB,CAAA;MAAA;IACF;IAAA;IAAA;MAAAxB,cAAA,GAAAwB,CAAA;IAAA;EACF,GAAG,CAAC6C,IAAA,CAAKvD,SAAS,EAAEuD,IAAA,CAAKnD,eAAe,CAAC;EAAA;EAAAlB,cAAA,GAAAE,CAAA;EAEzC,OAAOmE,IAAA;AACT","ignoreList":[]}