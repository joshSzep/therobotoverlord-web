{"version":3,"names":["cov_1nfgrapy0e","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/types/components.ts"],"sourcesContent":["/**\n * Component prop types for The Robot Overlord\n * Common interfaces for component props and shared component types\n */\n\nimport React from 'react';\nimport { User, UserRole } from './user';\nimport { Post, PostType, PostStatus } from './posts';\nimport { Topic, TopicCategory, TopicFilters } from './topics';\nimport { LeaderboardEntry, Competition, Achievement } from './leaderboard';\nimport { Badge, UserBadge } from './badges';\nimport { ModerationAction, Report } from './moderation';\n\n// Base component props\nexport interface BaseComponentProps {\n  className?: string;\n  children?: React.ReactNode;\n  id?: string;\n  'data-testid'?: string;\n}\n\n// Loading and error states\nexport interface LoadingProps {\n  isLoading?: boolean;\n  loadingText?: string;\n  loadingComponent?: React.ReactNode;\n}\n\nexport interface ErrorProps {\n  error?: string | null;\n  errorComponent?: React.ReactNode;\n  onRetry?: () => void;\n}\n\nexport interface AsyncComponentProps extends LoadingProps, ErrorProps {\n  isEmpty?: boolean;\n  emptyComponent?: React.ReactNode;\n  emptyText?: string;\n}\n\n// Layout component props\nexport interface LayoutProps extends BaseComponentProps {\n  showHeader?: boolean;\n  showSidebar?: boolean;\n  showFooter?: boolean;\n  sidebarOpen?: boolean;\n  onSidebarToggle?: () => void;\n}\n\nexport interface HeaderProps extends BaseComponentProps {\n  user?: User | null;\n  onLogout?: () => void;\n  showMobileMenu?: boolean;\n  onMobileMenuToggle?: () => void;\n}\n\nexport interface SidebarProps extends BaseComponentProps {\n  isOpen?: boolean;\n  onClose?: () => void;\n  user?: User | null;\n  currentPath?: string;\n}\n\nexport interface BreadcrumbProps extends BaseComponentProps {\n  items?: Array<{\n    label: string;\n    href?: string;\n    isActive?: boolean;\n  }>;\n  separator?: React.ReactNode;\n}\n\n// Form component props\nexport interface FormProps extends BaseComponentProps {\n  onSubmit: (data: any) => void | Promise<void>;\n  isSubmitting?: boolean;\n  submitText?: string;\n  cancelText?: string;\n  onCancel?: () => void;\n  showCancel?: boolean;\n  disabled?: boolean;\n}\n\nexport interface InputProps extends BaseComponentProps {\n  label?: string;\n  placeholder?: string;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n  onBlur?: () => void;\n  onFocus?: () => void;\n  error?: string;\n  disabled?: boolean;\n  required?: boolean;\n  autoComplete?: string;\n  maxLength?: number;\n  minLength?: number;\n}\n\nexport interface TextareaProps extends Omit<InputProps, 'type'> {\n  rows?: number;\n  cols?: number;\n  resize?: 'none' | 'vertical' | 'horizontal' | 'both';\n}\n\nexport interface SelectProps extends BaseComponentProps {\n  label?: string;\n  placeholder?: string;\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n  options: Array<{\n    value: string;\n    label: string;\n    disabled?: boolean;\n  }>;\n  error?: string;\n  disabled?: boolean;\n  required?: boolean;\n  multiple?: boolean;\n}\n\nexport interface CheckboxProps extends BaseComponentProps {\n  label?: string;\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?: (checked: boolean) => void;\n  disabled?: boolean;\n  required?: boolean;\n  indeterminate?: boolean;\n}\n\nexport interface RadioProps extends BaseComponentProps {\n  label?: string;\n  name: string;\n  value: string;\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?: (value: string) => void;\n  disabled?: boolean;\n  required?: boolean;\n}\n\n// Button component props\nexport interface ButtonProps extends BaseComponentProps {\n  variant?: 'primary' | 'secondary' | 'ghost' | 'danger' | 'warning' | 'success';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  disabled?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  type?: 'button' | 'submit' | 'reset';\n  fullWidth?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  href?: string;\n  target?: '_blank' | '_self' | '_parent' | '_top';\n}\n\n// Modal and dialog props\nexport interface ModalProps extends BaseComponentProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title?: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  closeOnOverlayClick?: boolean;\n  closeOnEscape?: boolean;\n  showCloseButton?: boolean;\n  preventScroll?: boolean;\n}\n\nexport interface DialogProps extends ModalProps {\n  type?: 'info' | 'warning' | 'error' | 'success' | 'confirm';\n  message?: string;\n  confirmText?: string;\n  cancelText?: string;\n  onConfirm?: () => void | Promise<void>;\n  onCancel?: () => void;\n  isConfirming?: boolean;\n}\n\n// Notification props\nexport interface NotificationProps extends BaseComponentProps {\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  onClose?: () => void;\n  actions?: Array<{\n    label: string;\n    action: () => void;\n  }>;\n}\n\n// User-related component props\nexport interface UserCardProps extends BaseComponentProps {\n  user: User;\n  showRole?: boolean;\n  showLoyaltyScore?: boolean;\n  showBadges?: boolean;\n  showStats?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  onClick?: () => void;\n  actions?: React.ReactNode;\n}\n\nexport interface UserAvatarProps extends BaseComponentProps {\n  user: User;\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  showOnlineStatus?: boolean;\n  onClick?: () => void;\n  fallbackIcon?: React.ReactNode;\n}\n\nexport interface UserListProps extends BaseComponentProps, AsyncComponentProps {\n  users: User[];\n  onUserClick?: (user: User) => void;\n  showPagination?: boolean;\n  currentPage?: number;\n  totalPages?: number;\n  onPageChange?: (page: number) => void;\n  filters?: any;\n  onFiltersChange?: (filters: any) => void;\n}\n\n// Post-related component props\nexport interface PostCardProps extends BaseComponentProps {\n  post: Post;\n  showTopic?: boolean;\n  showAuthor?: boolean;\n  showStats?: boolean;\n  showActions?: boolean;\n  compact?: boolean;\n  onClick?: () => void;\n  onVote?: (vote: 'up' | 'down' | null) => void;\n  onReply?: () => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n}\n\nexport interface PostListProps extends BaseComponentProps, AsyncComponentProps {\n  posts: Post[];\n  onPostClick?: (post: Post) => void;\n  onVote?: (postId: string, vote: 'up' | 'down' | null) => void;\n  showPagination?: boolean;\n  currentPage?: number;\n  totalPages?: number;\n  onPageChange?: (page: number) => void;\n  filters?: PostFilters;\n  onFiltersChange?: (filters: PostFilters) => void;\n}\n\nexport interface PostFormProps extends FormProps {\n  initialData?: Partial<Post>;\n  topicId?: string;\n  parentId?: string;\n  mode?: 'create' | 'edit' | 'reply';\n  allowedTags?: string[];\n  maxLength?: number;\n  showPreview?: boolean;\n}\n\n// Topic-related component props\nexport interface TopicCardProps {\n  topic: Topic;\n  showCategory?: boolean;\n  showStats?: boolean;\n  showDescription?: boolean;\n  compact?: boolean;\n  onClick?: () => void;\n  onSubscribe?: () => void;\n  className?: string;\n}\n\nexport interface TopicListProps {\n  topics: Topic[];\n  onTopicClick?: (topic: Topic) => void;\n  onSubscribe?: (topicId: string) => void;\n  showPagination?: boolean;\n  currentPage?: number;\n  totalPages?: number;\n  onPageChange?: (page: number) => void;\n  filters?: TopicFilters;\n  onFiltersChange?: (filters: TopicFilters) => void;\n  isLoading?: boolean;\n  error?: string | null;\n  isEmpty?: boolean;\n  emptyText?: string;\n  className?: string;\n}\n\nexport interface TopicFiltersProps {\n  filters: TopicFilters;\n  onFiltersChange: (filters: TopicFilters) => void;\n  categories?: TopicCategory[];\n  showAdvanced?: boolean;\n  onToggleAdvanced?: () => void;\n  className?: string;\n}\n\nexport interface TopicFormProps extends FormProps {\n  initialData?: Partial<Topic>;\n  categories: Array<{ id: string; name: string; color: string }>;\n  mode?: 'create' | 'edit';\n  allowedTags?: string[];\n}\n\n// Leaderboard component props\nexport interface LeaderboardProps extends BaseComponentProps, AsyncComponentProps {\n  entries: LeaderboardEntry[];\n  currentUser?: User;\n  category?: string;\n  timeRange?: string;\n  showRankChange?: boolean;\n  showBadges?: boolean;\n  onUserClick?: (user: User) => void;\n  onCategoryChange?: (category: string) => void;\n  onTimeRangeChange?: (timeRange: string) => void;\n}\n\nexport interface CompetitionCardProps extends BaseComponentProps {\n  competition: Competition;\n  showParticipants?: boolean;\n  showPrizes?: boolean;\n  compact?: boolean;\n  onClick?: () => void;\n  onJoin?: () => void;\n  onLeave?: () => void;\n}\n\nexport interface AchievementCardProps extends BaseComponentProps {\n  achievement: Achievement;\n  userProgress?: {\n    current: number;\n    target: number;\n    percentage: number;\n  };\n  isUnlocked?: boolean;\n  showProgress?: boolean;\n  onClick?: () => void;\n}\n\n// Badge component props\nexport interface BadgeProps extends BaseComponentProps {\n  badge: Badge;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  showTooltip?: boolean;\n  onClick?: () => void;\n}\n\nexport interface BadgeListProps extends BaseComponentProps {\n  badges: UserBadge[];\n  maxDisplay?: number;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  showTooltips?: boolean;\n  onBadgeClick?: (badge: Badge) => void;\n}\n\n// Moderation component props\nexport interface ModerationQueueProps extends BaseComponentProps, AsyncComponentProps {\n  items: any[];\n  onAction?: (itemId: string, action: ModerationAction) => void;\n  onAssign?: (itemId: string, moderatorId: string) => void;\n  filters?: any;\n  onFiltersChange?: (filters: any) => void;\n}\n\nexport interface ReportCardProps extends BaseComponentProps {\n  report: Report;\n  showTarget?: boolean;\n  showReporter?: boolean;\n  compact?: boolean;\n  onClick?: () => void;\n  onResolve?: (action: string) => void;\n}\n\n// Search component props\nexport interface SearchProps extends BaseComponentProps {\n  placeholder?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  onSearch?: (query: string) => void;\n  onClear?: () => void;\n  suggestions?: string[];\n  showSuggestions?: boolean;\n  loading?: boolean;\n  debounceMs?: number;\n}\n\nexport interface SearchResultsProps extends BaseComponentProps, AsyncComponentProps {\n  query: string;\n  results: any[];\n  type?: 'posts' | 'topics' | 'users' | 'all';\n  onTypeChange?: (type: string) => void;\n  onResultClick?: (result: any) => void;\n  showFilters?: boolean;\n  filters?: any;\n  onFiltersChange?: (filters: any) => void;\n}\n\n// Pagination component props\nexport interface PaginationProps extends BaseComponentProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n  showFirstLast?: boolean;\n  showPrevNext?: boolean;\n  maxVisiblePages?: number;\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n}\n\n// Filter component props\nexport interface FilterProps extends BaseComponentProps {\n  filters: Record<string, any>;\n  onChange: (filters: Record<string, any>) => void;\n  onReset?: () => void;\n  options: Record<string, {\n    type: 'select' | 'multiselect' | 'range' | 'date' | 'boolean';\n    label: string;\n    options?: Array<{ value: string; label: string }>;\n    min?: number;\n    max?: number;\n    step?: number;\n  }>;\n  showReset?: boolean;\n  collapsible?: boolean;\n  defaultExpanded?: boolean;\n}\n\n// Data table props\nexport interface DataTableProps<T> extends BaseComponentProps, AsyncComponentProps {\n  data: T[];\n  columns: Array<{\n    key: string;\n    label: string;\n    sortable?: boolean;\n    width?: string;\n    render?: (value: any, item: T) => React.ReactNode;\n  }>;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n  onSort?: (key: string, order: 'asc' | 'desc') => void;\n  onRowClick?: (item: T) => void;\n  selectedRows?: string[];\n  onRowSelect?: (selectedIds: string[]) => void;\n  actions?: Array<{\n    label: string;\n    icon?: React.ReactNode;\n    onClick: (item: T) => void;\n    disabled?: (item: T) => boolean;\n  }>;\n  bulkActions?: Array<{\n    label: string;\n    icon?: React.ReactNode;\n    onClick: (selectedItems: T[]) => void;\n  }>;\n  showPagination?: boolean;\n  currentPage?: number;\n  totalPages?: number;\n  onPageChange?: (page: number) => void;\n}\n"],"mappings":"AAAA;;;GAGC;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,OAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,KAAA;MAAAC,QAAA;IAAA;IAAAC,eAAA;IAAArB,IAAA;EAAA;EAAA,IAAAsB,QAAA,GAAArB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAmB,QAAA,CAAAvB,IAAA,KAAAuB,QAAA,CAAAvB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAsB,QAAA,CAAAvB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAmB,cAAA,GAAAD,QAAA,CAAAvB,IAAA;EAAA","ignoreList":[]}