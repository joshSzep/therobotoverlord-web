{"version":3,"names":["cov_1c8yu4jbta","actualCoverage","s","useModerationRealTimeUpdates","f","usePostRealTimeUpdates","useRealTimeUpdates","connected","subscribe","unsubscribe","subscribeToChannel","_WebSocketProvider","useWebSocketContext","addNotification","_appStore","useAppStore","handlePostUpdate","_react","useCallback","event","type","b","title","message","post","slice","author_id","reason","handleTopicUpdate","topic","handleModerationEvent","data","action","handleNotification","notificationType","priority","duration","handleUserActivity","console","log","useEffect","isRealTimeEnabled","postId","handlePostSpecificUpdate","id","handleModerationUpdate"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/hooks/useRealTimeUpdates.ts"],"sourcesContent":["/**\n * Real-time updates hook for The Robot Overlord\n * Handles WebSocket events for posts, moderation, and notifications\n */\n\n'use client';\n\nimport { useEffect, useCallback } from 'react';\nimport { useWebSocketContext } from '@/components/WebSocketProvider';\nimport { useAppStore } from '@/stores/appStore';\nimport { User } from '@/types/user';\n\nexport interface RealTimeEvent {\n  type: string;\n  data: any;\n  timestamp: string;\n  userId?: string;\n}\n\n// Simplified post interface for real-time updates\nexport interface PostData {\n  id: string;\n  title?: string;\n  content: string;\n  author_id: string;\n  status: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Simplified topic interface for real-time updates\nexport interface TopicData {\n  id: string;\n  title: string;\n  description?: string;\n  author_id: string;\n  status: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface PostUpdateEvent {\n  type: 'post_created' | 'post_updated' | 'post_deleted' | 'post_approved' | 'post_rejected';\n  post: PostData;\n  moderatorId?: string;\n  reason?: string;\n}\n\nexport interface TopicUpdateEvent {\n  type: 'topic_created' | 'topic_updated' | 'topic_deleted';\n  topic: TopicData;\n}\n\nexport interface ModerationEvent {\n  type: 'moderation_queue_updated' | 'post_flagged' | 'user_sanctioned';\n  data: {\n    postId?: string;\n    userId?: string;\n    action?: string;\n    reason?: string;\n    moderatorId?: string;\n  };\n}\n\nexport interface NotificationEvent {\n  type: 'notification_created' | 'badge_earned' | 'rank_changed';\n  data: {\n    id: string;\n    title: string;\n    message: string;\n    category: 'system' | 'moderation' | 'achievement' | 'social';\n    priority: 'low' | 'medium' | 'high';\n    actionUrl?: string;\n    metadata?: Record<string, any>;\n  };\n}\n\nexport interface UserActivityEvent {\n  type: 'user_online' | 'user_offline' | 'user_typing';\n  userId: string;\n  data?: {\n    topicId?: string;\n    lastSeen?: string;\n  };\n}\n\nexport function useRealTimeUpdates() {\n  const { connected, subscribe, unsubscribe, subscribeToChannel } = useWebSocketContext();\n  const { addNotification } = useAppStore();\n\n  // Handle post updates\n  const handlePostUpdate = useCallback((event: PostUpdateEvent) => {\n    switch (event.type) {\n      case 'post_created':\n        addNotification({\n          type: 'info',\n          title: 'New Post',\n          message: `New post created: \"${event.post.title?.slice(0, 50)}...\"`,\n        });\n        break;\n\n      case 'post_approved':\n        if (event.post.author_id === 'current-user') { // Replace with actual user ID check\n          addNotification({\n            type: 'success',\n            title: 'Post Approved! 🎉',\n            message: `Your post \"${event.post.title?.slice(0, 50)}...\" has been approved by the Robot Overlord.`,\n          });\n        }\n        // Post update would be handled by individual components\n        break;\n\n      case 'post_rejected':\n        if (event.post.author_id === 'current-user') {\n          addNotification({\n            type: 'error',\n            title: 'Post Rejected',\n            message: `Your post was rejected. Reason: ${event.reason || 'No reason provided'}`,\n          });\n        }\n        // Post update would be handled by individual components\n        break;\n\n      case 'post_updated':\n        // Post update would be handled by individual components\n        break;\n\n      case 'post_deleted':\n        // Handle post deletion\n        break;\n    }\n  }, [addNotification]);\n\n  // Handle topic updates\n  const handleTopicUpdate = useCallback((event: TopicUpdateEvent) => {\n    switch (event.type) {\n      case 'topic_created':\n        addNotification({\n          type: 'info',\n          title: 'New Topic',\n          message: `New topic created: \"${event.topic.title}\"`,\n        });\n        break;\n\n      case 'topic_updated':\n        // Topic update would be handled by individual components\n        break;\n\n      case 'topic_deleted':\n        // Handle topic deletion\n        break;\n    }\n  }, [addNotification]);\n\n  // Handle moderation events\n  const handleModerationEvent = useCallback((event: ModerationEvent) => {\n    switch (event.type) {\n      case 'moderation_queue_updated':\n        addNotification({\n          type: 'warning',\n          title: 'Moderation Queue Updated',\n          message: 'New items require moderation attention.',\n        });\n        break;\n\n      case 'post_flagged':\n        addNotification({\n          type: 'warning',\n          title: 'Post Flagged',\n          message: `A post has been flagged for review: ${event.data.reason}`,\n        });\n        break;\n\n      case 'user_sanctioned':\n        addNotification({\n          type: 'error',\n          title: 'User Sanctioned',\n          message: `User action taken: ${event.data.action}`,\n        });\n        break;\n    }\n  }, [addNotification]);\n\n  // Handle notifications\n  const handleNotification = useCallback((event: NotificationEvent) => {\n    const notificationType = event.data.priority === 'high' ? 'error' : \n                           event.data.priority === 'medium' ? 'warning' : 'info';\n\n    switch (event.type) {\n      case 'badge_earned':\n        addNotification({\n          type: 'success',\n          title: '🏆 Badge Earned!',\n          message: event.data.message,\n          duration: 8000, // Longer duration for achievements\n        });\n        break;\n\n      case 'rank_changed':\n        addNotification({\n          type: 'info',\n          title: '📈 Rank Updated',\n          message: event.data.message,\n        });\n        break;\n\n      case 'notification_created':\n        addNotification({\n          type: notificationType,\n          title: event.data.title,\n          message: event.data.message,\n        });\n        break;\n    }\n  }, [addNotification]);\n\n  // Handle user activity\n  const handleUserActivity = useCallback((event: UserActivityEvent) => {\n    // This could be used for showing online status, typing indicators, etc.\n    // For now, we'll just log it\n    console.log('User activity:', event);\n  }, []);\n\n  // Subscribe to real-time events\n  useEffect(() => {\n    if (!connected) return;\n\n    // Subscribe to various event types\n    subscribe('post_update', handlePostUpdate);\n    subscribe('topic_update', handleTopicUpdate);\n    subscribe('moderation_event', handleModerationEvent);\n    subscribe('notification', handleNotification);\n    subscribe('user_activity', handleUserActivity);\n\n    // Subscribe to relevant channels\n    subscribeToChannel('posts');\n    subscribeToChannel('topics');\n    subscribeToChannel('moderation');\n    subscribeToChannel('notifications');\n    subscribeToChannel('user_activity');\n\n    return () => {\n      unsubscribe('post_update', handlePostUpdate);\n      unsubscribe('topic_update', handleTopicUpdate);\n      unsubscribe('moderation_event', handleModerationEvent);\n      unsubscribe('notification', handleNotification);\n      unsubscribe('user_activity', handleUserActivity);\n    };\n  }, [\n    connected,\n    subscribe,\n    unsubscribe,\n    subscribeToChannel,\n    handlePostUpdate,\n    handleTopicUpdate,\n    handleModerationEvent,\n    handleNotification,\n    handleUserActivity,\n  ]);\n\n  return {\n    connected,\n    isRealTimeEnabled: connected,\n  };\n}\n\n// Hook for specific post updates\nexport function usePostRealTimeUpdates(postId?: string) {\n  const { connected, subscribe, unsubscribe } = useWebSocketContext();\n  const { addNotification } = useAppStore();\n\n  useEffect(() => {\n    if (!connected || !postId) return;\n\n    const handlePostSpecificUpdate = (event: PostUpdateEvent) => {\n      if (event.post.id === postId) {\n        // Notify about post updates for the specific post\n        addNotification({\n          type: 'info',\n          title: 'Post Updated',\n          message: 'This post has been updated.',\n        });\n      }\n    };\n\n    subscribe('post_update', handlePostSpecificUpdate);\n\n    return () => {\n      unsubscribe('post_update', handlePostSpecificUpdate);\n    };\n  }, [connected, postId, subscribe, unsubscribe, addNotification]);\n\n  return {\n    connected,\n  };\n}\n\n// Hook for moderation queue real-time updates\nexport function useModerationRealTimeUpdates() {\n  const { connected, subscribe, unsubscribe, subscribeToChannel } = useWebSocketContext();\n  const { addNotification } = useAppStore();\n\n  useEffect(() => {\n    if (!connected) return;\n\n    const handleModerationUpdate = (event: ModerationEvent) => {\n      if (event.type === 'moderation_queue_updated') {\n        addNotification({\n          type: 'warning',\n          title: 'Moderation Required',\n          message: 'New items in moderation queue require attention.',\n        });\n      }\n    };\n\n    subscribe('moderation_event', handleModerationUpdate);\n    subscribeToChannel('moderation');\n\n    return () => {\n      unsubscribe('moderation_event', handleModerationUpdate);\n    };\n  }, [connected, subscribe, unsubscribe, subscribeToChannel, addNotification]);\n\n  return {\n    connected,\n  };\n}\n"],"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","ignoreList":[]}