5c633f8851306dfd42f4fa5fb7859481
"use strict";

/* istanbul ignore next */
function cov_m2zud9voe() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/monitoring/performance/route.ts";
  var hash = "ceb7dd33a5ccbb182594ff9f004809f9eb6383c3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/monitoring/performance/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "5": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 41
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "7": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 21,
          column: 15
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 28,
          column: 11
        }
      },
      "9": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 35,
          column: 64
        }
      },
      "10": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "11": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 71
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      },
      "13": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 67
        }
      },
      "14": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "15": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 25
        }
      },
      "16": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "17": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 77
        }
      },
      "19": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "20": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 77
        }
      },
      "21": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "22": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 73
        }
      },
      "23": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "24": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 93
        }
      },
      "25": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 73,
          column: 22
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "checkPerformanceBudgets",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 32
          }
        },
        loc: {
          start: {
            line: 52,
            column: 42
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 52
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 27
          }
        }, {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 16,
            column: 40
          }
        }, {
          start: {
            line: 16,
            column: 44
          },
          end: {
            line: 16,
            column: 57
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "4": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 61,
            column: 19
          }
        }, {
          start: {
            line: 61,
            column: 23
          },
          end: {
            line: 61,
            column: 48
          }
        }],
        line: 61
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 64,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 64,
            column: 19
          }
        }, {
          start: {
            line: 64,
            column: 23
          },
          end: {
            line: 64,
            column: 48
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 67,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 67,
            column: 19
          }
        }, {
          start: {
            line: 67,
            column: 23
          },
          end: {
            line: 67,
            column: 48
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "10": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 70,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 70,
            column: 24
          }
        }, {
          start: {
            line: 70,
            column: 28
          },
          end: {
            line: 70,
            column: 63
          }
        }],
        line: 70
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/monitoring/performance/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\ninterface PerformanceData {\n  timestamp: number\n  url: string\n  userAgent: string\n  metrics: {\n    lcp?: number\n    fid?: number\n    cls?: number\n    fcp?: number\n    ttfb?: number\n    loadTime?: number\n    domContentLoaded?: number\n    memoryUsage?: {\n      used: number\n      total: number\n      limit: number\n    }\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data: PerformanceData = await request.json()\n    \n    // Validate the data\n    if (!data.timestamp || !data.url || !data.metrics) {\n      return NextResponse.json(\n        { error: 'Invalid performance data' },\n        { status: 400 }\n      )\n    }\n    \n    // Log performance data (in production, send to monitoring service)\n    console.log('Performance metrics received:', {\n      url: data.url,\n      timestamp: new Date(data.timestamp).toISOString(),\n      metrics: data.metrics,\n    })\n    \n    // In production, you would:\n    // 1. Store in database for analysis\n    // 2. Send to monitoring service (DataDog, New Relic, etc.)\n    // 3. Check against performance budgets\n    // 4. Alert if thresholds are exceeded\n    \n    // Example: Check performance budgets\n    const violations = checkPerformanceBudgets(data.metrics)\n    if (violations.length > 0) {\n      console.warn('Performance budget violations:', violations)\n      // Send alert to monitoring system\n    }\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error processing performance data:', error)\n    return NextResponse.json(\n      { error: 'Failed to process performance data' },\n      { status: 500 }\n    )\n  }\n}\n\nfunction checkPerformanceBudgets(metrics: PerformanceData['metrics']): string[] {\n  const violations: string[] = []\n  \n  // Performance budgets\n  const budgets = {\n    lcp: 2500, // 2.5s\n    fid: 100, // 100ms\n    cls: 0.1, // 0.1 score\n    loadTime: 3000, // 3s\n  }\n  \n  if (metrics.lcp && metrics.lcp > budgets.lcp) {\n    violations.push(`LCP exceeded: ${metrics.lcp}ms > ${budgets.lcp}ms`)\n  }\n  \n  if (metrics.fid && metrics.fid > budgets.fid) {\n    violations.push(`FID exceeded: ${metrics.fid}ms > ${budgets.fid}ms`)\n  }\n  \n  if (metrics.cls && metrics.cls > budgets.cls) {\n    violations.push(`CLS exceeded: ${metrics.cls} > ${budgets.cls}`)\n  }\n  \n  if (metrics.loadTime && metrics.loadTime > budgets.loadTime) {\n    violations.push(`Load time exceeded: ${metrics.loadTime}ms > ${budgets.loadTime}ms`)\n  }\n  \n  return violations\n}\n"],
      names: ["POST", "request", "data", "json", "timestamp", "url", "metrics", "NextResponse", "error", "status", "console", "log", "Date", "toISOString", "violations", "checkPerformanceBudgets", "length", "warn", "success", "budgets", "lcp", "fid", "cls", "loadTime", "push"],
      mappings: ";;;;+BAsBsBA;;;eAAAA;;;wBAtBoB;AAsBnC,eAAeA,KAAKC,OAAoB;IAC7C,IAAI;QACF,MAAMC,OAAwB,MAAMD,QAAQE,IAAI;QAEhD,oBAAoB;QACpB,IAAI,CAACD,KAAKE,SAAS,IAAI,CAACF,KAAKG,GAAG,IAAI,CAACH,KAAKI,OAAO,EAAE;YACjD,OAAOC,oBAAY,CAACJ,IAAI,CACtB;gBAAEK,OAAO;YAA2B,GACpC;gBAAEC,QAAQ;YAAI;QAElB;QAEA,mEAAmE;QACnEC,QAAQC,GAAG,CAAC,iCAAiC;YAC3CN,KAAKH,KAAKG,GAAG;YACbD,WAAW,IAAIQ,KAAKV,KAAKE,SAAS,EAAES,WAAW;YAC/CP,SAASJ,KAAKI,OAAO;QACvB;QAEA,4BAA4B;QAC5B,oCAAoC;QACpC,2DAA2D;QAC3D,uCAAuC;QACvC,sCAAsC;QAEtC,qCAAqC;QACrC,MAAMQ,aAAaC,wBAAwBb,KAAKI,OAAO;QACvD,IAAIQ,WAAWE,MAAM,GAAG,GAAG;YACzBN,QAAQO,IAAI,CAAC,kCAAkCH;QAC/C,kCAAkC;QACpC;QAEA,OAAOP,oBAAY,CAACJ,IAAI,CAAC;YAAEe,SAAS;QAAK;IAC3C,EAAE,OAAOV,OAAO;QACdE,QAAQF,KAAK,CAAC,sCAAsCA;QACpD,OAAOD,oBAAY,CAACJ,IAAI,CACtB;YAAEK,OAAO;QAAqC,GAC9C;YAAEC,QAAQ;QAAI;IAElB;AACF;AAEA,SAASM,wBAAwBT,OAAmC;IAClE,MAAMQ,aAAuB,EAAE;IAE/B,sBAAsB;IACtB,MAAMK,UAAU;QACdC,KAAK;QACLC,KAAK;QACLC,KAAK;QACLC,UAAU;IACZ;IAEA,IAAIjB,QAAQc,GAAG,IAAId,QAAQc,GAAG,GAAGD,QAAQC,GAAG,EAAE;QAC5CN,WAAWU,IAAI,CAAC,CAAC,cAAc,EAAElB,QAAQc,GAAG,CAAC,KAAK,EAAED,QAAQC,GAAG,CAAC,EAAE,CAAC;IACrE;IAEA,IAAId,QAAQe,GAAG,IAAIf,QAAQe,GAAG,GAAGF,QAAQE,GAAG,EAAE;QAC5CP,WAAWU,IAAI,CAAC,CAAC,cAAc,EAAElB,QAAQe,GAAG,CAAC,KAAK,EAAEF,QAAQE,GAAG,CAAC,EAAE,CAAC;IACrE;IAEA,IAAIf,QAAQgB,GAAG,IAAIhB,QAAQgB,GAAG,GAAGH,QAAQG,GAAG,EAAE;QAC5CR,WAAWU,IAAI,CAAC,CAAC,cAAc,EAAElB,QAAQgB,GAAG,CAAC,GAAG,EAAEH,QAAQG,GAAG,EAAE;IACjE;IAEA,IAAIhB,QAAQiB,QAAQ,IAAIjB,QAAQiB,QAAQ,GAAGJ,QAAQI,QAAQ,EAAE;QAC3DT,WAAWU,IAAI,CAAC,CAAC,oBAAoB,EAAElB,QAAQiB,QAAQ,CAAC,KAAK,EAAEJ,QAAQI,QAAQ,CAAC,EAAE,CAAC;IACrF;IAEA,OAAOT;AACT"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ceb7dd33a5ccbb182594ff9f004809f9eb6383c3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_m2zud9voe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_m2zud9voe();
cov_m2zud9voe().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_m2zud9voe().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_m2zud9voe().f[0]++;
    cov_m2zud9voe().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_m2zud9voe().s[3]++, require("next/server"));
async function POST(request) {
  /* istanbul ignore next */
  cov_m2zud9voe().f[1]++;
  cov_m2zud9voe().s[4]++;
  try {
    const data =
    /* istanbul ignore next */
    (cov_m2zud9voe().s[5]++, await request.json());
    // Validate the data
    /* istanbul ignore next */
    cov_m2zud9voe().s[6]++;
    if (
    /* istanbul ignore next */
    (cov_m2zud9voe().b[1][0]++, !data.timestamp) ||
    /* istanbul ignore next */
    (cov_m2zud9voe().b[1][1]++, !data.url) ||
    /* istanbul ignore next */
    (cov_m2zud9voe().b[1][2]++, !data.metrics)) {
      /* istanbul ignore next */
      cov_m2zud9voe().b[0][0]++;
      cov_m2zud9voe().s[7]++;
      return _server.NextResponse.json({
        error: 'Invalid performance data'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_m2zud9voe().b[0][1]++;
    }
    // Log performance data (in production, send to monitoring service)
    cov_m2zud9voe().s[8]++;
    console.log('Performance metrics received:', {
      url: data.url,
      timestamp: new Date(data.timestamp).toISOString(),
      metrics: data.metrics
    });
    // In production, you would:
    // 1. Store in database for analysis
    // 2. Send to monitoring service (DataDog, New Relic, etc.)
    // 3. Check against performance budgets
    // 4. Alert if thresholds are exceeded
    // Example: Check performance budgets
    const violations =
    /* istanbul ignore next */
    (cov_m2zud9voe().s[9]++, checkPerformanceBudgets(data.metrics));
    /* istanbul ignore next */
    cov_m2zud9voe().s[10]++;
    if (violations.length > 0) {
      /* istanbul ignore next */
      cov_m2zud9voe().b[2][0]++;
      cov_m2zud9voe().s[11]++;
      console.warn('Performance budget violations:', violations);
      // Send alert to monitoring system
    } else
    /* istanbul ignore next */
    {
      cov_m2zud9voe().b[2][1]++;
    }
    cov_m2zud9voe().s[12]++;
    return _server.NextResponse.json({
      success: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_m2zud9voe().s[13]++;
    console.error('Error processing performance data:', error);
    /* istanbul ignore next */
    cov_m2zud9voe().s[14]++;
    return _server.NextResponse.json({
      error: 'Failed to process performance data'
    }, {
      status: 500
    });
  }
}
function checkPerformanceBudgets(metrics) {
  /* istanbul ignore next */
  cov_m2zud9voe().f[2]++;
  const violations =
  /* istanbul ignore next */
  (cov_m2zud9voe().s[15]++, []);
  // Performance budgets
  const budgets =
  /* istanbul ignore next */
  (cov_m2zud9voe().s[16]++, {
    lcp: 2500,
    fid: 100,
    cls: 0.1,
    loadTime: 3000
  });
  /* istanbul ignore next */
  cov_m2zud9voe().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_m2zud9voe().b[4][0]++, metrics.lcp) &&
  /* istanbul ignore next */
  (cov_m2zud9voe().b[4][1]++, metrics.lcp > budgets.lcp)) {
    /* istanbul ignore next */
    cov_m2zud9voe().b[3][0]++;
    cov_m2zud9voe().s[18]++;
    violations.push(`LCP exceeded: ${metrics.lcp}ms > ${budgets.lcp}ms`);
  } else
  /* istanbul ignore next */
  {
    cov_m2zud9voe().b[3][1]++;
  }
  cov_m2zud9voe().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_m2zud9voe().b[6][0]++, metrics.fid) &&
  /* istanbul ignore next */
  (cov_m2zud9voe().b[6][1]++, metrics.fid > budgets.fid)) {
    /* istanbul ignore next */
    cov_m2zud9voe().b[5][0]++;
    cov_m2zud9voe().s[20]++;
    violations.push(`FID exceeded: ${metrics.fid}ms > ${budgets.fid}ms`);
  } else
  /* istanbul ignore next */
  {
    cov_m2zud9voe().b[5][1]++;
  }
  cov_m2zud9voe().s[21]++;
  if (
  /* istanbul ignore next */
  (cov_m2zud9voe().b[8][0]++, metrics.cls) &&
  /* istanbul ignore next */
  (cov_m2zud9voe().b[8][1]++, metrics.cls > budgets.cls)) {
    /* istanbul ignore next */
    cov_m2zud9voe().b[7][0]++;
    cov_m2zud9voe().s[22]++;
    violations.push(`CLS exceeded: ${metrics.cls} > ${budgets.cls}`);
  } else
  /* istanbul ignore next */
  {
    cov_m2zud9voe().b[7][1]++;
  }
  cov_m2zud9voe().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_m2zud9voe().b[10][0]++, metrics.loadTime) &&
  /* istanbul ignore next */
  (cov_m2zud9voe().b[10][1]++, metrics.loadTime > budgets.loadTime)) {
    /* istanbul ignore next */
    cov_m2zud9voe().b[9][0]++;
    cov_m2zud9voe().s[24]++;
    violations.push(`Load time exceeded: ${metrics.loadTime}ms > ${budgets.loadTime}ms`);
  } else
  /* istanbul ignore next */
  {
    cov_m2zud9voe().b[9][1]++;
  }
  cov_m2zud9voe().s[25]++;
  return violations;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,