0b5f25ab48651ac565d9e53c320f5e05
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _testutils = require("../../utils/test-utils");
const _Button = require("../../../components/ui/Button");
describe('Button Component', ()=>{
    it('renders with default props', ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            children: "Click me"
        }));
        const button = _testutils.screen.getByRole('button', {
            name: /click me/i
        });
        expect(button).toBeInTheDocument();
        expect(button).toHaveClass('bg-overlord-red', 'text-light-text');
    });
    it('renders different variants correctly', ()=>{
        const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            variant: "secondary",
            children: "Secondary"
        }));
        expect(_testutils.screen.getByRole('button')).toHaveClass('border', 'border-muted-light');
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            variant: "danger",
            children: "Danger"
        }));
        expect(_testutils.screen.getByRole('button')).toHaveClass('bg-rejected-red');
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            variant: "ghost",
            children: "Ghost"
        }));
        expect(_testutils.screen.getByRole('button')).toHaveClass('text-muted-light');
    });
    it('renders different sizes correctly', ()=>{
        const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            size: "sm",
            children: "Small"
        }));
        expect(_testutils.screen.getByRole('button')).toHaveClass('px-4', 'py-2', 'text-sm');
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            size: "lg",
            children: "Large"
        }));
        expect(_testutils.screen.getByRole('button')).toHaveClass('px-8', 'py-4', 'text-lg');
    });
    it('handles disabled state', ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            disabled: true,
            children: "Disabled"
        }));
        const button = _testutils.screen.getByRole('button');
        expect(button).toBeDisabled();
        expect(button).toHaveClass('disabled:opacity-50', 'disabled:cursor-not-allowed');
    });
    it('handles glow effect', ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            glow: true,
            children: "Glow Button"
        }));
        const button = _testutils.screen.getByRole('button');
        expect(button).toHaveClass('glow-red');
    });
    it('calls onClick handler when clicked', async ()=>{
        const handleClick = jest.fn();
        const user = _testutils.userEvent.setup();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            onClick: handleClick,
            children: "Click me"
        }));
        const button = _testutils.screen.getByRole('button');
        await user.click(button);
        expect(handleClick).toHaveBeenCalledTimes(1);
    });
    it('does not call onClick when disabled', async ()=>{
        const handleClick = jest.fn();
        const user = _testutils.userEvent.setup();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            onClick: handleClick,
            disabled: true,
            children: "Disabled"
        }));
        const button = _testutils.screen.getByRole('button');
        await user.click(button);
        expect(handleClick).not.toHaveBeenCalled();
    });
    it('supports keyboard navigation', async ()=>{
        const handleClick = jest.fn();
        const user = _testutils.userEvent.setup();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            onClick: handleClick,
            children: "Press Enter"
        }));
        const button = _testutils.screen.getByRole('button');
        button.focus();
        await user.keyboard('{Enter}');
        expect(handleClick).toHaveBeenCalledTimes(1);
    });
    it('renders with custom className', ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            className: "custom-class",
            children: "Custom"
        }));
        const button = _testutils.screen.getByRole('button');
        expect(button).toHaveClass('custom-class');
        expect(button).toHaveClass('bg-overlord-red'); // Should still have default classes
    });
    it('forwards ref correctly', ()=>{
        const ref = jest.fn();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            ref: ref,
            children: "Ref test"
        }));
        expect(ref).toHaveBeenCalledWith(expect.any(HTMLButtonElement));
    });
    it('supports ARIA attributes', ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            "aria-label": "Custom label",
            "aria-describedby": "description",
            role: "button",
            children: "ARIA Button"
        }));
        const button = _testutils.screen.getByRole('button');
        expect(button).toHaveAttribute('aria-label', 'Custom label');
        expect(button).toHaveAttribute('aria-describedby', 'description');
    });
    it('renders with glow prop', ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            glow: true,
            children: "Glow Button"
        }));
        const button = _testutils.screen.getByRole('button');
        expect(button).toBeInTheDocument();
        expect(button).toHaveClass('glow-red');
    });
});

//# sourceMappingURL=data:application/json;base64,