{"version":3,"names":["cov_m2zud9voe","actualCoverage","s","POST","request","f","data","json","b","timestamp","url","metrics","_server","NextResponse","error","status","console","log","Date","toISOString","violations","checkPerformanceBudgets","length","warn","success","budgets","lcp","fid","cls","loadTime","push"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/app/api/monitoring/performance/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\ninterface PerformanceData {\n  timestamp: number\n  url: string\n  userAgent: string\n  metrics: {\n    lcp?: number\n    fid?: number\n    cls?: number\n    fcp?: number\n    ttfb?: number\n    loadTime?: number\n    domContentLoaded?: number\n    memoryUsage?: {\n      used: number\n      total: number\n      limit: number\n    }\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data: PerformanceData = await request.json()\n    \n    // Validate the data\n    if (!data.timestamp || !data.url || !data.metrics) {\n      return NextResponse.json(\n        { error: 'Invalid performance data' },\n        { status: 400 }\n      )\n    }\n    \n    // Log performance data (in production, send to monitoring service)\n    console.log('Performance metrics received:', {\n      url: data.url,\n      timestamp: new Date(data.timestamp).toISOString(),\n      metrics: data.metrics,\n    })\n    \n    // In production, you would:\n    // 1. Store in database for analysis\n    // 2. Send to monitoring service (DataDog, New Relic, etc.)\n    // 3. Check against performance budgets\n    // 4. Alert if thresholds are exceeded\n    \n    // Example: Check performance budgets\n    const violations = checkPerformanceBudgets(data.metrics)\n    if (violations.length > 0) {\n      console.warn('Performance budget violations:', violations)\n      // Send alert to monitoring system\n    }\n    \n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error processing performance data:', error)\n    return NextResponse.json(\n      { error: 'Failed to process performance data' },\n      { status: 500 }\n    )\n  }\n}\n\nfunction checkPerformanceBudgets(metrics: PerformanceData['metrics']): string[] {\n  const violations: string[] = []\n  \n  // Performance budgets\n  const budgets = {\n    lcp: 2500, // 2.5s\n    fid: 100, // 100ms\n    cls: 0.1, // 0.1 score\n    loadTime: 3000, // 3s\n  }\n  \n  if (metrics.lcp && metrics.lcp > budgets.lcp) {\n    violations.push(`LCP exceeded: ${metrics.lcp}ms > ${budgets.lcp}ms`)\n  }\n  \n  if (metrics.fid && metrics.fid > budgets.fid) {\n    violations.push(`FID exceeded: ${metrics.fid}ms > ${budgets.fid}ms`)\n  }\n  \n  if (metrics.cls && metrics.cls > budgets.cls) {\n    violations.push(`CLS exceeded: ${metrics.cls} > ${budgets.cls}`)\n  }\n  \n  if (metrics.loadTime && metrics.loadTime > budgets.loadTime) {\n    violations.push(`Load time exceeded: ${metrics.loadTime}ms > ${budgets.loadTime}ms`)\n  }\n  \n  return violations\n}\n"],"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","ignoreList":[]}