69338a11de0a65dd2b26297f02b09551
/**
 * Base service class for API interactions
 * Provides common functionality for all service classes
 */"use strict";

/* istanbul ignore next */
function cov_23vjx2emrt() {
  var path = "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/services/BaseService.ts";
  var hash = "3a529dab3694b5d7a59e7bf539393d55150aeef8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/services/BaseService.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 13,
          column: 3
        }
      },
      "2": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 27
        }
      },
      "3": {
        start: {
          line: 14,
          column: 19
        },
        end: {
          line: 14,
          column: 47
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "5": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "6": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "7": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 100
        }
      },
      "8": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 29
        }
      },
      "9": {
        start: {
          line: 36,
          column: 25
        },
        end: {
          line: 36,
          column: 99
        }
      },
      "10": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 29
        }
      },
      "11": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 101
        }
      },
      "12": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 29
        }
      },
      "13": {
        start: {
          line: 48,
          column: 25
        },
        end: {
          line: 48,
          column: 96
        }
      },
      "14": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 29
        }
      },
      "15": {
        start: {
          line: 54,
          column: 25
        },
        end: {
          line: 54,
          column: 57
        }
      },
      "16": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 61
        }
      },
      "17": {
        start: {
          line: 57,
          column: 21
        },
        end: {
          line: 57,
          column: 38
        }
      },
      "18": {
        start: {
          line: 58,
          column: 22
        },
        end: {
          line: 58,
          column: 41
        }
      },
      "19": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 59,
          column: 56
        }
      },
      "20": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 71,
          column: 10
        }
      },
      "21": {
        start: {
          line: 76,
          column: 28
        },
        end: {
          line: 76,
          column: 30
        }
      },
      "22": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "23": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "24": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 83,
          column: 17
        }
      },
      "25": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 55
        }
      },
      "26": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 53
        }
      },
      "27": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 27
        }
      },
      "28": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 91,
          column: 39
        }
      },
      "29": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 38
        }
      },
      "30": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "31": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "32": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 52
        }
      },
      "33": {
        start: {
          line: 98,
          column: 25
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "34": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 29
        }
      },
      "35": {
        start: {
          line: 108,
          column: 25
        },
        end: {
          line: 110,
          column: 10
        }
      },
      "36": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 10
          }
        },
        loc: {
          start: {
            line: 10,
            column: 20
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 21,
            column: 7
          }
        },
        loc: {
          start: {
            line: 21,
            column: 34
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 6
          },
          end: {
            line: 29,
            column: 7
          }
        },
        loc: {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        },
        loc: {
          start: {
            line: 35,
            column: 40
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 6
          },
          end: {
            line: 41,
            column: 7
          }
        },
        loc: {
          start: {
            line: 41,
            column: 42
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 47,
            column: 7
          }
        },
        loc: {
          start: {
            line: 47,
            column: 37
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 47
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 53,
            column: 7
          }
        },
        loc: {
          start: {
            line: 53,
            column: 43
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 53
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 75,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        },
        loc: {
          start: {
            line: 75,
            column: 26
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 75
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 77,
            column: 39
          },
          end: {
            line: 77,
            column: 40
          }
        },
        loc: {
          start: {
            line: 77,
            column: 55
          },
          end: {
            line: 85,
            column: 9
          }
        },
        line: 77
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 90,
            column: 6
          },
          end: {
            line: 90,
            column: 7
          }
        },
        loc: {
          start: {
            line: 90,
            column: 55
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 90
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 94,
            column: 51
          },
          end: {
            line: 94,
            column: 52
          }
        },
        loc: {
          start: {
            line: 94,
            column: 67
          },
          end: {
            line: 96,
            column: 13
          }
        },
        line: 94
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 107,
            column: 6
          },
          end: {
            line: 107,
            column: 7
          }
        },
        loc: {
          start: {
            line: 107,
            column: 40
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 107
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 56
          }
        }, {
          start: {
            line: 56,
            column: 60
          },
          end: {
            line: 56,
            column: 61
          }
        }],
        line: 56
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 21
          },
          end: {
            line: 57,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 21
          },
          end: {
            line: 57,
            column: 33
          }
        }, {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 57,
            column: 38
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 35
          }
        }, {
          start: {
            line: 58,
            column: 39
          },
          end: {
            line: 58,
            column: 41
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 18
          },
          end: {
            line: 61,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 18
          },
          end: {
            line: 61,
            column: 31
          }
        }, {
          start: {
            line: 61,
            column: 35
          },
          end: {
            line: 61,
            column: 37
          }
        }],
        line: 61
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 35
          }
        }, {
          start: {
            line: 78,
            column: 39
          },
          end: {
            line: 78,
            column: 53
          }
        }, {
          start: {
            line: 78,
            column: 57
          },
          end: {
            line: 78,
            column: 69
          }
        }],
        line: 78
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 83,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 83,
            column: 17
          }
        }, {
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 83,
            column: 17
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/services/BaseService.ts"],
      sourcesContent: ["/**\n * Base service class for API interactions\n * Provides common functionality for all service classes\n */\n\nimport { apiClient } from '@/lib/api-client';\nimport { ApiResponse, PaginatedResponse } from '@/types/api';\n\nexport abstract class BaseService {\n  protected readonly baseUrl: string;\n\n  constructor(baseUrl: string) {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Generic GET request\n   */\n  protected async get<T>(\n    endpoint: string,\n    params?: Record<string, any>\n  ): Promise<ApiResponse<T>> {\n    const response = await apiClient.get(`${this.baseUrl}${endpoint}`, { params });\n    return response.data;\n  }\n\n  /**\n   * Generic POST request\n   */\n  protected async post<T>(\n    endpoint: string,\n    data?: any,\n    config?: any\n  ): Promise<ApiResponse<T>> {\n    const response = await apiClient.post(`${this.baseUrl}${endpoint}`, data, config);\n    return response.data;\n  }\n\n  /**\n   * Generic PUT request\n   */\n  protected async put<T>(\n    endpoint: string,\n    data?: any,\n    config?: any\n  ): Promise<ApiResponse<T>> {\n    const response = await apiClient.put(`${this.baseUrl}${endpoint}`, data, config);\n    return response.data;\n  }\n\n  /**\n   * Generic PATCH request\n   */\n  protected async patch<T>(\n    endpoint: string,\n    data?: any,\n    config?: any\n  ): Promise<ApiResponse<T>> {\n    const response = await apiClient.patch(`${this.baseUrl}${endpoint}`, data, config);\n    return response.data;\n  }\n\n  /**\n   * Generic DELETE request\n   */\n  protected async delete<T>(\n    endpoint: string,\n    config?: any\n  ): Promise<ApiResponse<T>> {\n    const response = await apiClient.delete(`${this.baseUrl}${endpoint}`, config);\n    return response.data;\n  }\n\n  /**\n   * Handle paginated requests\n   */\n  protected async getPaginated<T>(\n    endpoint: string,\n    params?: Record<string, any>\n  ): Promise<PaginatedResponse<T>> {\n    const response = await this.get<T[]>(endpoint, params);\n    \n    // Extract pagination info from headers or response\n    const totalCount = response.metadata?.totalCount || 0;\n    const page = params?.page || 1;\n    const limit = params?.limit || 10;\n    const totalPages = Math.ceil(totalCount / limit);\n\n    return {\n      data: response.data || [],\n      pagination: {\n        page,\n        limit,\n        totalCount,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1,\n      },\n      metadata: response.metadata,\n    };\n  }\n\n  /**\n   * Build query parameters for API requests\n   */\n  protected buildParams(params: Record<string, any>): Record<string, string> {\n    const cleanParams: Record<string, string> = {};\n    \n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null && value !== '') {\n        if (Array.isArray(value)) {\n          cleanParams[key] = value.join(',');\n        } else {\n          cleanParams[key] = String(value);\n        }\n      }\n    });\n\n    return cleanParams;\n  }\n\n  /**\n   * Handle file uploads\n   */\n  protected async uploadFile<T>(\n    endpoint: string,\n    file: File,\n    additionalData?: Record<string, any>\n  ): Promise<ApiResponse<T>> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    if (additionalData) {\n      Object.entries(additionalData).forEach(([key, value]) => {\n        formData.append(key, String(value));\n      });\n    }\n\n    const response = await apiClient.post(`${this.baseUrl}${endpoint}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n\n    return response.data;\n  }\n\n  /**\n   * Handle batch operations\n   */\n  protected async batch<T>(\n    endpoint: string,\n    operations: Array<{ method: string; data?: any; id?: string }>\n  ): Promise<ApiResponse<T[]>> {\n    const response = await apiClient.post(`${this.baseUrl}${endpoint}/batch`, {\n      operations,\n    });\n\n    return response.data;\n  }\n}\n"],
      names: ["BaseService", "baseUrl", "get", "endpoint", "params", "response", "apiClient", "data", "post", "config", "put", "patch", "delete", "getPaginated", "totalCount", "metadata", "page", "limit", "totalPages", "Math", "ceil", "pagination", "hasNext", "hasPrev", "buildParams", "cleanParams", "Object", "entries", "forEach", "key", "value", "undefined", "Array", "isArray", "join", "String", "uploadFile", "file", "additionalData", "formData", "FormData", "append", "headers", "batch", "operations"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3a529dab3694b5d7a59e7bf539393d55150aeef8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23vjx2emrt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23vjx2emrt();
cov_23vjx2emrt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_23vjx2emrt().s[1]++;
Object.defineProperty(exports, "BaseService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[0]++;
    cov_23vjx2emrt().s[2]++;
    return BaseService;
  }
});
const _apiclient =
/* istanbul ignore next */
(cov_23vjx2emrt().s[3]++, require("../lib/api-client"));
class BaseService {
  constructor(baseUrl) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[1]++;
    cov_23vjx2emrt().s[4]++;
    this.baseUrl = baseUrl;
  }
  /**
  * Generic GET request
  */
  async get(endpoint, params) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[2]++;
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[5]++, await _apiclient.apiClient.get(`${this.baseUrl}${endpoint}`, {
      params
    }));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[6]++;
    return response.data;
  }
  /**
  * Generic POST request
  */
  async post(endpoint, data, config) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[3]++;
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[7]++, await _apiclient.apiClient.post(`${this.baseUrl}${endpoint}`, data, config));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[8]++;
    return response.data;
  }
  /**
  * Generic PUT request
  */
  async put(endpoint, data, config) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[4]++;
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[9]++, await _apiclient.apiClient.put(`${this.baseUrl}${endpoint}`, data, config));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[10]++;
    return response.data;
  }
  /**
  * Generic PATCH request
  */
  async patch(endpoint, data, config) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[5]++;
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[11]++, await _apiclient.apiClient.patch(`${this.baseUrl}${endpoint}`, data, config));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[12]++;
    return response.data;
  }
  /**
  * Generic DELETE request
  */
  async delete(endpoint, config) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[6]++;
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[13]++, await _apiclient.apiClient.delete(`${this.baseUrl}${endpoint}`, config));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[14]++;
    return response.data;
  }
  /**
  * Handle paginated requests
  */
  async getPaginated(endpoint, params) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[7]++;
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[15]++, await this.get(endpoint, params));
    // Extract pagination info from headers or response
    const totalCount =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[16]++,
    /* istanbul ignore next */
    (cov_23vjx2emrt().b[0][0]++, response.metadata?.totalCount) ||
    /* istanbul ignore next */
    (cov_23vjx2emrt().b[0][1]++, 0));
    const page =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[17]++,
    /* istanbul ignore next */
    (cov_23vjx2emrt().b[1][0]++, params?.page) ||
    /* istanbul ignore next */
    (cov_23vjx2emrt().b[1][1]++, 1));
    const limit =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[18]++,
    /* istanbul ignore next */
    (cov_23vjx2emrt().b[2][0]++, params?.limit) ||
    /* istanbul ignore next */
    (cov_23vjx2emrt().b[2][1]++, 10));
    const totalPages =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[19]++, Math.ceil(totalCount / limit));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[20]++;
    return {
      data:
      /* istanbul ignore next */
      (cov_23vjx2emrt().b[3][0]++, response.data) ||
      /* istanbul ignore next */
      (cov_23vjx2emrt().b[3][1]++, []),
      pagination: {
        page,
        limit,
        totalCount,
        totalPages,
        hasNext: page < totalPages,
        hasPrev: page > 1
      },
      metadata: response.metadata
    };
  }
  /**
  * Build query parameters for API requests
  */
  buildParams(params) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[8]++;
    const cleanParams =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[21]++, {});
    /* istanbul ignore next */
    cov_23vjx2emrt().s[22]++;
    Object.entries(params).forEach(([key, value]) => {
      /* istanbul ignore next */
      cov_23vjx2emrt().f[9]++;
      cov_23vjx2emrt().s[23]++;
      if (
      /* istanbul ignore next */
      (cov_23vjx2emrt().b[5][0]++, value !== undefined) &&
      /* istanbul ignore next */
      (cov_23vjx2emrt().b[5][1]++, value !== null) &&
      /* istanbul ignore next */
      (cov_23vjx2emrt().b[5][2]++, value !== '')) {
        /* istanbul ignore next */
        cov_23vjx2emrt().b[4][0]++;
        cov_23vjx2emrt().s[24]++;
        if (Array.isArray(value)) {
          /* istanbul ignore next */
          cov_23vjx2emrt().b[6][0]++;
          cov_23vjx2emrt().s[25]++;
          cleanParams[key] = value.join(',');
        } else {
          /* istanbul ignore next */
          cov_23vjx2emrt().b[6][1]++;
          cov_23vjx2emrt().s[26]++;
          cleanParams[key] = String(value);
        }
      } else
      /* istanbul ignore next */
      {
        cov_23vjx2emrt().b[4][1]++;
      }
    });
    /* istanbul ignore next */
    cov_23vjx2emrt().s[27]++;
    return cleanParams;
  }
  /**
  * Handle file uploads
  */
  async uploadFile(endpoint, file, additionalData) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[10]++;
    const formData =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[28]++, new FormData());
    /* istanbul ignore next */
    cov_23vjx2emrt().s[29]++;
    formData.append('file', file);
    /* istanbul ignore next */
    cov_23vjx2emrt().s[30]++;
    if (additionalData) {
      /* istanbul ignore next */
      cov_23vjx2emrt().b[7][0]++;
      cov_23vjx2emrt().s[31]++;
      Object.entries(additionalData).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_23vjx2emrt().f[11]++;
        cov_23vjx2emrt().s[32]++;
        formData.append(key, String(value));
      });
    } else
    /* istanbul ignore next */
    {
      cov_23vjx2emrt().b[7][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[33]++, await _apiclient.apiClient.post(`${this.baseUrl}${endpoint}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    }));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[34]++;
    return response.data;
  }
  /**
  * Handle batch operations
  */
  async batch(endpoint, operations) {
    /* istanbul ignore next */
    cov_23vjx2emrt().f[12]++;
    const response =
    /* istanbul ignore next */
    (cov_23vjx2emrt().s[35]++, await _apiclient.apiClient.post(`${this.baseUrl}${endpoint}/batch`, {
      operations
    }));
    /* istanbul ignore next */
    cov_23vjx2emrt().s[36]++;
    return response.data;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,