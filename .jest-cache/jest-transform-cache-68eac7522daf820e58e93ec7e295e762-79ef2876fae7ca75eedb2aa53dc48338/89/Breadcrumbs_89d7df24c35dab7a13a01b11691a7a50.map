{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/components/navigation/Breadcrumbs.tsx"],"sourcesContent":["/**\n * Breadcrumb navigation component for The Robot Overlord\n * Shows current page hierarchy and navigation path\n */\n\n'use client';\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n  icon?: string;\n}\n\ninterface BreadcrumbsProps {\n  items?: BreadcrumbItem[];\n  className?: string;\n}\n\nexport function Breadcrumbs({ items, className = '' }: BreadcrumbsProps) {\n  const pathname = usePathname();\n\n  // Auto-generate breadcrumbs from pathname if items not provided\n  const breadcrumbItems = items || generateBreadcrumbsFromPath(pathname);\n\n  if (breadcrumbItems.length <= 1) {\n    return null; // Don't show breadcrumbs for single-level pages\n  }\n\n  return (\n    <nav className={`flex items-center space-x-2 text-sm ${className}`} aria-label=\"Breadcrumb\">\n      <div className=\"flex items-center space-x-2\">\n        {breadcrumbItems.map((item, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && (\n              <svg\n                className=\"w-4 h-4 text-muted-light\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 5l7 7-7 7\"\n                />\n              </svg>\n            )}\n            \n            {item.href && index < breadcrumbItems.length - 1 ? (\n              <Link\n                href={item.href}\n                className=\"flex items-center text-muted-light hover:text-light-text transition-colors\"\n              >\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </Link>\n            ) : (\n              <span className=\"flex items-center text-light-text font-medium\">\n                {item.icon && <span className=\"mr-1\">{item.icon}</span>}\n                {item.label}\n              </span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </nav>\n  );\n}\n\n/**\n * Generate breadcrumbs from pathname\n */\nfunction generateBreadcrumbsFromPath(pathname: string): BreadcrumbItem[] {\n  const pathSegments = pathname.split('/').filter(Boolean);\n  \n  const breadcrumbs: BreadcrumbItem[] = [\n    { label: 'Home', href: '/', icon: 'üè†' }\n  ];\n\n  let currentPath = '';\n  \n  pathSegments.forEach((segment, index) => {\n    currentPath += `/${segment}`;\n    \n    // Convert segment to readable label\n    const label = formatSegmentLabel(segment);\n    \n    // Determine if this should be a link (not the last item)\n    const isLast = index === pathSegments.length - 1;\n    \n    breadcrumbs.push({\n      label,\n      href: isLast ? undefined : currentPath,\n      icon: getSegmentIcon(segment)\n    });\n  });\n\n  return breadcrumbs;\n}\n\n/**\n * Format path segment into readable label\n */\nfunction formatSegmentLabel(segment: string): string {\n  // Handle special cases\n  const specialLabels: Record<string, string> = {\n    'dashboard': 'Dashboard',\n    'topics': 'Topics',\n    'leaderboard': 'Leaderboard',\n    'posts': 'Posts',\n    'create': 'Create',\n    'edit': 'Edit',\n    'my-posts': 'My Posts',\n    'graveyard': 'Graveyard',\n    'badges': 'Badges',\n    'users': 'Citizens',\n    'moderation': 'Moderation',\n    'queue': 'Queue',\n    'appeals': 'Appeals',\n    'reports': 'Reports',\n    'admin': 'Administration',\n    'system': 'System',\n    'help': 'Help',\n    'profile': 'Profile',\n    'settings': 'Settings'\n  };\n\n  if (specialLabels[segment]) {\n    return specialLabels[segment];\n  }\n\n  // Convert kebab-case to Title Case\n  return segment\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n/**\n * Get icon for path segment\n */\nfunction getSegmentIcon(segment: string): string | undefined {\n  const segmentIcons: Record<string, string> = {\n    'dashboard': 'üìä',\n    'topics': 'üí¨',\n    'leaderboard': 'üèÜ',\n    'posts': 'üìù',\n    'create': '‚úçÔ∏è',\n    'graveyard': 'üíÄ',\n    'badges': 'üèÖ',\n    'users': 'üë•',\n    'moderation': '‚öñÔ∏è',\n    'queue': 'üìã',\n    'appeals': 'üìã',\n    'reports': 'üö®',\n    'admin': 'üîß',\n    'system': 'üìà',\n    'help': '‚ùì',\n    'profile': 'üë§',\n    'settings': '‚öôÔ∏è'\n  };\n\n  return segmentIcons[segment];\n}\n\n/**\n * Hook to get current breadcrumbs\n */\nexport function useBreadcrumbs(): BreadcrumbItem[] {\n  const pathname = usePathname();\n  return generateBreadcrumbsFromPath(pathname);\n}\n"],"names":["Breadcrumbs","useBreadcrumbs","items","className","pathname","usePathname","breadcrumbItems","generateBreadcrumbsFromPath","length","nav","aria-label","div","map","item","index","React","Fragment","svg","fill","stroke","viewBox","path","strokeLinecap","strokeLinejoin","strokeWidth","d","href","Link","icon","span","label","pathSegments","split","filter","Boolean","breadcrumbs","currentPath","forEach","segment","formatSegmentLabel","isLast","push","undefined","getSegmentIcon","specialLabels","word","charAt","toUpperCase","slice","join","segmentIcons"],"mappings":"AAAA;;;CAGC,GAED;;;;;;;;;;;;QAiBgBA;eAAAA;;QAuJAC;eAAAA;;;;8DAtKE;6DACD;4BACW;;;;;;AAarB,SAASD,YAAY,EAAEE,KAAK,EAAEC,YAAY,EAAE,EAAoB;IACrE,MAAMC,WAAWC,IAAAA,uBAAW;IAE5B,gEAAgE;IAChE,MAAMC,kBAAkBJ,SAASK,4BAA4BH;IAE7D,IAAIE,gBAAgBE,MAAM,IAAI,GAAG;QAC/B,OAAO,MAAM,gDAAgD;IAC/D;IAEA,qBACE,qBAACC;QAAIN,WAAW,CAAC,oCAAoC,EAAEA,WAAW;QAAEO,cAAW;kBAC7E,cAAA,qBAACC;YAAIR,WAAU;sBACZG,gBAAgBM,GAAG,CAAC,CAACC,MAAMC,sBAC1B,sBAACC,cAAK,CAACC,QAAQ;;wBACZF,QAAQ,mBACP,qBAACG;4BACCd,WAAU;4BACVe,MAAK;4BACLC,QAAO;4BACPC,SAAQ;sCAER,cAAA,qBAACC;gCACCC,eAAc;gCACdC,gBAAe;gCACfC,aAAa;gCACbC,GAAE;;;wBAKPZ,KAAKa,IAAI,IAAIZ,QAAQR,gBAAgBE,MAAM,GAAG,kBAC7C,sBAACmB,aAAI;4BACHD,MAAMb,KAAKa,IAAI;4BACfvB,WAAU;;gCAETU,KAAKe,IAAI,kBAAI,qBAACC;oCAAK1B,WAAU;8CAAQU,KAAKe,IAAI;;gCAC9Cf,KAAKiB,KAAK;;2CAGb,sBAACD;4BAAK1B,WAAU;;gCACbU,KAAKe,IAAI,kBAAI,qBAACC;oCAAK1B,WAAU;8CAAQU,KAAKe,IAAI;;gCAC9Cf,KAAKiB,KAAK;;;;mBA5BIhB;;;AAoC/B;AAEA;;CAEC,GACD,SAASP,4BAA4BH,QAAgB;IACnD,MAAM2B,eAAe3B,SAAS4B,KAAK,CAAC,KAAKC,MAAM,CAACC;IAEhD,MAAMC,cAAgC;QACpC;YAAEL,OAAO;YAAQJ,MAAM;YAAKE,MAAM;QAAK;KACxC;IAED,IAAIQ,cAAc;IAElBL,aAAaM,OAAO,CAAC,CAACC,SAASxB;QAC7BsB,eAAe,CAAC,CAAC,EAAEE,SAAS;QAE5B,oCAAoC;QACpC,MAAMR,QAAQS,mBAAmBD;QAEjC,yDAAyD;QACzD,MAAME,SAAS1B,UAAUiB,aAAavB,MAAM,GAAG;QAE/C2B,YAAYM,IAAI,CAAC;YACfX;YACAJ,MAAMc,SAASE,YAAYN;YAC3BR,MAAMe,eAAeL;QACvB;IACF;IAEA,OAAOH;AACT;AAEA;;CAEC,GACD,SAASI,mBAAmBD,OAAe;IACzC,uBAAuB;IACvB,MAAMM,gBAAwC;QAC5C,aAAa;QACb,UAAU;QACV,eAAe;QACf,SAAS;QACT,UAAU;QACV,QAAQ;QACR,YAAY;QACZ,aAAa;QACb,UAAU;QACV,SAAS;QACT,cAAc;QACd,SAAS;QACT,WAAW;QACX,WAAW;QACX,SAAS;QACT,UAAU;QACV,QAAQ;QACR,WAAW;QACX,YAAY;IACd;IAEA,IAAIA,aAAa,CAACN,QAAQ,EAAE;QAC1B,OAAOM,aAAa,CAACN,QAAQ;IAC/B;IAEA,mCAAmC;IACnC,OAAOA,QACJN,KAAK,CAAC,KACNpB,GAAG,CAACiC,CAAAA,OAAQA,KAAKC,MAAM,CAAC,GAAGC,WAAW,KAAKF,KAAKG,KAAK,CAAC,IACtDC,IAAI,CAAC;AACV;AAEA;;CAEC,GACD,SAASN,eAAeL,OAAe;IACrC,MAAMY,eAAuC;QAC3C,aAAa;QACb,UAAU;QACV,eAAe;QACf,SAAS;QACT,UAAU;QACV,aAAa;QACb,UAAU;QACV,SAAS;QACT,cAAc;QACd,SAAS;QACT,WAAW;QACX,WAAW;QACX,SAAS;QACT,UAAU;QACV,QAAQ;QACR,WAAW;QACX,YAAY;IACd;IAEA,OAAOA,YAAY,CAACZ,QAAQ;AAC9B;AAKO,SAASrC;IACd,MAAMG,WAAWC,IAAAA,uBAAW;IAC5B,OAAOE,4BAA4BH;AACrC"}