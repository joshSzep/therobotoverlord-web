582cfb5c5bfe2de37a9561078ac32da4
/**
 * Breadcrumb navigation component for The Robot Overlord
 * Shows current page hierarchy and navigation path
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get Breadcrumbs () {
        return Breadcrumbs;
    },
    get useBreadcrumbs () {
        return useBreadcrumbs;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _link = /*#__PURE__*/ _interop_require_default(require("next/link"));
const _navigation = require("next/navigation");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function Breadcrumbs({ items, className = '' }) {
    const pathname = (0, _navigation.usePathname)();
    // Auto-generate breadcrumbs from pathname if items not provided
    const breadcrumbItems = items || generateBreadcrumbsFromPath(pathname);
    if (breadcrumbItems.length <= 1) {
        return null; // Don't show breadcrumbs for single-level pages
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("nav", {
        className: `flex items-center space-x-2 text-sm ${className}`,
        "aria-label": "Breadcrumb",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "flex items-center space-x-2",
            children: breadcrumbItems.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.default.Fragment, {
                    children: [
                        index > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                            className: "w-4 h-4 text-muted-light",
                            fill: "none",
                            stroke: "currentColor",
                            viewBox: "0 0 24 24",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                strokeLinecap: "round",
                                strokeLinejoin: "round",
                                strokeWidth: 2,
                                d: "M9 5l7 7-7 7"
                            })
                        }),
                        item.href && index < breadcrumbItems.length - 1 ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_link.default, {
                            href: item.href,
                            className: "flex items-center text-muted-light hover:text-light-text transition-colors",
                            children: [
                                item.icon && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: "mr-1",
                                    children: item.icon
                                }),
                                item.label
                            ]
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                            className: "flex items-center text-light-text font-medium",
                            children: [
                                item.icon && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: "mr-1",
                                    children: item.icon
                                }),
                                item.label
                            ]
                        })
                    ]
                }, index))
        })
    });
}
/**
 * Generate breadcrumbs from pathname
 */ function generateBreadcrumbsFromPath(pathname) {
    const pathSegments = pathname.split('/').filter(Boolean);
    const breadcrumbs = [
        {
            label: 'Home',
            href: '/',
            icon: 'üè†'
        }
    ];
    let currentPath = '';
    pathSegments.forEach((segment, index)=>{
        currentPath += `/${segment}`;
        // Convert segment to readable label
        const label = formatSegmentLabel(segment);
        // Determine if this should be a link (not the last item)
        const isLast = index === pathSegments.length - 1;
        breadcrumbs.push({
            label,
            href: isLast ? undefined : currentPath,
            icon: getSegmentIcon(segment)
        });
    });
    return breadcrumbs;
}
/**
 * Format path segment into readable label
 */ function formatSegmentLabel(segment) {
    // Handle special cases
    const specialLabels = {
        'dashboard': 'Dashboard',
        'topics': 'Topics',
        'leaderboard': 'Leaderboard',
        'posts': 'Posts',
        'create': 'Create',
        'edit': 'Edit',
        'my-posts': 'My Posts',
        'graveyard': 'Graveyard',
        'badges': 'Badges',
        'users': 'Citizens',
        'moderation': 'Moderation',
        'queue': 'Queue',
        'appeals': 'Appeals',
        'reports': 'Reports',
        'admin': 'Administration',
        'system': 'System',
        'help': 'Help',
        'profile': 'Profile',
        'settings': 'Settings'
    };
    if (specialLabels[segment]) {
        return specialLabels[segment];
    }
    // Convert kebab-case to Title Case
    return segment.split('-').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
}
/**
 * Get icon for path segment
 */ function getSegmentIcon(segment) {
    const segmentIcons = {
        'dashboard': 'üìä',
        'topics': 'üí¨',
        'leaderboard': 'üèÜ',
        'posts': 'üìù',
        'create': '‚úçÔ∏è',
        'graveyard': 'üíÄ',
        'badges': 'üèÖ',
        'users': 'üë•',
        'moderation': '‚öñÔ∏è',
        'queue': 'üìã',
        'appeals': 'üìã',
        'reports': 'üö®',
        'admin': 'üîß',
        'system': 'üìà',
        'help': '‚ùì',
        'profile': 'üë§',
        'settings': '‚öôÔ∏è'
    };
    return segmentIcons[segment];
}
function useBreadcrumbs() {
    const pathname = (0, _navigation.usePathname)();
    return generateBreadcrumbsFromPath(pathname);
}

//# sourceMappingURL=data:application/json;base64,