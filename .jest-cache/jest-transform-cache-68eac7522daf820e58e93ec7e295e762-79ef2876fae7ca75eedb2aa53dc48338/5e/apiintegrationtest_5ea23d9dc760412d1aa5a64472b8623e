cae6c4ef54ebdfee6fb9fb0adf1ea016
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _testutils = require("../utils/test-utils");
// Mock fetch for API testing
const mockFetch = jest.fn();
global.fetch = mockFetch;
// API base URL
const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';
// API client with error handling
class ApiClient {
    constructor(baseUrl = API_BASE){
        this.baseUrl = baseUrl;
        this.defaultHeaders = {
            'Content-Type': 'application/json'
        };
    }
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const config = {
            ...options,
            headers: {
                ...this.defaultHeaders,
                ...options.headers
            }
        };
        const response = await fetch(url, config);
        if (!response.ok) {
            const error = await response.json().catch(()=>({
                    message: 'Unknown error'
                }));
            throw new Error(error.message || `HTTP ${response.status}`);
        }
        return response.json();
    }
    // Posts API
    async getPosts(params = {}) {
        const query = new URLSearchParams(params).toString();
        return this.request(`/posts${query ? `?${query}` : ''}`);
    }
    async getPost(id) {
        return this.request(`/posts/${id}`);
    }
    async createPost(data) {
        return this.request('/posts', {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }
    async updatePost(id, data) {
        return this.request(`/posts/${id}`, {
            method: 'PUT',
            body: JSON.stringify(data)
        });
    }
    async deletePost(id) {
        return this.request(`/posts/${id}`, {
            method: 'DELETE'
        });
    }
    // Topics API
    async getTopics() {
        return this.request('/topics');
    }
    async getTopic(slug) {
        return this.request(`/topics/${slug}`);
    }
    // Users API
    async getUser(username) {
        return this.request(`/users/${username}`);
    }
    async updateUser(id, data) {
        return this.request(`/users/${id}`, {
            method: 'PUT',
            body: JSON.stringify(data)
        });
    }
    // Search API
    async search(query, filters = {}) {
        const params = {
            q: query,
            ...filters
        };
        const queryString = new URLSearchParams(params).toString();
        return this.request(`/search?${queryString}`);
    }
}
describe('API Integration Tests', ()=>{
    let apiClient;
    beforeEach(()=>{
        apiClient = new ApiClient();
        mockFetch.mockClear();
    });
    describe('Posts API', ()=>{
        const mockPosts = [
            (0, _testutils.createMockPost)({
                id: '1',
                title: 'First Post'
            }),
            (0, _testutils.createMockPost)({
                id: '2',
                title: 'Second Post'
            })
        ];
        it('fetches posts with pagination', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        posts: mockPosts,
                        pagination: {
                            page: 1,
                            limit: 10,
                            total: 2,
                            hasMore: false
                        }
                    })
            });
            const result = await apiClient.getPosts({
                page: 1,
                limit: 10
            });
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/posts?page=1&limit=10`, expect.objectContaining({
                headers: {
                    'Content-Type': 'application/json'
                }
            }));
            expect(result.posts).toHaveLength(2);
            expect(result.pagination.total).toBe(2);
        });
        it('fetches posts with filters', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        posts: [
                            mockPosts[0]
                        ]
                    })
            });
            await apiClient.getPosts({
                category: 'ai',
                sortBy: 'date',
                order: 'desc'
            });
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/posts?category=ai&sortBy=date&order=desc`, expect.any(Object));
        });
        it('fetches single post by ID', async ()=>{
            const mockPost = (0, _testutils.createMockPost)({
                id: '1'
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockPost
            });
            const result = await apiClient.getPost('1');
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/posts/1`, expect.any(Object));
            expect(result.id).toBe('1');
        });
        it('creates new post', async ()=>{
            const newPostData = {
                title: 'New Post',
                content: 'Post content',
                tags: [
                    'test'
                ]
            };
            const createdPost = (0, _testutils.createMockPost)({
                ...newPostData,
                id: '3'
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>createdPost
            });
            const result = await apiClient.createPost(newPostData);
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/posts`, expect.objectContaining({
                method: 'POST',
                body: JSON.stringify(newPostData)
            }));
            expect(result.id).toBe('3');
        });
        it('updates existing post', async ()=>{
            const updateData = {
                title: 'Updated Title'
            };
            const updatedPost = (0, _testutils.createMockPost)({
                id: '1',
                ...updateData
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>updatedPost
            });
            const result = await apiClient.updatePost('1', updateData);
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/posts/1`, expect.objectContaining({
                method: 'PUT',
                body: JSON.stringify(updateData)
            }));
            expect(result.title).toBe('Updated Title');
        });
        it('deletes post', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true
                    })
            });
            const result = await apiClient.deletePost('1');
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/posts/1`, expect.objectContaining({
                method: 'DELETE'
            }));
            expect(result.success).toBe(true);
        });
        it('handles API errors', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 404,
                json: async ()=>({
                        message: 'Post not found'
                    })
            });
            await expect(apiClient.getPost('999')).rejects.toThrow('Post not found');
        });
        it('handles network errors', async ()=>{
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            await expect(apiClient.getPosts()).rejects.toThrow('Network error');
        });
    });
    describe('Topics API', ()=>{
        const mockTopics = [
            (0, _testutils.createMockTopic)({
                id: '1',
                title: 'AI',
                slug: 'ai'
            }),
            (0, _testutils.createMockTopic)({
                id: '2',
                title: 'ML',
                slug: 'ml'
            })
        ];
        it('fetches all topics', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockTopics
            });
            const result = await apiClient.getTopics();
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/topics`, expect.any(Object));
            expect(result).toHaveLength(2);
        });
        it('fetches topic by slug', async ()=>{
            const mockTopic = (0, _testutils.createMockTopic)({
                slug: 'ai'
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockTopic
            });
            const result = await apiClient.getTopic('ai');
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/topics/ai`, expect.any(Object));
            expect(result.slug).toBe('ai');
        });
    });
    describe('Users API', ()=>{
        it('fetches user profile', async ()=>{
            const mockUser = (0, _testutils.createMockUser)({
                username: 'testuser'
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockUser
            });
            const result = await apiClient.getUser('testuser');
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/users/testuser`, expect.any(Object));
            expect(result.username).toBe('testuser');
        });
        it('updates user profile', async ()=>{
            const updateData = {
                bio: 'Updated bio'
            };
            const updatedUser = (0, _testutils.createMockUser)({
                id: '1',
                bio: 'Updated bio'
            });
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>updatedUser
            });
            const result = await apiClient.updateUser('1', updateData);
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/users/1`, expect.objectContaining({
                method: 'PUT',
                body: JSON.stringify(updateData)
            }));
            expect(result.bio).toBe('Updated bio');
        });
    });
    describe('Search API', ()=>{
        it('performs search with query', async ()=>{
            const searchResults = {
                posts: [
                    (0, _testutils.createMockPost)({
                        title: 'AI Search Result'
                    })
                ],
                topics: [
                    (0, _testutils.createMockTopic)({
                        title: 'AI Topic'
                    })
                ],
                users: [
                    (0, _testutils.createMockUser)({
                        username: 'ai_expert'
                    })
                ],
                total: 3
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>searchResults
            });
            const result = await apiClient.search('artificial intelligence');
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/search?q=artificial+intelligence`, expect.any(Object));
            expect(result.total).toBe(3);
        });
        it('performs filtered search', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        posts: [],
                        total: 0
                    })
            });
            await apiClient.search('test', {
                type: 'posts',
                category: 'ai',
                dateFrom: '2023-01-01'
            });
            expect(mockFetch).toHaveBeenCalledWith(`${API_BASE}/search?q=test&type=posts&category=ai&dateFrom=2023-01-01`, expect.any(Object));
        });
    });
    describe('Authentication Integration', ()=>{
        it('includes auth token in requests', async ()=>{
            const token = 'mock-jwt-token';
            // Create authenticated client
            class AuthenticatedApiClient extends ApiClient {
                constructor(){
                    super();
                    this.defaultHeaders = {
                        ...this.defaultHeaders,
                        'Authorization': `Bearer ${token}`
                    };
                }
            }
            const authClient = new AuthenticatedApiClient();
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        posts: []
                    })
            });
            await authClient.getPosts();
            expect(mockFetch).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
                headers: expect.objectContaining({
                    'Authorization': `Bearer ${token}`
                })
            }));
        });
        it('handles 401 unauthorized responses', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 401,
                json: async ()=>({
                        message: 'Unauthorized'
                    })
            });
            await expect(apiClient.getPosts()).rejects.toThrow('Unauthorized');
        });
    });
    describe('Rate Limiting', ()=>{
        it('handles rate limit responses', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 429,
                headers: new Headers({
                    'Retry-After': '60'
                }),
                json: async ()=>({
                        message: 'Rate limit exceeded'
                    })
            });
            await expect(apiClient.getPosts()).rejects.toThrow('Rate limit exceeded');
        });
    });
    describe('Caching Integration', ()=>{
        it('respects cache headers', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: true,
                headers: new Headers({
                    'Cache-Control': 'public, max-age=300',
                    'ETag': '"abc123"'
                }),
                json: async ()=>({
                        posts: []
                    })
            });
            await apiClient.getPosts();
            // In a real implementation, subsequent requests would check ETag
            mockFetch.mockResolvedValueOnce({
                ok: true,
                status: 304,
                json: async ()=>null
            });
            // This would return cached data
            await apiClient.getPosts();
        });
    });
    describe('Error Recovery', ()=>{
        it('retries failed requests', async ()=>{
            // First call fails, second succeeds
            mockFetch.mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        posts: []
                    })
            });
            // Implement retry logic
            const retryRequest = async (fn, retries = 1)=>{
                try {
                    return await fn();
                } catch (error) {
                    if (retries > 0) {
                        await new Promise((resolve)=>setTimeout(resolve, 100));
                        return retryRequest(fn, retries - 1);
                    }
                    throw error;
                }
            };
            const result = await retryRequest(()=>apiClient.getPosts());
            expect(mockFetch).toHaveBeenCalledTimes(2);
            expect(result.posts).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3Noc3plcC9jb2RlL3RoZXJvYm90b3ZlcmxvcmQtbW9uby90aGVyb2JvdG92ZXJsb3JkLXdlYi9zcmMvX190ZXN0c19fL2ludGVncmF0aW9uL2FwaS5pbnRlZ3JhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU1vY2tQb3N0LCBjcmVhdGVNb2NrVXNlciwgY3JlYXRlTW9ja1RvcGljIH0gZnJvbSAnQC9fX3Rlc3RzX18vdXRpbHMvdGVzdC11dGlscydcblxuLy8gTW9jayBmZXRjaCBmb3IgQVBJIHRlc3RpbmdcbmNvbnN0IG1vY2tGZXRjaCA9IGplc3QuZm4oKVxuZ2xvYmFsLmZldGNoID0gbW9ja0ZldGNoXG5cbi8vIEFQSSBiYXNlIFVSTFxuY29uc3QgQVBJX0JBU0UgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpJ1xuXG4vLyBBUEkgY2xpZW50IHdpdGggZXJyb3IgaGFuZGxpbmdcbmNsYXNzIEFwaUNsaWVudCB7XG4gIHByaXZhdGUgYmFzZVVybDogc3RyaW5nXG4gIHByaXZhdGUgZGVmYXVsdEhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz5cblxuICBjb25zdHJ1Y3RvcihiYXNlVXJsOiBzdHJpbmcgPSBBUElfQkFTRSkge1xuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmxcbiAgICB0aGlzLmRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVxdWVzdChlbmRwb2ludDogc3RyaW5nLCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9KSB7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfSR7ZW5kcG9pbnR9YFxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIC4uLnRoaXMuZGVmYXVsdEhlYWRlcnMsXG4gICAgICAgIC4uLm9wdGlvbnMuaGVhZGVyc1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBjb25maWcpXG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgZXJyb3IgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHsgbWVzc2FnZTogJ1Vua25vd24gZXJyb3InIH0pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UgfHwgYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9YClcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gIH1cblxuICAvLyBQb3N0cyBBUElcbiAgYXN5bmMgZ2V0UG9zdHMocGFyYW1zOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpLnRvU3RyaW5nKClcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAvcG9zdHMke3F1ZXJ5ID8gYD8ke3F1ZXJ5fWAgOiAnJ31gKVxuICB9XG5cbiAgYXN5bmMgZ2V0UG9zdChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChgL3Bvc3RzLyR7aWR9YClcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVBvc3QoZGF0YTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnL3Bvc3RzJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgIH0pXG4gIH1cblxuICBhc3luYyB1cGRhdGVQb3N0KGlkOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYC9wb3N0cy8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBkZWxldGVQb3N0KGlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAvcG9zdHMvJHtpZH1gLCB7IG1ldGhvZDogJ0RFTEVURScgfSlcbiAgfVxuXG4gIC8vIFRvcGljcyBBUElcbiAgYXN5bmMgZ2V0VG9waWNzKCkge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJy90b3BpY3MnKVxuICB9XG5cbiAgYXN5bmMgZ2V0VG9waWMoc2x1Zzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChgL3RvcGljcy8ke3NsdWd9YClcbiAgfVxuXG4gIC8vIFVzZXJzIEFQSVxuICBhc3luYyBnZXRVc2VyKHVzZXJuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAvdXNlcnMvJHt1c2VybmFtZX1gKVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlVXNlcihpZDogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGAvdXNlcnMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICB9KVxuICB9XG5cbiAgLy8gU2VhcmNoIEFQSVxuICBhc3luYyBzZWFyY2gocXVlcnk6IHN0cmluZywgZmlsdGVyczogYW55ID0ge30pIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7IHE6IHF1ZXJ5LCAuLi5maWx0ZXJzIH1cbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zKS50b1N0cmluZygpXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChgL3NlYXJjaD8ke3F1ZXJ5U3RyaW5nfWApXG4gIH1cbn1cblxuZGVzY3JpYmUoJ0FQSSBJbnRlZ3JhdGlvbiBUZXN0cycsICgpID0+IHtcbiAgbGV0IGFwaUNsaWVudDogQXBpQ2xpZW50XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgYXBpQ2xpZW50ID0gbmV3IEFwaUNsaWVudCgpXG4gICAgbW9ja0ZldGNoLm1vY2tDbGVhcigpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1Bvc3RzIEFQSScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrUG9zdHMgPSBbXG4gICAgICBjcmVhdGVNb2NrUG9zdCh7IGlkOiAnMScsIHRpdGxlOiAnRmlyc3QgUG9zdCcgfSksXG4gICAgICBjcmVhdGVNb2NrUG9zdCh7IGlkOiAnMicsIHRpdGxlOiAnU2Vjb25kIFBvc3QnIH0pXG4gICAgXVxuXG4gICAgaXQoJ2ZldGNoZXMgcG9zdHMgd2l0aCBwYWdpbmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoe1xuICAgICAgICAgIHBvc3RzOiBtb2NrUG9zdHMsXG4gICAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgICAgcGFnZTogMSxcbiAgICAgICAgICAgIGxpbWl0OiAxMCxcbiAgICAgICAgICAgIHRvdGFsOiAyLFxuICAgICAgICAgICAgaGFzTW9yZTogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGlDbGllbnQuZ2V0UG9zdHMoeyBwYWdlOiAxLCBsaW1pdDogMTAgfSlcblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGAke0FQSV9CQVNFfS9wb3N0cz9wYWdlPTEmbGltaXQ9MTBgLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cbiAgICAgICAgfSlcbiAgICAgIClcblxuICAgICAgZXhwZWN0KHJlc3VsdC5wb3N0cykudG9IYXZlTGVuZ3RoKDIpXG4gICAgICBleHBlY3QocmVzdWx0LnBhZ2luYXRpb24udG90YWwpLnRvQmUoMilcbiAgICB9KVxuXG4gICAgaXQoJ2ZldGNoZXMgcG9zdHMgd2l0aCBmaWx0ZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBwb3N0czogW21vY2tQb3N0c1swXV0gfSlcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGFwaUNsaWVudC5nZXRQb3N0cyh7XG4gICAgICAgIGNhdGVnb3J5OiAnYWknLFxuICAgICAgICBzb3J0Qnk6ICdkYXRlJyxcbiAgICAgICAgb3JkZXI6ICdkZXNjJ1xuICAgICAgfSlcblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGAke0FQSV9CQVNFfS9wb3N0cz9jYXRlZ29yeT1haSZzb3J0Qnk9ZGF0ZSZvcmRlcj1kZXNjYCxcbiAgICAgICAgZXhwZWN0LmFueShPYmplY3QpXG4gICAgICApXG4gICAgfSlcblxuICAgIGl0KCdmZXRjaGVzIHNpbmdsZSBwb3N0IGJ5IElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Bvc3QgPSBjcmVhdGVNb2NrUG9zdCh7IGlkOiAnMScgfSlcbiAgICAgIFxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrUG9zdFxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBpQ2xpZW50LmdldFBvc3QoJzEnKVxuXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgYCR7QVBJX0JBU0V9L3Bvc3RzLzFgLFxuICAgICAgICBleHBlY3QuYW55KE9iamVjdClcbiAgICAgIClcbiAgICAgIGV4cGVjdChyZXN1bHQuaWQpLnRvQmUoJzEnKVxuICAgIH0pXG5cbiAgICBpdCgnY3JlYXRlcyBuZXcgcG9zdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5ld1Bvc3REYXRhID0ge1xuICAgICAgICB0aXRsZTogJ05ldyBQb3N0JyxcbiAgICAgICAgY29udGVudDogJ1Bvc3QgY29udGVudCcsXG4gICAgICAgIHRhZ3M6IFsndGVzdCddXG4gICAgICB9XG4gICAgICBjb25zdCBjcmVhdGVkUG9zdCA9IGNyZWF0ZU1vY2tQb3N0KHsgLi4ubmV3UG9zdERhdGEsIGlkOiAnMycgfSlcblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBjcmVhdGVkUG9zdFxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBpQ2xpZW50LmNyZWF0ZVBvc3QobmV3UG9zdERhdGEpXG5cbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBgJHtBUElfQkFTRX0vcG9zdHNgLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobmV3UG9zdERhdGEpXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICBleHBlY3QocmVzdWx0LmlkKS50b0JlKCczJylcbiAgICB9KVxuXG4gICAgaXQoJ3VwZGF0ZXMgZXhpc3RpbmcgcG9zdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7IHRpdGxlOiAnVXBkYXRlZCBUaXRsZScgfVxuICAgICAgY29uc3QgdXBkYXRlZFBvc3QgPSBjcmVhdGVNb2NrUG9zdCh7IGlkOiAnMScsIC4uLnVwZGF0ZURhdGEgfSlcblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiB1cGRhdGVkUG9zdFxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBpQ2xpZW50LnVwZGF0ZVBvc3QoJzEnLCB1cGRhdGVEYXRhKVxuXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgYCR7QVBJX0JBU0V9L3Bvc3RzLzFgLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1cGRhdGVEYXRhKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgZXhwZWN0KHJlc3VsdC50aXRsZSkudG9CZSgnVXBkYXRlZCBUaXRsZScpXG4gICAgfSlcblxuICAgIGl0KCdkZWxldGVzIHBvc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+ICh7IHN1Y2Nlc3M6IHRydWUgfSlcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFwaUNsaWVudC5kZWxldGVQb3N0KCcxJylcblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGAke0FQSV9CQVNFfS9wb3N0cy8xYCxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBtZXRob2Q6ICdERUxFVEUnIH0pXG4gICAgICApXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSlcbiAgICB9KVxuXG4gICAgaXQoJ2hhbmRsZXMgQVBJIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBtZXNzYWdlOiAnUG9zdCBub3QgZm91bmQnIH0pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBleHBlY3QoYXBpQ2xpZW50LmdldFBvc3QoJzk5OScpKS5yZWplY3RzLnRvVGhyb3coJ1Bvc3Qgbm90IGZvdW5kJylcbiAgICB9KVxuXG4gICAgaXQoJ2hhbmRsZXMgbmV0d29yayBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKVxuXG4gICAgICBhd2FpdCBleHBlY3QoYXBpQ2xpZW50LmdldFBvc3RzKCkpLnJlamVjdHMudG9UaHJvdygnTmV0d29yayBlcnJvcicpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnVG9waWNzIEFQSScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrVG9waWNzID0gW1xuICAgICAgY3JlYXRlTW9ja1RvcGljKHsgaWQ6ICcxJywgdGl0bGU6ICdBSScsIHNsdWc6ICdhaScgfSksXG4gICAgICBjcmVhdGVNb2NrVG9waWMoeyBpZDogJzInLCB0aXRsZTogJ01MJywgc2x1ZzogJ21sJyB9KVxuICAgIF1cblxuICAgIGl0KCdmZXRjaGVzIGFsbCB0b3BpY3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IG1vY2tUb3BpY3NcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFwaUNsaWVudC5nZXRUb3BpY3MoKVxuXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgYCR7QVBJX0JBU0V9L3RvcGljc2AsXG4gICAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICAgICAgKVxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlTGVuZ3RoKDIpXG4gICAgfSlcblxuICAgIGl0KCdmZXRjaGVzIHRvcGljIGJ5IHNsdWcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrVG9waWMgPSBjcmVhdGVNb2NrVG9waWMoeyBzbHVnOiAnYWknIH0pXG4gICAgICBcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gbW9ja1RvcGljXG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGlDbGllbnQuZ2V0VG9waWMoJ2FpJylcblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGAke0FQSV9CQVNFfS90b3BpY3MvYWlgLFxuICAgICAgICBleHBlY3QuYW55KE9iamVjdClcbiAgICAgIClcbiAgICAgIGV4cGVjdChyZXN1bHQuc2x1ZykudG9CZSgnYWknKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1VzZXJzIEFQSScsICgpID0+IHtcbiAgICBpdCgnZmV0Y2hlcyB1c2VyIHByb2ZpbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrVXNlciA9IGNyZWF0ZU1vY2tVc2VyKHsgdXNlcm5hbWU6ICd0ZXN0dXNlcicgfSlcbiAgICAgIFxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiBtb2NrVXNlclxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBpQ2xpZW50LmdldFVzZXIoJ3Rlc3R1c2VyJylcblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGAke0FQSV9CQVNFfS91c2Vycy90ZXN0dXNlcmAsXG4gICAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICAgICAgKVxuICAgICAgZXhwZWN0KHJlc3VsdC51c2VybmFtZSkudG9CZSgndGVzdHVzZXInKVxuICAgIH0pXG5cbiAgICBpdCgndXBkYXRlcyB1c2VyIHByb2ZpbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGVEYXRhID0geyBiaW86ICdVcGRhdGVkIGJpbycgfVxuICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBjcmVhdGVNb2NrVXNlcih7IGlkOiAnMScsIGJpbzogJ1VwZGF0ZWQgYmlvJyB9KVxuXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IHVwZGF0ZWRVc2VyXG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGlDbGllbnQudXBkYXRlVXNlcignMScsIHVwZGF0ZURhdGEpXG5cbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBgJHtBUElfQkFTRX0vdXNlcnMvMWAsXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHVwZGF0ZURhdGEpXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICBleHBlY3QocmVzdWx0LmJpbykudG9CZSgnVXBkYXRlZCBiaW8nKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1NlYXJjaCBBUEknLCAoKSA9PiB7XG4gICAgaXQoJ3BlcmZvcm1zIHNlYXJjaCB3aXRoIHF1ZXJ5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IHtcbiAgICAgICAgcG9zdHM6IFtjcmVhdGVNb2NrUG9zdCh7IHRpdGxlOiAnQUkgU2VhcmNoIFJlc3VsdCcgfSldLFxuICAgICAgICB0b3BpY3M6IFtjcmVhdGVNb2NrVG9waWMoeyB0aXRsZTogJ0FJIFRvcGljJyB9KV0sXG4gICAgICAgIHVzZXJzOiBbY3JlYXRlTW9ja1VzZXIoeyB1c2VybmFtZTogJ2FpX2V4cGVydCcgfSldLFxuICAgICAgICB0b3RhbDogM1xuICAgICAgfVxuXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+IHNlYXJjaFJlc3VsdHNcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFwaUNsaWVudC5zZWFyY2goJ2FydGlmaWNpYWwgaW50ZWxsaWdlbmNlJylcblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGAke0FQSV9CQVNFfS9zZWFyY2g/cT1hcnRpZmljaWFsK2ludGVsbGlnZW5jZWAsXG4gICAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICAgICAgKVxuICAgICAgZXhwZWN0KHJlc3VsdC50b3RhbCkudG9CZSgzKVxuICAgIH0pXG5cbiAgICBpdCgncGVyZm9ybXMgZmlsdGVyZWQgc2VhcmNoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBwb3N0czogW10sIHRvdGFsOiAwIH0pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBhcGlDbGllbnQuc2VhcmNoKCd0ZXN0Jywge1xuICAgICAgICB0eXBlOiAncG9zdHMnLFxuICAgICAgICBjYXRlZ29yeTogJ2FpJyxcbiAgICAgICAgZGF0ZUZyb206ICcyMDIzLTAxLTAxJ1xuICAgICAgfSlcblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGAke0FQSV9CQVNFfS9zZWFyY2g/cT10ZXN0JnR5cGU9cG9zdHMmY2F0ZWdvcnk9YWkmZGF0ZUZyb209MjAyMy0wMS0wMWAsXG4gICAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICAgICAgKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0F1dGhlbnRpY2F0aW9uIEludGVncmF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdpbmNsdWRlcyBhdXRoIHRva2VuIGluIHJlcXVlc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdG9rZW4gPSAnbW9jay1qd3QtdG9rZW4nXG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBhdXRoZW50aWNhdGVkIGNsaWVudFxuICAgICAgY2xhc3MgQXV0aGVudGljYXRlZEFwaUNsaWVudCBleHRlbmRzIEFwaUNsaWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgIHN1cGVyKClcbiAgICAgICAgICB0aGlzLmRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgICAgICAgLi4udGhpcy5kZWZhdWx0SGVhZGVycyxcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgYXV0aENsaWVudCA9IG5ldyBBdXRoZW50aWNhdGVkQXBpQ2xpZW50KClcbiAgICAgIFxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBwb3N0czogW10gfSlcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGF1dGhDbGllbnQuZ2V0UG9zdHMoKVxuXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgaGVhZGVyczogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dG9rZW59YFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcblxuICAgIGl0KCdoYW5kbGVzIDQwMSB1bmF1dGhvcml6ZWQgcmVzcG9uc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+ICh7IG1lc3NhZ2U6ICdVbmF1dGhvcml6ZWQnIH0pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBleHBlY3QoYXBpQ2xpZW50LmdldFBvc3RzKCkpLnJlamVjdHMudG9UaHJvdygnVW5hdXRob3JpemVkJylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdSYXRlIExpbWl0aW5nJywgKCkgPT4ge1xuICAgIGl0KCdoYW5kbGVzIHJhdGUgbGltaXQgcmVzcG9uc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHsgJ1JldHJ5LUFmdGVyJzogJzYwJyB9KSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgbWVzc2FnZTogJ1JhdGUgbGltaXQgZXhjZWVkZWQnIH0pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCBleHBlY3QoYXBpQ2xpZW50LmdldFBvc3RzKCkpLnJlamVjdHMudG9UaHJvdygnUmF0ZSBsaW1pdCBleGNlZWRlZCcpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnQ2FjaGluZyBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgICBpdCgncmVzcGVjdHMgY2FjaGUgaGVhZGVycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ3B1YmxpYywgbWF4LWFnZT0zMDAnLFxuICAgICAgICAgICdFVGFnJzogJ1wiYWJjMTIzXCInXG4gICAgICAgIH0pLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBwb3N0czogW10gfSlcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IGFwaUNsaWVudC5nZXRQb3N0cygpXG5cbiAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgc3Vic2VxdWVudCByZXF1ZXN0cyB3b3VsZCBjaGVjayBFVGFnXG4gICAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIHN0YXR1czogMzA0LCAvLyBOb3QgTW9kaWZpZWRcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gbnVsbFxuICAgICAgfSlcblxuICAgICAgLy8gVGhpcyB3b3VsZCByZXR1cm4gY2FjaGVkIGRhdGFcbiAgICAgIGF3YWl0IGFwaUNsaWVudC5nZXRQb3N0cygpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnRXJyb3IgUmVjb3ZlcnknLCAoKSA9PiB7XG4gICAgaXQoJ3JldHJpZXMgZmFpbGVkIHJlcXVlc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gRmlyc3QgY2FsbCBmYWlscywgc2Vjb25kIHN1Y2NlZWRzXG4gICAgICBtb2NrRmV0Y2hcbiAgICAgICAgLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgcG9zdHM6IFtdIH0pXG4gICAgICAgIH0pXG5cbiAgICAgIC8vIEltcGxlbWVudCByZXRyeSBsb2dpY1xuICAgICAgY29uc3QgcmV0cnlSZXF1ZXN0ID0gYXN5bmMgKGZuOiAoKSA9PiBQcm9taXNlPGFueT4sIHJldHJpZXMgPSAxKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGZuKClcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAocmV0cmllcyA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDApKVxuICAgICAgICAgICAgcmV0dXJuIHJldHJ5UmVxdWVzdChmbiwgcmV0cmllcyAtIDEpXG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmV0cnlSZXF1ZXN0KCgpID0+IGFwaUNsaWVudC5nZXRQb3N0cygpKVxuICAgICAgXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMilcbiAgICAgIGV4cGVjdChyZXN1bHQucG9zdHMpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuICB9KVxufSlcbiJdLCJuYW1lcyI6WyJtb2NrRmV0Y2giLCJqZXN0IiwiZm4iLCJnbG9iYWwiLCJmZXRjaCIsIkFQSV9CQVNFIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJBcGlDbGllbnQiLCJiYXNlVXJsIiwiZGVmYXVsdEhlYWRlcnMiLCJyZXF1ZXN0IiwiZW5kcG9pbnQiLCJvcHRpb25zIiwidXJsIiwiY29uZmlnIiwiaGVhZGVycyIsInJlc3BvbnNlIiwib2siLCJlcnJvciIsImpzb24iLCJjYXRjaCIsIm1lc3NhZ2UiLCJFcnJvciIsInN0YXR1cyIsImdldFBvc3RzIiwicGFyYW1zIiwicXVlcnkiLCJVUkxTZWFyY2hQYXJhbXMiLCJ0b1N0cmluZyIsImdldFBvc3QiLCJpZCIsImNyZWF0ZVBvc3QiLCJkYXRhIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVQb3N0IiwiZGVsZXRlUG9zdCIsImdldFRvcGljcyIsImdldFRvcGljIiwic2x1ZyIsImdldFVzZXIiLCJ1c2VybmFtZSIsInVwZGF0ZVVzZXIiLCJzZWFyY2giLCJmaWx0ZXJzIiwicSIsInF1ZXJ5U3RyaW5nIiwiZGVzY3JpYmUiLCJhcGlDbGllbnQiLCJiZWZvcmVFYWNoIiwibW9ja0NsZWFyIiwibW9ja1Bvc3RzIiwiY3JlYXRlTW9ja1Bvc3QiLCJ0aXRsZSIsIml0IiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwicG9zdHMiLCJwYWdpbmF0aW9uIiwicGFnZSIsImxpbWl0IiwidG90YWwiLCJoYXNNb3JlIiwicmVzdWx0IiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJvYmplY3RDb250YWluaW5nIiwidG9IYXZlTGVuZ3RoIiwidG9CZSIsImNhdGVnb3J5Iiwic29ydEJ5Iiwib3JkZXIiLCJhbnkiLCJPYmplY3QiLCJtb2NrUG9zdCIsIm5ld1Bvc3REYXRhIiwiY29udGVudCIsInRhZ3MiLCJjcmVhdGVkUG9zdCIsInVwZGF0ZURhdGEiLCJ1cGRhdGVkUG9zdCIsInN1Y2Nlc3MiLCJyZWplY3RzIiwidG9UaHJvdyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIm1vY2tUb3BpY3MiLCJjcmVhdGVNb2NrVG9waWMiLCJtb2NrVG9waWMiLCJtb2NrVXNlciIsImNyZWF0ZU1vY2tVc2VyIiwiYmlvIiwidXBkYXRlZFVzZXIiLCJzZWFyY2hSZXN1bHRzIiwidG9waWNzIiwidXNlcnMiLCJ0eXBlIiwiZGF0ZUZyb20iLCJ0b2tlbiIsIkF1dGhlbnRpY2F0ZWRBcGlDbGllbnQiLCJhdXRoQ2xpZW50IiwiU3RyaW5nIiwiSGVhZGVycyIsInJldHJ5UmVxdWVzdCIsInJldHJpZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0JlRGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7OzsyQkFBZ0U7QUFFaEUsNkJBQTZCO0FBQzdCLE1BQU1BLFlBQVlDLEtBQUtDLEVBQUU7QUFDekJDLE9BQU9DLEtBQUssR0FBR0o7QUFFZixlQUFlO0FBQ2YsTUFBTUssV0FBV0MsUUFBUUMsR0FBRyxDQUFDQyxtQkFBbUIsSUFBSTtBQUVwRCxpQ0FBaUM7QUFDakMsTUFBTUM7SUFJSixZQUFZQyxVQUFrQkwsUUFBUSxDQUFFO1FBQ3RDLElBQUksQ0FBQ0ssT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsY0FBYyxHQUFHO1lBQ3BCLGdCQUFnQjtRQUNsQjtJQUNGO0lBRUEsTUFBY0MsUUFBUUMsUUFBZ0IsRUFBRUMsVUFBdUIsQ0FBQyxDQUFDLEVBQUU7UUFDakUsTUFBTUMsTUFBTSxHQUFHLElBQUksQ0FBQ0wsT0FBTyxHQUFHRyxVQUFVO1FBQ3hDLE1BQU1HLFNBQVM7WUFDYixHQUFHRixPQUFPO1lBQ1ZHLFNBQVM7Z0JBQ1AsR0FBRyxJQUFJLENBQUNOLGNBQWM7Z0JBQ3RCLEdBQUdHLFFBQVFHLE9BQU87WUFDcEI7UUFDRjtRQUVBLE1BQU1DLFdBQVcsTUFBTWQsTUFBTVcsS0FBS0M7UUFFbEMsSUFBSSxDQUFDRSxTQUFTQyxFQUFFLEVBQUU7WUFDaEIsTUFBTUMsUUFBUSxNQUFNRixTQUFTRyxJQUFJLEdBQUdDLEtBQUssQ0FBQyxJQUFPLENBQUE7b0JBQUVDLFNBQVM7Z0JBQWdCLENBQUE7WUFDNUUsTUFBTSxJQUFJQyxNQUFNSixNQUFNRyxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUVMLFNBQVNPLE1BQU0sRUFBRTtRQUM1RDtRQUVBLE9BQU9QLFNBQVNHLElBQUk7SUFDdEI7SUFFQSxZQUFZO0lBQ1osTUFBTUssU0FBU0MsU0FBYyxDQUFDLENBQUMsRUFBRTtRQUMvQixNQUFNQyxRQUFR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