{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/integration/api.integration.test.ts"],"sourcesContent":["import { createMockPost, createMockUser, createMockTopic } from '@/__tests__/utils/test-utils'\n\n// Mock fetch for API testing\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\n// API base URL\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api'\n\n// API client with error handling\nclass ApiClient {\n  private baseUrl: string\n  private defaultHeaders: Record<string, string>\n\n  constructor(baseUrl: string = API_BASE) {\n    this.baseUrl = baseUrl\n    this.defaultHeaders = {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  private async request(endpoint: string, options: RequestInit = {}) {\n    const url = `${this.baseUrl}${endpoint}`\n    const config = {\n      ...options,\n      headers: {\n        ...this.defaultHeaders,\n        ...options.headers\n      }\n    }\n\n    const response = await fetch(url, config)\n    \n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ message: 'Unknown error' }))\n      throw new Error(error.message || `HTTP ${response.status}`)\n    }\n\n    return response.json()\n  }\n\n  // Posts API\n  async getPosts(params: any = {}) {\n    const query = new URLSearchParams(params).toString()\n    return this.request(`/posts${query ? `?${query}` : ''}`)\n  }\n\n  async getPost(id: string) {\n    return this.request(`/posts/${id}`)\n  }\n\n  async createPost(data: any) {\n    return this.request('/posts', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async updatePost(id: string, data: any) {\n    return this.request(`/posts/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async deletePost(id: string) {\n    return this.request(`/posts/${id}`, { method: 'DELETE' })\n  }\n\n  // Topics API\n  async getTopics() {\n    return this.request('/topics')\n  }\n\n  async getTopic(slug: string) {\n    return this.request(`/topics/${slug}`)\n  }\n\n  // Users API\n  async getUser(username: string) {\n    return this.request(`/users/${username}`)\n  }\n\n  async updateUser(id: string, data: any) {\n    return this.request(`/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    })\n  }\n\n  // Search API\n  async search(query: string, filters: any = {}) {\n    const params = { q: query, ...filters }\n    const queryString = new URLSearchParams(params).toString()\n    return this.request(`/search?${queryString}`)\n  }\n}\n\ndescribe('API Integration Tests', () => {\n  let apiClient: ApiClient\n\n  beforeEach(() => {\n    apiClient = new ApiClient()\n    mockFetch.mockClear()\n  })\n\n  describe('Posts API', () => {\n    const mockPosts = [\n      createMockPost({ id: '1', title: 'First Post' }),\n      createMockPost({ id: '2', title: 'Second Post' })\n    ]\n\n    it('fetches posts with pagination', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          posts: mockPosts,\n          pagination: {\n            page: 1,\n            limit: 10,\n            total: 2,\n            hasMore: false\n          }\n        })\n      })\n\n      const result = await apiClient.getPosts({ page: 1, limit: 10 })\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/posts?page=1&limit=10`,\n        expect.objectContaining({\n          headers: { 'Content-Type': 'application/json' }\n        })\n      )\n\n      expect(result.posts).toHaveLength(2)\n      expect(result.pagination.total).toBe(2)\n    })\n\n    it('fetches posts with filters', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ posts: [mockPosts[0]] })\n      })\n\n      await apiClient.getPosts({\n        category: 'ai',\n        sortBy: 'date',\n        order: 'desc'\n      })\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/posts?category=ai&sortBy=date&order=desc`,\n        expect.any(Object)\n      )\n    })\n\n    it('fetches single post by ID', async () => {\n      const mockPost = createMockPost({ id: '1' })\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockPost\n      })\n\n      const result = await apiClient.getPost('1')\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/posts/1`,\n        expect.any(Object)\n      )\n      expect(result.id).toBe('1')\n    })\n\n    it('creates new post', async () => {\n      const newPostData = {\n        title: 'New Post',\n        content: 'Post content',\n        tags: ['test']\n      }\n      const createdPost = createMockPost({ ...newPostData, id: '3' })\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => createdPost\n      })\n\n      const result = await apiClient.createPost(newPostData)\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/posts`,\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(newPostData)\n        })\n      )\n      expect(result.id).toBe('3')\n    })\n\n    it('updates existing post', async () => {\n      const updateData = { title: 'Updated Title' }\n      const updatedPost = createMockPost({ id: '1', ...updateData })\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => updatedPost\n      })\n\n      const result = await apiClient.updatePost('1', updateData)\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/posts/1`,\n        expect.objectContaining({\n          method: 'PUT',\n          body: JSON.stringify(updateData)\n        })\n      )\n      expect(result.title).toBe('Updated Title')\n    })\n\n    it('deletes post', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true })\n      })\n\n      const result = await apiClient.deletePost('1')\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/posts/1`,\n        expect.objectContaining({ method: 'DELETE' })\n      )\n      expect(result.success).toBe(true)\n    })\n\n    it('handles API errors', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n        json: async () => ({ message: 'Post not found' })\n      })\n\n      await expect(apiClient.getPost('999')).rejects.toThrow('Post not found')\n    })\n\n    it('handles network errors', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('Network error'))\n\n      await expect(apiClient.getPosts()).rejects.toThrow('Network error')\n    })\n  })\n\n  describe('Topics API', () => {\n    const mockTopics = [\n      createMockTopic({ id: '1', title: 'AI', slug: 'ai' }),\n      createMockTopic({ id: '2', title: 'ML', slug: 'ml' })\n    ]\n\n    it('fetches all topics', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockTopics\n      })\n\n      const result = await apiClient.getTopics()\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/topics`,\n        expect.any(Object)\n      )\n      expect(result).toHaveLength(2)\n    })\n\n    it('fetches topic by slug', async () => {\n      const mockTopic = createMockTopic({ slug: 'ai' })\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockTopic\n      })\n\n      const result = await apiClient.getTopic('ai')\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/topics/ai`,\n        expect.any(Object)\n      )\n      expect(result.slug).toBe('ai')\n    })\n  })\n\n  describe('Users API', () => {\n    it('fetches user profile', async () => {\n      const mockUser = createMockUser({ username: 'testuser' })\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockUser\n      })\n\n      const result = await apiClient.getUser('testuser')\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/users/testuser`,\n        expect.any(Object)\n      )\n      expect(result.username).toBe('testuser')\n    })\n\n    it('updates user profile', async () => {\n      const updateData = { bio: 'Updated bio' }\n      const updatedUser = createMockUser({ id: '1', bio: 'Updated bio' })\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => updatedUser\n      })\n\n      const result = await apiClient.updateUser('1', updateData)\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/users/1`,\n        expect.objectContaining({\n          method: 'PUT',\n          body: JSON.stringify(updateData)\n        })\n      )\n      expect(result.bio).toBe('Updated bio')\n    })\n  })\n\n  describe('Search API', () => {\n    it('performs search with query', async () => {\n      const searchResults = {\n        posts: [createMockPost({ title: 'AI Search Result' })],\n        topics: [createMockTopic({ title: 'AI Topic' })],\n        users: [createMockUser({ username: 'ai_expert' })],\n        total: 3\n      }\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => searchResults\n      })\n\n      const result = await apiClient.search('artificial intelligence')\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/search?q=artificial+intelligence`,\n        expect.any(Object)\n      )\n      expect(result.total).toBe(3)\n    })\n\n    it('performs filtered search', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ posts: [], total: 0 })\n      })\n\n      await apiClient.search('test', {\n        type: 'posts',\n        category: 'ai',\n        dateFrom: '2023-01-01'\n      })\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${API_BASE}/search?q=test&type=posts&category=ai&dateFrom=2023-01-01`,\n        expect.any(Object)\n      )\n    })\n  })\n\n  describe('Authentication Integration', () => {\n    it('includes auth token in requests', async () => {\n      const token = 'mock-jwt-token'\n      \n      // Create authenticated client\n      class AuthenticatedApiClient extends ApiClient {\n        constructor() {\n          super()\n          this.defaultHeaders = {\n            ...this.defaultHeaders,\n            'Authorization': `Bearer ${token}`\n          }\n        }\n      }\n\n      const authClient = new AuthenticatedApiClient()\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ posts: [] })\n      })\n\n      await authClient.getPosts()\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'Authorization': `Bearer ${token}`\n          })\n        })\n      )\n    })\n\n    it('handles 401 unauthorized responses', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        json: async () => ({ message: 'Unauthorized' })\n      })\n\n      await expect(apiClient.getPosts()).rejects.toThrow('Unauthorized')\n    })\n  })\n\n  describe('Rate Limiting', () => {\n    it('handles rate limit responses', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 429,\n        headers: new Headers({ 'Retry-After': '60' }),\n        json: async () => ({ message: 'Rate limit exceeded' })\n      })\n\n      await expect(apiClient.getPosts()).rejects.toThrow('Rate limit exceeded')\n    })\n  })\n\n  describe('Caching Integration', () => {\n    it('respects cache headers', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        headers: new Headers({\n          'Cache-Control': 'public, max-age=300',\n          'ETag': '\"abc123\"'\n        }),\n        json: async () => ({ posts: [] })\n      })\n\n      await apiClient.getPosts()\n\n      // In a real implementation, subsequent requests would check ETag\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        status: 304, // Not Modified\n        json: async () => null\n      })\n\n      // This would return cached data\n      await apiClient.getPosts()\n    })\n  })\n\n  describe('Error Recovery', () => {\n    it('retries failed requests', async () => {\n      // First call fails, second succeeds\n      mockFetch\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ posts: [] })\n        })\n\n      // Implement retry logic\n      const retryRequest = async (fn: () => Promise<any>, retries = 1) => {\n        try {\n          return await fn()\n        } catch (error) {\n          if (retries > 0) {\n            await new Promise(resolve => setTimeout(resolve, 100))\n            return retryRequest(fn, retries - 1)\n          }\n          throw error\n        }\n      }\n\n      const result = await retryRequest(() => apiClient.getPosts())\n      \n      expect(mockFetch).toHaveBeenCalledTimes(2)\n      expect(result.posts).toBeDefined()\n    })\n  })\n})\n"],"names":["mockFetch","jest","fn","global","fetch","API_BASE","process","env","NEXT_PUBLIC_API_URL","ApiClient","baseUrl","defaultHeaders","request","endpoint","options","url","config","headers","response","ok","error","json","catch","message","Error","status","getPosts","params","query","URLSearchParams","toString","getPost","id","createPost","data","method","body","JSON","stringify","updatePost","deletePost","getTopics","getTopic","slug","getUser","username","updateUser","search","filters","q","queryString","describe","apiClient","beforeEach","mockClear","mockPosts","createMockPost","title","it","mockResolvedValueOnce","posts","pagination","page","limit","total","hasMore","result","expect","toHaveBeenCalledWith","objectContaining","toHaveLength","toBe","category","sortBy","order","any","Object","mockPost","newPostData","content","tags","createdPost","updateData","updatedPost","success","rejects","toThrow","mockRejectedValueOnce","mockTopics","createMockTopic","mockTopic","mockUser","createMockUser","bio","updatedUser","searchResults","topics","users","type","dateFrom","token","AuthenticatedApiClient","authClient","String","Headers","retryRequest","retries","Promise","resolve","setTimeout","toHaveBeenCalledTimes","toBeDefined"],"mappings":"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"}