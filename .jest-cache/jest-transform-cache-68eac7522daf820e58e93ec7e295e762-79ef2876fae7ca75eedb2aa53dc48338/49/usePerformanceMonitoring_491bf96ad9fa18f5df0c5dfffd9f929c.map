{"version":3,"names":["cov_1aetjkszza","actualCoverage","s","PerformanceMonitor","f","default","_default","useBundleAnalysis","useMemoryMonitoring","useNetworkMonitoring","usePerformanceMonitoring","componentName","startTimeRef","_react","useRef","Date","now","metricsRef","loadTime","renderTime","interactionTime","performanceEntries","measureRenderTime","useCallback","entry","name","entryType","startTime","performance","duration","current","push","b","console","warn","measureInteraction","interactionName","reportMetrics","window","navigation","getEntriesByType","memory","metrics","loadEventEnd","loadEventStart","memoryUsage","usedJSHeapSize","process","env","NODE_ENV","log","monitorWebVitals","observeLCP","observer","PerformanceObserver","list","entries","getEntries","lastEntry","length","observe","entryTypes","observeFID","forEach","fidEntry","processingStart","fid","observeCLS","clsValue","hadRecentInput","value","error","useEffect","analyzeBundle","scripts","Array","from","document","querySelectorAll","stylesheets","bundleInfo","scriptCount","stylesheetCount","totalSize","checkMemoryUsage","usage","used","total","totalJSHeapSize","limit","jsHeapSizeLimit","percentage","interval","setInterval","clearInterval","monitorNetworkRequests","resource","responseEnd","requestStart","disconnect","children","enableLogging","cleanup","setTimeout","_jsxruntime","jsx","Fragment"],"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/hooks/usePerformanceMonitoring.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useCallback, useRef } from 'react';\n\n// Performance metrics interface\ninterface PerformanceMetrics {\n  loadTime: number;\n  renderTime: number;\n  interactionTime: number;\n  memoryUsage?: number;\n  bundleSize?: number;\n}\n\n// Performance observer for monitoring\nexport const usePerformanceMonitoring = (componentName?: string) => {\n  const startTimeRef = useRef<number>(Date.now());\n  const metricsRef = useRef<PerformanceMetrics>({\n    loadTime: 0,\n    renderTime: 0,\n    interactionTime: 0\n  });\n  const performanceEntries = useRef<PerformanceEntry[]>([]);\n\n  // Measure component render time\n  const measureRenderTime = useCallback((componentName: string, renderTime: number) => {\n    const entry = {\n      name: componentName,\n      entryType: 'measure' as const,\n      startTime: performance.now() - renderTime,\n      duration: renderTime\n    };\n    \n    performanceEntries.current.push(entry);\n    \n    if (renderTime > 16) { // > 16ms indicates potential performance issue\n      console.warn(`Slow render: ${componentName} took ${renderTime}ms`);\n    }\n    \n    return renderTime;\n  }, []);\n\n  // Measure interaction response time\n  const measureInteraction = useCallback((interactionName: string) => {\n    const startTime = Date.now();\n    \n    return () => {\n      const interactionTime = Date.now() - startTime;\n      metricsRef.current.interactionTime = interactionTime;\n      \n      if (interactionTime > 100) {\n        console.warn(`Slow interaction in ${componentName || 'component'} (${interactionName}): ${interactionTime}ms`);\n      }\n      \n      return interactionTime;\n    };\n  }, [componentName]);\n\n  // Report performance metrics\n  const reportMetrics = useCallback(() => {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      const memory = (performance as any).memory;\n      \n      const metrics = {\n        ...metricsRef.current,\n        loadTime: navigation?.loadEventEnd - navigation?.loadEventStart || 0,\n        memoryUsage: memory?.usedJSHeapSize || 0\n      };\n      \n      // Send to analytics service (placeholder)\n      if (process.env.NODE_ENV === 'production') {\n        // In production, send to your analytics service\n        console.log('Performance metrics:', metrics);\n      }\n      \n      return metrics;\n    }\n    \n    return metricsRef.current;\n  }, []);\n\n  // Monitor Core Web Vitals\n  const monitorWebVitals = useCallback(() => {\n    if (typeof window === 'undefined') return;\n\n    // Largest Contentful Paint\n    const observeLCP = () => {\n      const observer = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        console.log('LCP:', lastEntry.startTime);\n      });\n      observer.observe({ entryTypes: ['largest-contentful-paint'] });\n    };\n\n    // First Input Delay\n    const observeFID = () => {\n      const observer = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry) => {\n          const fidEntry = entry as PerformanceEventTiming;\n          if (fidEntry.processingStart) {\n            const fid = fidEntry.processingStart - fidEntry.startTime;\n            console.log('FID:', fid);\n          }\n        });\n      });\n      observer.observe({ entryTypes: ['first-input'] });\n    };\n\n    // Cumulative Layout Shift\n    const observeCLS = () => {\n      let clsValue = 0;\n      const observer = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry: any) => {\n          if (!entry.hadRecentInput) {\n            clsValue += entry.value;\n          }\n        });\n        console.log('CLS:', clsValue);\n      });\n      observer.observe({ entryTypes: ['layout-shift'] });\n    };\n\n    try {\n      observeLCP();\n      observeFID();\n      observeCLS();\n    } catch (error) {\n      console.warn('Performance monitoring not supported:', error);\n    }\n  }, []);\n\n  useEffect(() => {\n    monitorWebVitals();\n    \n    return () => {\n      measureRenderTime();\n    };\n  }, [monitorWebVitals, measureRenderTime]);\n\n  return {\n    measureRenderTime,\n    measureInteraction,\n    reportMetrics,\n    metrics: metricsRef.current\n  };\n};\n\n// Hook for monitoring bundle size and code splitting effectiveness\nexport const useBundleAnalysis = () => {\n  const analyzeBundle = useCallback(() => {\n    if (typeof window === 'undefined') return;\n\n    const scripts = Array.from(document.querySelectorAll('script[src]'));\n    const stylesheets = Array.from(document.querySelectorAll('link[rel=\"stylesheet\"]'));\n    \n    const bundleInfo = {\n      scriptCount: scripts.length,\n      stylesheetCount: stylesheets.length,\n      totalSize: 0\n    };\n\n    // In a real implementation, you'd fetch actual file sizes\n    console.log('Bundle analysis:', bundleInfo);\n    return bundleInfo;\n  }, []);\n\n  return { analyzeBundle };\n};\n\n// Hook for monitoring memory usage\nexport const useMemoryMonitoring = () => {\n  const checkMemoryUsage = useCallback(() => {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const memory = (performance as any).memory;\n      if (memory) {\n        const usage = {\n          used: memory.usedJSHeapSize,\n          total: memory.totalJSHeapSize,\n          limit: memory.jsHeapSizeLimit,\n          percentage: (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100\n        };\n        \n        if (usage.percentage > 80) {\n          console.warn('High memory usage detected:', usage);\n        }\n        \n        return usage;\n      }\n    }\n    return null;\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(checkMemoryUsage, 30000); // Check every 30 seconds\n    return () => clearInterval(interval);\n  }, [checkMemoryUsage]);\n\n  return { checkMemoryUsage };\n};\n\n// Hook for monitoring network performance\nexport const useNetworkMonitoring = () => {\n  const monitorNetworkRequests = useCallback(() => {\n    if (typeof window === 'undefined') return;\n\n    const observer = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      entries.forEach((entry) => {\n        if (entry.entryType === 'resource') {\n          const resource = entry as PerformanceResourceTiming;\n          const duration = resource.responseEnd - resource.requestStart;\n          \n          if (duration > 1000) { // Slow requests > 1s\n            console.warn(`Slow network request: ${resource.name} took ${duration}ms`);\n          }\n        }\n      });\n    });\n\n    observer.observe({ entryTypes: ['resource'] });\n    \n    return () => observer.disconnect();\n  }, []);\n\n  return { monitorNetworkRequests };\n};\n\n// Performance monitoring component\nexport const PerformanceMonitor: React.FC<{\n  children: React.ReactNode;\n  componentName?: string;\n  enableLogging?: boolean;\n}> = ({ children, componentName, enableLogging = process.env.NODE_ENV === 'development' }) => {\n  const { measureRenderTime, reportMetrics } = usePerformanceMonitoring(componentName);\n  const { checkMemoryUsage } = useMemoryMonitoring();\n  const { monitorNetworkRequests } = useNetworkMonitoring();\n\n  useEffect(() => {\n    if (enableLogging) {\n      const cleanup = monitorNetworkRequests();\n      \n      // Report metrics after component mounts\n      setTimeout(() => {\n        reportMetrics();\n        checkMemoryUsage();\n      }, 1000);\n      \n      return cleanup;\n    }\n  }, [enableLogging, monitorNetworkRequests, reportMetrics, checkMemoryUsage]);\n\n  return <>{children}</>;\n};\n\nexport default usePerformanceMonitoring;\n"],"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","ignoreList":[]}