{"version":3,"sources":["/Users/joshszep/code/therobotoverlord-mono/therobotoverlord-web/src/__tests__/utils/caching.test.ts"],"sourcesContent":["import { createCache, withCache, apiCache } from '@/utils/caching'\n\n// Mock localStorage and sessionStorage\nconst mockStorage = () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn()\n})\n\nObject.defineProperty(window, 'localStorage', { value: mockStorage() })\nObject.defineProperty(window, 'sessionStorage', { value: mockStorage() })\n\ndescribe('Caching Utilities', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    apiCache.clear()\n  })\n\n  describe('MemoryCache', () => {\n    it('stores and retrieves data', () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 10 })\n      \n      cache.set('key1', 'value1')\n      expect(cache.get('key1')).toBe('value1')\n    })\n\n    it('respects TTL expiration', async () => {\n      const cache = createCache('memory', { ttl: 50, maxSize: 10 })\n      \n      cache.set('key1', 'value1')\n      expect(cache.get('key1')).toBe('value1')\n      \n      // Wait for TTL to expire\n      await new Promise(resolve => setTimeout(resolve, 100))\n      expect(cache.get('key1')).toBeNull()\n    })\n\n    it('enforces max size limit', () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 2 })\n      \n      cache.set('key1', 'value1')\n      cache.set('key2', 'value2')\n      cache.set('key3', 'value3') // Should evict key1\n      \n      expect(cache.get('key1')).toBeNull()\n      expect(cache.get('key2')).toBe('value2')\n      expect(cache.get('key3')).toBe('value3')\n    })\n\n    it('tracks hit counts', () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 10 })\n      \n      cache.set('key1', 'value1')\n      cache.get('key1')\n      cache.get('key1')\n      \n      const stats = cache.getStats()\n      expect(stats.entries[0].hits).toBe(2)\n    })\n\n    it('deletes specific keys', () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 10 })\n      \n      cache.set('key1', 'value1')\n      cache.set('key2', 'value2')\n      \n      expect(cache.delete('key1')).toBe(true)\n      expect(cache.get('key1')).toBeNull()\n      expect(cache.get('key2')).toBe('value2')\n    })\n\n    it('clears all data', () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 10 })\n      \n      cache.set('key1', 'value1')\n      cache.set('key2', 'value2')\n      cache.clear()\n      \n      expect(cache.get('key1')).toBeNull()\n      expect(cache.get('key2')).toBeNull()\n      expect(cache.size()).toBe(0)\n    })\n  })\n\n  describe('withCache decorator', () => {\n    it('caches function results', () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 10 })\n      const mockFn = jest.fn().mockReturnValue('result')\n      const cachedFn = withCache(mockFn, cache)\n      \n      // First call\n      expect(cachedFn('arg1')).toBe('result')\n      expect(mockFn).toHaveBeenCalledTimes(1)\n      \n      // Second call should use cache\n      expect(cachedFn('arg1')).toBe('result')\n      expect(mockFn).toHaveBeenCalledTimes(1)\n      \n      // Different args should call function again\n      expect(cachedFn('arg2')).toBe('result')\n      expect(mockFn).toHaveBeenCalledTimes(2)\n    })\n\n    it('handles async functions', async () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 10 })\n      const mockAsyncFn = jest.fn().mockResolvedValue('async result')\n      const cachedFn = withCache(mockAsyncFn, cache)\n      \n      // First call\n      const result1 = await cachedFn('arg1')\n      expect(result1).toBe('async result')\n      expect(mockAsyncFn).toHaveBeenCalledTimes(1)\n      \n      // Second call should use cache\n      const result2 = await cachedFn('arg1')\n      expect(result2).toBe('async result')\n      expect(mockAsyncFn).toHaveBeenCalledTimes(1)\n    })\n\n    it('uses custom key generator', () => {\n      const cache = createCache('memory', { ttl: 1000, maxSize: 10 })\n      const mockFn = jest.fn().mockReturnValue('result')\n      const keyGen = jest.fn().mockReturnValue('custom-key')\n      const cachedFn = withCache(mockFn, cache, keyGen)\n      \n      cachedFn('arg1', 'arg2')\n      \n      expect(keyGen).toHaveBeenCalledWith('arg1', 'arg2')\n      expect(cache.has('custom-key')).toBe(true)\n    })\n  })\n\n  describe('StorageCache', () => {\n    it('uses localStorage correctly', () => {\n      const mockGetItem = jest.fn()\n      const mockSetItem = jest.fn()\n      \n      Object.defineProperty(window, 'localStorage', {\n        value: { ...mockStorage(), getItem: mockGetItem, setItem: mockSetItem }\n      })\n      \n      const cache = createCache('localStorage', { ttl: 1000, maxSize: 10 })\n      \n      // Mock successful storage\n      mockGetItem.mockReturnValue(JSON.stringify({\n        data: 'stored value',\n        timestamp: Date.now(),\n        ttl: 1000,\n        hits: 0\n      }))\n      \n      cache.set('key1', 'value1')\n      expect(mockSetItem).toHaveBeenCalled()\n      \n      const result = cache.get('key1')\n      expect(mockGetItem).toHaveBeenCalledWith('robot-overlord:key1')\n    })\n\n    it('handles storage errors gracefully', () => {\n      const mockSetItem = jest.fn().mockImplementation(() => {\n        throw new Error('Storage quota exceeded')\n      })\n      \n      Object.defineProperty(window, 'localStorage', {\n        value: { ...mockStorage(), setItem: mockSetItem }\n      })\n      \n      const cache = createCache('localStorage', { ttl: 1000, maxSize: 10 })\n      \n      // Should not throw error\n      expect(() => cache.set('key1', 'value1')).not.toThrow()\n    })\n\n    it('falls back to memory cache when storage unavailable', () => {\n      // Simulate server-side environment\n      const originalWindow = global.window\n      delete (global as any).window\n      \n      const cache = createCache('localStorage', { ttl: 1000, maxSize: 10 })\n      \n      cache.set('key1', 'value1')\n      expect(cache.get('key1')).toBe('value1')\n      \n      // Restore window\n      global.window = originalWindow\n    })\n  })\n\n  describe('Predefined caches', () => {\n    it('apiCache works correctly', () => {\n      apiCache.set('api-key', { data: 'api response' })\n      expect(apiCache.get('api-key')).toEqual({ data: 'api response' })\n    })\n\n    it('different cache instances are isolated', () => {\n      const cache1 = createCache('memory', { ttl: 1000, maxSize: 10 })\n      const cache2 = createCache('memory', { ttl: 1000, maxSize: 10 })\n      \n      cache1.set('key1', 'value1')\n      cache2.set('key1', 'value2')\n      \n      expect(cache1.get('key1')).toBe('value1')\n      expect(cache2.get('key1')).toBe('value2')\n    })\n  })\n})\n"],"names":["mockStorage","getItem","jest","fn","setItem","removeItem","clear","length","key","Object","defineProperty","window","value","describe","beforeEach","clearAllMocks","apiCache","it","cache","createCache","ttl","maxSize","set","expect","get","toBe","Promise","resolve","setTimeout","toBeNull","stats","getStats","entries","hits","delete","size","mockFn","mockReturnValue","cachedFn","withCache","toHaveBeenCalledTimes","mockAsyncFn","mockResolvedValue","result1","result2","keyGen","toHaveBeenCalledWith","has","mockGetItem","mockSetItem","JSON","stringify","data","timestamp","Date","now","toHaveBeenCalled","result","mockImplementation","Error","not","toThrow","originalWindow","global","toEqual","cache1","cache2"],"mappings":"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"}